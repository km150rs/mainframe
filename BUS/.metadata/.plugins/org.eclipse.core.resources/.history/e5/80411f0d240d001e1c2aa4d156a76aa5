package com.pjy.dashboard.service;

import java.io.File;
import java.io.IOException;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.pjy.dashboard.core.dao.jpa.h2.FileRepository;
import com.pjy.dashboard.core.domain.security.FileEntity;
import com.pjy.dashboard.domain.CommonCodeVo;

import lombok.Getter;
import lombok.RequiredArgsConstructor;


@RequiredArgsConstructor
@Service
@Getter
public class FileService {

    @Value("${file.dir}")
    private String fileDir;

    private final FileRepository fileRepository;

    
    public String saveFile(CommonCodeVo vo,MultipartFile files) throws IOException {
        if (files.isEmpty()) {
            return null;
        }

        // 원래 파일 이름 추출
        String origName = files.getOriginalFilename();

        // 파일 이름으로 쓸 uuid 생성
        String uuid = UUID.randomUUID().toString();

        // 확장자 추출(ex : .png)
        String extension = origName.substring(origName.lastIndexOf("."));

        // uuid와 확장자 결합
        String savedName = uuid + extension;

        // 파일을 불러올 때 사용할 파일 경로
        String savedPath = fileDir + savedName;

        // 파일 엔티티 생성
        FileEntity file = FileEntity.builder()
        		.id(vo.getEmpNm())
                .orgNm(origName)
                .savedNm(savedName)
                .savedPath(savedPath)
                .company_no(vo.getCompanyNo())
                .file_gb(vo.getFileGb())
                .build();

        // 실제로 로컬에 uuid를 파일명으로 저장
        files.transferTo(new File(savedPath));

        // 데이터베이스에 파일 정보 저장 
        FileEntity fileEntity = fileRepository.findByEmpNm(vo.getCompanyNo(),vo.getFile_gb(),vo.getEmpNm());
        if (fileEntity != null) {
        	fileRepository.deleteByEmpNm(vo.getCompanyNo(),vo.getFile_gb(),vo.getEmpNm());
        }
        FileEntity savedFile = fileRepository.save(file);

        return savedFile.getId();
    }
    public String deleteFile(CommonCodeVo vo) throws IOException {
        if (vo.getEmpNm().isEmpty()) {
            return null;
        }

        FileEntity fileEntity = fileRepository.findByEmpNm(vo.getCompanyNo(),vo.getFileGb(),vo.getEmpNm());
        if (fileEntity == null) {
        	return null;
        }
    	fileRepository.deleteByEmpNm(vo.getCompanyNo(),vo.getFileGb(),vo.getEmpNm());
    	
        File file = new File(fileEntity.getSavedPath());
        file.delete();

        return "ok";
    }    
}
