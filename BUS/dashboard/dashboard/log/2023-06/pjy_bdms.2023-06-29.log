2023-06-29 02:51:17.632 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=3h12s817ms975µs800ns).
2023-06-29 08:44:09.126 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-29 08:44:09.126 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-29 08:44:09.126 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-29 08:44:09.126 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-29 08:44:15.414 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=5h53m4s274ms193µs600ns).
2023-06-29 08:58:32.770 INFO  [http-nio-10010-exec-6] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-29 08:58:32.770 INFO  [http-nio-10010-exec-6] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-29 08:58:32.770 INFO  [http-nio-10010-exec-6] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-29 08:58:32.771 INFO  [http-nio-10010-exec-6] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-29 08:58:32.771 INFO  [http-nio-10010-exec-6] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-29 08:58:34.557 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-06-29 08:58:34.561 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-06-29 08:58:34.599 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-29 08:58:34.694 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$Qdvdch7Ko8QOp1iKvVCZM.LswueWAsPwWYzrkyjFLzPVNKDGOsjBG
2023-06-29 08:58:34.795 INFO  [http-nio-10010-exec-2] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-29 09:00:34.785 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@34d8d0ee
2023-06-29 09:00:34.786 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_EMPLOYEEINFO} 
2023-06-29 09:00:34.786 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBL_employeeInfo a where   a.company_no = '100' order by a.emp_no
2023-06-29 09:00:34.787 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 09:00:34.793 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBL_employeeInfo a where   a.company_no = '100' order by a.emp_no
 {executed in 6 msec}
2023-06-29 09:00:34.797 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBL_employeeInfo a where   a.company_no = '100' order by a.emp_no
 {executed in 2 msec}
2023-06-29 09:00:40.639 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1fa16c26
2023-06-29 09:00:40.639 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_CARINFO} 
2023-06-29 09:00:40.639 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBL_carInfo a where   a.company_no = '100' order by a.car_regno
2023-06-29 09:00:40.641 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 09:00:40.648 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBL_carInfo a where   a.company_no = '100' order by a.car_regno
 {executed in 6 msec}
2023-06-29 09:00:40.653 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBL_carInfo a where   a.company_no = '100' order by a.car_regno
 {executed in 3 msec}
2023-06-29 09:00:44.864 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6e1be03c
2023-06-29 09:00:44.864 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ROUTEINFO} 
2023-06-29 09:00:44.865 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBL_ROUTEINFO a where   a.company_no = '100' order by a.lno
2023-06-29 09:00:44.867 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 09:00:44.870 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBL_ROUTEINFO a where   a.company_no = '100' order by a.lno
 {executed in 1 msec}
2023-06-29 09:00:44.872 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBL_ROUTEINFO a where   a.company_no = '100' order by a.lno
 {executed in 1 msec}
2023-06-29 09:01:06.709 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 09:01:06.709 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 09:01:06.710 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 09:01:06.711 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:01:06.719 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 7 msec}
2023-06-29 09:01:06.726 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 5 msec}
2023-06-29 09:03:41.664 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:03:41.666 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-29 09:03:46.975 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
2023-06-29 09:03:46.976 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:03:46.977 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
 {executed in 1 msec}
2023-06-29 09:12:34.601 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
2023-06-29 09:12:34.603 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 09:12:34.604 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
61. select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
 {executed in 1 msec}
2023-06-29 09:14:23.116 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
2023-06-29 09:14:23.117 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 09:14:23.118 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
61. select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
 {executed in 1 msec}
2023-06-29 09:47:36.067 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 09:47:36.069 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:47:36.111 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 40 msec}
2023-06-29 09:47:57.136 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@33f61355
2023-06-29 09:47:57.137 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 09:47:57.143 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석'
	order by 1
 {executed in 4 msec}
2023-06-29 09:47:57.179 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fb059105
2023-06-29 09:47:57.179 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 09:47:57.180 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
2023-06-29 09:47:57.181 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 09:47:57.182 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 09:47:57.271 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '강병석'
 {executed in 1 msec}
2023-06-29 09:57:47.046 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 09:57:47.047 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:57:47.049 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-29 09:57:49.079 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-29 09:57:49.084 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:57:49.091 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 5 msec}
2023-06-29 09:57:49.133 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-29 09:57:49.133 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 09:57:49.133 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-29 09:57:49.135 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 09:57:49.137 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 09:57:49.191 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '강근원'
 {executed in 0 msec}
2023-06-29 09:57:52.034 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8c713736
2023-06-29 09:57:52.035 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-29 09:57:52.035 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-29 09:57:52.036 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:57:52.046 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 8 msec}
2023-06-29 09:57:52.050 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 4 msec}
2023-06-29 09:57:54.142 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@238ff6d9
2023-06-29 09:57:54.142 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-29 09:57:54.142 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-29 09:57:54.144 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 09:57:54.146 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-29 09:57:54.148 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 0 msec}
2023-06-29 09:57:55.485 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-29 09:57:55.485 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-29 09:57:55.486 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '강근원'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-06-29 09:57:55.487 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:57:59.640 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '강근원'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 4151 msec}
2023-06-29 09:57:59.642 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:58:00.306 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '강근원'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 664 msec}
2023-06-29 09:58:00.357 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fcaa69a3
2023-06-29 09:58:00.357 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-29 09:58:00.358 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '강근원' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-06-29 09:58:00.359 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:58:01.914 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '강근원' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 1555 msec}
2023-06-29 09:58:01.916 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 09:58:01.917 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '강근원' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-29 09:58:01.965 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b8fc5f9
2023-06-29 09:58:01.966 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-29 09:58:01.967 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '강근원' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
2023-06-29 09:58:02.120 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '강근원' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 152 msec}
2023-06-29 09:58:02.183 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '강근원' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 63 msec}
2023-06-29 09:58:02.229 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@67d14ecf
2023-06-29 09:58:02.230 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-29 09:58:02.230 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-29 09:58:02.239 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 8 msec}
2023-06-29 09:58:02.242 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-29 09:58:04.623 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8a0cd256
2023-06-29 09:58:04.624 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 09:58:04.624 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-29 09:58:04.625 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:58:04.627 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-29 09:58:04.629 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 09:58:04.708 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6a811a7b
2023-06-29 09:58:04.725 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱'
	order by 1
 {executed in 12 msec}
2023-06-29 09:58:04.770 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3190982b
2023-06-29 09:58:04.770 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 09:58:04.770 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
2023-06-29 09:58:04.773 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-29 09:58:04.775 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 09:58:04.839 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '고상욱'
 {executed in 1 msec}
2023-06-29 09:58:24.899 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f5514a4
2023-06-29 09:58:24.899 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-29 09:58:24.899 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-06-29 09:58:24.901 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:58:24.908 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 6 msec}
2023-06-29 09:58:24.912 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 4 msec}
2023-06-29 09:58:26.510 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a673d447
2023-06-29 09:58:26.510 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-29 09:58:26.511 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '고상욱' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-29 09:58:26.512 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 09:58:26.514 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '고상욱' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 2 msec}
2023-06-29 09:58:26.516 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '고상욱' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-29 09:58:27.599 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@af53a8a7
2023-06-29 09:58:27.599 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-29 09:58:27.599 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '고상욱'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-06-29 09:58:27.601 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 09:58:28.207 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '고상욱'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 606 msec}
2023-06-29 09:58:28.210 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 09:58:28.789 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '고상욱'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 578 msec}
2023-06-29 09:58:28.902 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@12ffa21a
2023-06-29 09:58:28.902 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-29 09:58:28.903 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '고상욱' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-06-29 09:58:28.903 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 09:58:30.496 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '고상욱' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 1591 msec}
2023-06-29 09:58:30.497 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:58:30.498 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '고상욱' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-29 09:58:30.574 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b3138bce
2023-06-29 09:58:30.574 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-29 09:58:30.574 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '고상욱' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
2023-06-29 09:58:30.605 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '고상욱' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 29 msec}
2023-06-29 09:58:30.659 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '고상욱' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 53 msec}
2023-06-29 09:59:09.656 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 09:59:09.658 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 09:59:09.678 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 20 msec}
2023-06-29 09:59:11.274 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-29 09:59:11.276 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:59:11.284 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 6 msec}
2023-06-29 09:59:11.316 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-29 09:59:11.317 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 09:59:11.317 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-29 09:59:11.319 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-29 09:59:11.320 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 09:59:11.361 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '강근원'
 {executed in 1 msec}
2023-06-29 09:59:12.888 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8c713736
2023-06-29 09:59:12.888 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-29 09:59:12.888 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-29 09:59:12.890 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:59:12.900 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 8 msec}
2023-06-29 09:59:12.905 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 4 msec}
2023-06-29 09:59:13.858 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@238ff6d9
2023-06-29 09:59:13.858 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-29 09:59:13.858 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-29 09:59:13.860 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 09:59:13.863 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 3 msec}
2023-06-29 09:59:13.865 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 0 msec}
2023-06-29 09:59:14.953 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-29 09:59:14.953 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-29 09:59:14.954 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '강근원'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-06-29 09:59:14.955 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 09:59:15.341 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '강근원'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 385 msec}
2023-06-29 09:59:15.753 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '강근원'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 411 msec}
2023-06-29 09:59:15.807 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fcaa69a3
2023-06-29 09:59:15.807 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-29 09:59:15.807 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '강근원' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-06-29 09:59:17.290 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '강근원' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 1482 msec}
2023-06-29 09:59:17.292 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:59:17.294 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '강근원' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-29 09:59:17.334 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b8fc5f9
2023-06-29 09:59:17.334 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-29 09:59:17.334 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '강근원' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
2023-06-29 09:59:17.404 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '강근원' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 69 msec}
2023-06-29 09:59:17.468 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '강근원' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 63 msec}
2023-06-29 09:59:19.837 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8a0cd256
2023-06-29 09:59:19.837 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 09:59:19.837 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-29 09:59:19.839 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 09:59:19.841 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 09:59:19.842 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 09:59:19.913 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6a811a7b
2023-06-29 09:59:19.921 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱'
	order by 1
 {executed in 5 msec}
2023-06-29 09:59:19.967 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3190982b
2023-06-29 09:59:19.967 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 09:59:19.967 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
2023-06-29 09:59:19.970 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-29 09:59:19.971 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 09:59:20.038 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '고상욱'
 {executed in 1 msec}
2023-06-29 09:59:23.072 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f5514a4
2023-06-29 09:59:23.072 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-29 09:59:23.073 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-06-29 09:59:23.074 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:59:23.079 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 5 msec}
2023-06-29 09:59:23.081 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-29 09:59:24.761 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a673d447
2023-06-29 09:59:24.761 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-29 09:59:24.762 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '고상욱' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-29 09:59:24.763 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 09:59:24.765 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '고상욱' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 2 msec}
2023-06-29 09:59:24.767 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '고상욱' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-29 09:59:25.742 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f5514a4
2023-06-29 09:59:25.742 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-29 09:59:25.742 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-06-29 09:59:25.743 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:59:25.747 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-29 09:59:25.751 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-29 09:59:26.649 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3190982b
2023-06-29 09:59:26.649 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 09:59:26.649 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
2023-06-29 09:59:26.650 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:59:26.652 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 09:59:26.654 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 09:59:37.266 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1b5ad2b2
2023-06-29 09:59:37.268 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 09:59:37.272 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='노주성' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='노주성' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='노주성' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='노주성' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='노주성' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='노주성'
	order by 1
 {executed in 2 msec}
2023-06-29 09:59:37.299 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e26a5062
2023-06-29 09:59:37.300 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 09:59:37.300 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '노주성' order by a.base_year desc,a.acc_time desc
2023-06-29 09:59:37.302 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '노주성' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 09:59:37.303 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '노주성' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 09:59:37.355 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '노주성'
 {executed in 1 msec}
2023-06-29 09:59:38.629 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9fb87c73
2023-06-29 09:59:38.630 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:59:38.633 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='남기선'
	order by 1
 {executed in 2 msec}
2023-06-29 09:59:38.669 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@66c7fa23
2023-06-29 09:59:38.670 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 09:59:38.670 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '남기선' order by a.base_year desc,a.acc_time desc
2023-06-29 09:59:38.672 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '남기선' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-29 09:59:38.673 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '남기선' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 09:59:38.744 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '남기선'
 {executed in 0 msec}
2023-06-29 09:59:51.754 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@448c769c
2023-06-29 09:59:51.754 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-29 09:59:51.754 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '남기선' ORDER BY b.base_ym desc
2023-06-29 09:59:51.756 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:59:51.763 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '남기선' ORDER BY b.base_ym desc
 {executed in 6 msec}
2023-06-29 09:59:51.767 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '남기선' ORDER BY b.base_ym desc
 {executed in 4 msec}
2023-06-29 09:59:55.222 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@66c7fa23
2023-06-29 09:59:55.222 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 09:59:55.222 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '남기선' order by a.base_year desc,a.acc_time desc
2023-06-29 09:59:55.223 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:59:55.225 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '남기선' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 09:59:55.227 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '남기선' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-29 09:59:55.349 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c48260b4
2023-06-29 09:59:55.354 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김익수' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김익수' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김익수' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김익수' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김익수' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김익수'
	order by 1
 {executed in 3 msec}
2023-06-29 09:59:55.383 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8b91de64
2023-06-29 09:59:55.383 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 09:59:55.383 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김익수' order by a.base_year desc,a.acc_time desc
2023-06-29 09:59:55.385 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김익수' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-29 09:59:55.386 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김익수' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 09:59:55.453 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김익수'
 {executed in 0 msec}
2023-06-29 09:59:57.699 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@69565add
2023-06-29 09:59:57.700 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-29 09:59:57.700 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '김익수' ORDER BY b.base_ym desc
2023-06-29 09:59:57.702 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:59:57.707 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '김익수' ORDER BY b.base_ym desc
 {executed in 4 msec}
2023-06-29 09:59:57.710 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '김익수' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-29 09:59:59.899 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8b91de64
2023-06-29 09:59:59.899 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 09:59:59.899 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김익수' order by a.base_year desc,a.acc_time desc
2023-06-29 09:59:59.901 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 09:59:59.902 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김익수' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 09:59:59.904 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김익수' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 09:59:59.991 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a2fb90bf
2023-06-29 09:59:59.996 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김용장' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김용장' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김용장' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김용장' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김용장' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김용장'
	order by 1
 {executed in 3 msec}
2023-06-29 10:00:00.035 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6a0b0e6f
2023-06-29 10:00:00.035 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:00:00.035 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김용장' order by a.base_year desc,a.acc_time desc
2023-06-29 10:00:00.037 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김용장' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-29 10:00:00.039 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김용장' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:00:00.093 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김용장'
 {executed in 1 msec}
2023-06-29 10:00:01.384 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@47cf8ae8
2023-06-29 10:00:01.384 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-29 10:00:01.384 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '김용장' ORDER BY b.base_ym desc
2023-06-29 10:00:01.386 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:00:01.390 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '김용장' ORDER BY b.base_ym desc
 {executed in 4 msec}
2023-06-29 10:00:01.393 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '김용장' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-29 10:00:04.100 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6a0b0e6f
2023-06-29 10:00:04.101 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:00:04.101 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김용장' order by a.base_year desc,a.acc_time desc
2023-06-29 10:00:04.102 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:00:04.104 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김용장' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:00:04.105 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김용장' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:00:04.213 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1b2553f8
2023-06-29 10:00:04.220 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김용문' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김용문' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김용문' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김용문' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김용문' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김용문'
	order by 1
 {executed in 3 msec}
2023-06-29 10:00:04.253 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e234d1a8
2023-06-29 10:00:04.253 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:00:04.254 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김용문' order by a.base_year desc,a.acc_time desc
2023-06-29 10:00:04.255 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김용문' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:00:04.257 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김용문' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:00:04.311 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김용문'
 {executed in 0 msec}
2023-06-29 10:00:06.075 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bff94e21
2023-06-29 10:00:06.075 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-29 10:00:06.075 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '김용문' ORDER BY b.base_ym desc
2023-06-29 10:00:06.076 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:00:06.080 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '김용문' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-29 10:00:06.085 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '김용문' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-29 10:00:07.216 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e234d1a8
2023-06-29 10:00:07.216 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:00:07.216 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김용문' order by a.base_year desc,a.acc_time desc
2023-06-29 10:00:07.218 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:00:07.220 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김용문' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:00:07.222 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김용문' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:00:07.315 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2e47a536
2023-06-29 10:00:07.318 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김요섭' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김요섭' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김요섭' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김요섭' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김요섭' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김요섭'
	order by 1
 {executed in 2 msec}
2023-06-29 10:00:07.359 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f55722e6
2023-06-29 10:00:07.359 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:00:07.359 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김요섭' order by a.base_year desc,a.acc_time desc
2023-06-29 10:00:07.361 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김요섭' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:00:07.363 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김요섭' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:00:07.439 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김요섭'
 {executed in 0 msec}
2023-06-29 10:00:19.308 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@acd723b3
2023-06-29 10:00:19.309 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:00:19.314 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호'
	order by 1
 {executed in 3 msec}
2023-06-29 10:00:19.352 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73e6a163
2023-06-29 10:00:19.352 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:00:19.352 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김선호' order by a.base_year desc,a.acc_time desc
2023-06-29 10:00:19.353 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김선호' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:00:19.355 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김선호' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:00:19.411 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김선호'
 {executed in 0 msec}
2023-06-29 10:00:20.836 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@140c7287
2023-06-29 10:00:20.838 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:00:20.844 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상덕' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상덕' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상덕' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상덕' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상덕' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김상덕'
	order by 1
 {executed in 5 msec}
2023-06-29 10:00:20.885 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@db1bf037
2023-06-29 10:00:20.885 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:00:20.885 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김상덕' order by a.base_year desc,a.acc_time desc
2023-06-29 10:00:20.887 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김상덕' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:00:20.888 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김상덕' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:00:20.941 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김상덕'
 {executed in 1 msec}
2023-06-29 10:00:22.049 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5cc0588b
2023-06-29 10:00:22.051 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:00:22.056 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규'
	order by 1
 {executed in 4 msec}
2023-06-29 10:00:22.094 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@23cfd63b
2023-06-29 10:00:22.094 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:00:22.094 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김민규' order by a.base_year desc,a.acc_time desc
2023-06-29 10:00:22.097 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김민규' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:00:22.099 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김민규' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:00:22.175 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김민규'
 {executed in 0 msec}
2023-06-29 10:00:23.147 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3972a348
2023-06-29 10:00:23.149 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:00:23.152 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현'
	order by 1
 {executed in 2 msec}
2023-06-29 10:00:23.177 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8220f8
2023-06-29 10:00:23.177 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:00:23.177 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김명현' order by a.base_year desc,a.acc_time desc
2023-06-29 10:00:23.179 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김명현' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-29 10:00:23.180 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김명현' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:00:23.239 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김명현'
 {executed in 1 msec}
2023-06-29 10:00:24.902 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@492b2767
2023-06-29 10:00:24.904 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:00:24.911 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철'
	order by 1
 {executed in 4 msec}
2023-06-29 10:00:24.949 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@103aa517
2023-06-29 10:00:24.949 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:00:24.950 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김만철' order by a.base_year desc,a.acc_time desc
2023-06-29 10:00:24.952 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김만철' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-29 10:00:24.953 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김만철' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:00:25.018 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김만철'
 {executed in 1 msec}
2023-06-29 10:00:27.892 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1646c093
2023-06-29 10:00:27.893 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:00:27.897 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근'
	order by 1
 {executed in 3 msec}
2023-06-29 10:00:27.930 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dd563e43
2023-06-29 10:00:27.930 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:00:27.930 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김도근' order by a.base_year desc,a.acc_time desc
2023-06-29 10:00:27.932 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김도근' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-29 10:00:27.934 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김도근' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:00:28.001 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김도근'
 {executed in 1 msec}
2023-06-29 10:01:00.956 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@492b2767
2023-06-29 10:01:00.957 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:01:00.961 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김만철'
	order by 1
 {executed in 3 msec}
2023-06-29 10:01:00.988 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@103aa517
2023-06-29 10:01:00.988 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:01:00.989 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김만철' order by a.base_year desc,a.acc_time desc
2023-06-29 10:01:00.990 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김만철' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:01:00.992 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김만철' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:01:01.061 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김만철'
 {executed in 0 msec}
2023-06-29 10:01:03.450 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@93489664
2023-06-29 10:01:03.451 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:01:03.456 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회'
	order by 1
 {executed in 3 msec}
2023-06-29 10:01:03.490 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5a581414
2023-06-29 10:01:03.490 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:01:03.490 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김동회' order by a.base_year desc,a.acc_time desc
2023-06-29 10:01:03.492 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김동회' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:01:03.493 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김동회' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:01:03.585 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김동회'
 {executed in 0 msec}
2023-06-29 10:01:44.189 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 10:01:44.190 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:01:44.224 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 34 msec}
2023-06-29 10:01:47.204 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-29 10:01:47.205 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:01:47.211 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 3 msec}
2023-06-29 10:01:47.243 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-29 10:01:47.243 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:01:47.244 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-29 10:01:47.245 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:01:47.246 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:01:47.289 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '강근원'
 {executed in 0 msec}
2023-06-29 10:01:48.720 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@449e82dd
2023-06-29 10:01:48.721 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:01:48.725 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현'
	order by 1
 {executed in 2 msec}
2023-06-29 10:01:48.752 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bae008d
2023-06-29 10:01:48.752 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:01:48.753 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' order by a.base_year desc,a.acc_time desc
2023-06-29 10:01:48.754 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:01:48.755 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:01:48.805 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '국수현'
 {executed in 1 msec}
2023-06-29 10:01:49.674 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d0f1a0d6
2023-06-29 10:01:49.676 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:01:49.680 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현'
	order by 1
 {executed in 3 msec}
2023-06-29 10:01:49.708 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@98011e86
2023-06-29 10:01:49.708 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:01:49.708 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
2023-06-29 10:01:49.709 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:01:49.710 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:01:49.759 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권오현'
 {executed in 0 msec}
2023-06-29 10:01:50.625 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dbf10eee
2023-06-29 10:01:50.627 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:01:50.631 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범'
	order by 1
 {executed in 3 msec}
2023-06-29 10:01:50.665 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a3008c9e
2023-06-29 10:01:50.665 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:01:50.665 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권재범' order by a.base_year desc,a.acc_time desc
2023-06-29 10:01:50.666 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권재범' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:01:50.667 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권재범' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:01:50.760 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권재범'
 {executed in 0 msec}
2023-06-29 10:01:51.688 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2b9560d2
2023-06-29 10:01:51.689 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:01:51.693 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석'
	order by 1
 {executed in 2 msec}
2023-06-29 10:01:51.724 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f2a4de82
2023-06-29 10:01:51.724 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:01:51.724 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경석' order by a.base_year desc,a.acc_time desc
2023-06-29 10:01:51.725 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:01:51.727 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경석' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:01:51.796 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김경석'
 {executed in 0 msec}
2023-06-29 10:01:53.103 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c10e37cb
2023-06-29 10:01:53.105 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:01:53.109 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연'
	order by 1
 {executed in 2 msec}
2023-06-29 10:01:53.135 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@881db57b
2023-06-29 10:01:53.136 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:01:53.136 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경연' order by a.base_year desc,a.acc_time desc
2023-06-29 10:01:53.137 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경연' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:01:53.138 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경연' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:01:53.191 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김경연'
 {executed in 0 msec}
2023-06-29 10:05:01.140 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 10:05:01.140 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:05:01.161 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 21 msec}
2023-06-29 10:05:03.378 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@33f61355
2023-06-29 10:05:03.379 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:05:03.384 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석'
	order by 1
 {executed in 2 msec}
2023-06-29 10:05:03.421 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fb059105
2023-06-29 10:05:03.421 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:05:03.421 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
2023-06-29 10:05:03.422 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:05:03.423 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:05:03.447 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '강병석'
 {executed in 0 msec}
2023-06-29 10:05:35.990 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 10:05:35.992 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:05:35.994 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-29 10:05:37.435 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@33f61355
2023-06-29 10:05:37.437 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:05:37.443 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석'
	order by 1
 {executed in 3 msec}
2023-06-29 10:05:37.476 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fb059105
2023-06-29 10:05:37.476 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:05:37.476 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
2023-06-29 10:05:37.478 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:05:37.479 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:05:37.519 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '강병석'
 {executed in 1 msec}
2023-06-29 10:05:38.619 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@449e82dd
2023-06-29 10:05:38.621 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:05:38.627 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현'
	order by 1
 {executed in 4 msec}
2023-06-29 10:05:38.661 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bae008d
2023-06-29 10:05:38.661 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:05:38.662 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' order by a.base_year desc,a.acc_time desc
2023-06-29 10:05:38.664 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:05:38.665 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:05:38.738 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '국수현'
 {executed in 0 msec}
2023-06-29 10:05:40.113 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d0f1a0d6
2023-06-29 10:05:40.115 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:05:40.120 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현'
	order by 1
 {executed in 2 msec}
2023-06-29 10:05:40.159 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@98011e86
2023-06-29 10:05:40.159 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:05:40.159 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
2023-06-29 10:05:40.161 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-29 10:05:40.162 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:05:40.220 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권오현'
 {executed in 1 msec}
2023-06-29 10:05:41.030 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dbf10eee
2023-06-29 10:05:41.031 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:05:41.036 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범'
	order by 1
 {executed in 3 msec}
2023-06-29 10:05:41.068 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a3008c9e
2023-06-29 10:05:41.068 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:05:41.069 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권재범' order by a.base_year desc,a.acc_time desc
2023-06-29 10:05:41.070 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권재범' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:05:41.071 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권재범' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:05:41.118 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권재범'
 {executed in 0 msec}
2023-06-29 10:05:42.745 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@40256eb1
2023-06-29 10:05:42.747 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:05:42.753 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종'
	order by 1
 {executed in 3 msec}
2023-06-29 10:05:42.778 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@734ec61
2023-06-29 10:05:42.778 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:05:42.778 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' order by a.base_year desc,a.acc_time desc
2023-06-29 10:05:42.780 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:05:42.781 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:05:42.835 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권태종'
 {executed in 1 msec}
2023-06-29 10:05:52.694 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2b9560d2
2023-06-29 10:05:52.695 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:05:52.699 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석'
	order by 1
 {executed in 2 msec}
2023-06-29 10:05:52.725 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f2a4de82
2023-06-29 10:05:52.725 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:05:52.725 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경석' order by a.base_year desc,a.acc_time desc
2023-06-29 10:05:52.727 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:05:52.728 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경석' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:05:52.780 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김경석'
 {executed in 0 msec}
2023-06-29 10:05:55.189 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@544b3c5
2023-06-29 10:05:55.191 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:05:55.195 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영'
	order by 1
 {executed in 3 msec}
2023-06-29 10:05:55.229 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cc543175
2023-06-29 10:05:55.229 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:05:55.229 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김기영' order by a.base_year desc,a.acc_time desc
2023-06-29 10:05:55.230 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김기영' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:05:55.231 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김기영' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:05:55.304 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김기영'
 {executed in 1 msec}
2023-06-29 10:06:10.649 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3ae6a8fa
2023-06-29 10:06:10.650 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:06:10.653 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근'
	order by 1
 {executed in 2 msec}
2023-06-29 10:06:10.683 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1f626aa
2023-06-29 10:06:10.683 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:06:10.683 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김도근' order by a.base_year desc,a.acc_time desc
2023-06-29 10:06:10.684 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김도근' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:06:10.685 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김도근' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:06:10.777 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김도근'
 {executed in 0 msec}
2023-06-29 10:06:12.921 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b7e87ecb
2023-06-29 10:06:12.923 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:06:12.930 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회'
	order by 1
 {executed in 5 msec}
2023-06-29 10:06:12.965 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7ef7fc7b
2023-06-29 10:06:12.966 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:06:12.966 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김동회' order by a.base_year desc,a.acc_time desc
2023-06-29 10:06:12.968 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김동회' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-29 10:06:12.971 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김동회' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:06:13.051 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김동회'
 {executed in 1 msec}
2023-06-29 10:06:17.645 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5e128baf
2023-06-29 10:06:17.646 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:06:17.651 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김명현'
	order by 1
 {executed in 4 msec}
2023-06-29 10:06:17.681 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2522095f
2023-06-29 10:06:17.681 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:06:17.681 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김명현' order by a.base_year desc,a.acc_time desc
2023-06-29 10:06:17.683 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김명현' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:06:17.684 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김명현' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:06:17.737 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김명현'
 {executed in 0 msec}
2023-06-29 10:06:19.050 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c8cbe7b3
2023-06-29 10:06:19.051 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:06:19.057 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김병일' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김병일' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김병일' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김병일' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김병일' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김병일'
	order by 1
 {executed in 3 msec}
2023-06-29 10:06:19.091 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8fdb6563
2023-06-29 10:06:19.091 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:06:19.091 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김병일' order by a.base_year desc,a.acc_time desc
2023-06-29 10:06:19.094 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김병일' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:06:19.095 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김병일' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:06:19.154 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김병일'
 {executed in 0 msec}
2023-06-29 10:06:19.843 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d1770c1a
2023-06-29 10:06:19.844 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:06:19.850 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김선호'
	order by 1
 {executed in 4 msec}
2023-06-29 10:06:19.881 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@988689ca
2023-06-29 10:06:19.881 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:06:19.881 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김선호' order by a.base_year desc,a.acc_time desc
2023-06-29 10:06:19.883 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김선호' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:06:19.884 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김선호' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:06:19.937 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김선호'
 {executed in 0 msec}
2023-06-29 10:06:20.766 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a710b8e
2023-06-29 10:06:20.767 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:06:20.771 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승섭' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승섭' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승섭' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승섭' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승섭' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김승섭'
	order by 1
 {executed in 3 msec}
2023-06-29 10:06:20.796 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1180893e
2023-06-29 10:06:20.796 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:06:20.797 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김승섭' order by a.base_year desc,a.acc_time desc
2023-06-29 10:06:20.798 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김승섭' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:06:20.800 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김승섭' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:06:20.876 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김승섭'
 {executed in 0 msec}
2023-06-29 10:06:22.164 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8c38fdc6
2023-06-29 10:06:22.164 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:06:22.168 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김영식' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김영식' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김영식' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김영식' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김영식' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김영식'
	order by 1
 {executed in 3 msec}
2023-06-29 10:06:22.195 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@53487b76
2023-06-29 10:06:22.195 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:06:22.195 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김영식' order by a.base_year desc,a.acc_time desc
2023-06-29 10:06:22.197 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김영식' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:06:22.198 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김영식' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:06:22.261 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김영식'
 {executed in 0 msec}
2023-06-29 10:06:23.679 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3fc53c5f
2023-06-29 10:06:23.681 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:06:23.686 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김용문' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김용문' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김용문' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김용문' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김용문' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김용문'
	order by 1
 {executed in 3 msec}
2023-06-29 10:06:23.715 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6d4ba0f
2023-06-29 10:06:23.715 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:06:23.716 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김용문' order by a.base_year desc,a.acc_time desc
2023-06-29 10:06:23.717 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김용문' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:06:23.719 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김용문' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:06:23.808 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김용문'
 {executed in 0 msec}
2023-06-29 10:06:54.671 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 10:06:54.672 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:06:54.695 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 22 msec}
2023-06-29 10:06:55.761 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f2102e2
2023-06-29 10:06:55.763 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:06:55.769 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱'
	order by 1
 {executed in 3 msec}
2023-06-29 10:06:55.801 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56308092
2023-06-29 10:06:55.801 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:06:55.801 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
2023-06-29 10:06:55.802 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:06:55.803 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:06:55.849 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '고상욱'
 {executed in 0 msec}
2023-06-29 10:06:56.943 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d0f1a0d6
2023-06-29 10:06:56.945 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:06:56.950 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현'
	order by 1
 {executed in 4 msec}
2023-06-29 10:06:56.980 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@98011e86
2023-06-29 10:06:56.980 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:06:56.980 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
2023-06-29 10:06:56.982 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-29 10:06:56.984 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:06:57.042 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권오현'
 {executed in 0 msec}
2023-06-29 10:08:59.011 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 10:08:59.013 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:08:59.014 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-06-29 10:09:00.263 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f2102e2
2023-06-29 10:09:00.264 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:09:00.271 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱'
	order by 1
 {executed in 4 msec}
2023-06-29 10:09:00.300 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56308092
2023-06-29 10:09:00.300 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:09:00.301 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
2023-06-29 10:09:00.302 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:09:00.303 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:09:00.350 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '고상욱'
 {executed in 1 msec}
2023-06-29 10:09:44.327 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2b9560d2
2023-06-29 10:09:44.328 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:09:44.333 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경석'
	order by 1
 {executed in 3 msec}
2023-06-29 10:09:44.368 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f2a4de82
2023-06-29 10:09:44.368 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:09:44.368 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경석' order by a.base_year desc,a.acc_time desc
2023-06-29 10:09:44.369 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:09:44.370 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:09:44.446 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김경석'
 {executed in 0 msec}
2023-06-29 10:09:47.226 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@544b3c5
2023-06-29 10:09:47.228 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:09:47.233 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영'
	order by 1
 {executed in 2 msec}
2023-06-29 10:09:47.262 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cc543175
2023-06-29 10:09:47.262 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:09:47.262 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김기영' order by a.base_year desc,a.acc_time desc
2023-06-29 10:09:47.264 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김기영' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-29 10:09:47.265 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김기영' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:09:47.314 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김기영'
 {executed in 0 msec}
2023-06-29 10:10:50.117 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 10:10:50.118 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:10:50.119 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-29 10:10:51.771 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@23fb342
2023-06-29 10:10:51.773 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:10:51.777 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵'
	order by 1
 {executed in 3 msec}
2023-06-29 10:10:51.815 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c94f30f2
2023-06-29 10:10:51.815 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:10:51.815 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권병묵' order by a.base_year desc,a.acc_time desc
2023-06-29 10:10:51.817 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권병묵' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:10:51.818 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권병묵' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:10:51.883 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권병묵'
 {executed in 0 msec}
2023-06-29 10:10:55.738 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c10e37cb
2023-06-29 10:10:55.740 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:10:55.745 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연'
	order by 1
 {executed in 3 msec}
2023-06-29 10:10:55.776 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@881db57b
2023-06-29 10:10:55.776 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:10:55.776 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경연' order by a.base_year desc,a.acc_time desc
2023-06-29 10:10:55.777 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경연' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:10:55.778 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경연' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:10:55.834 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김경연'
 {executed in 1 msec}
2023-06-29 10:10:58.606 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b7e87ecb
2023-06-29 10:10:58.608 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:10:58.611 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회'
	order by 1
 {executed in 2 msec}
2023-06-29 10:10:58.643 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7ef7fc7b
2023-06-29 10:10:58.643 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:10:58.643 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김동회' order by a.base_year desc,a.acc_time desc
2023-06-29 10:10:58.646 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김동회' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-29 10:10:58.648 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김동회' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:10:58.704 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김동회'
 {executed in 0 msec}
2023-06-29 10:12:03.877 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 10:12:03.878 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:12:03.879 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-29 10:12:05.454 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f2102e2
2023-06-29 10:12:05.455 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:12:05.459 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱'
	order by 1
 {executed in 3 msec}
2023-06-29 10:12:05.512 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56308092
2023-06-29 10:12:05.512 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:12:05.512 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
2023-06-29 10:12:05.513 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:12:05.514 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:12:05.578 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '고상욱'
 {executed in 0 msec}
2023-06-29 10:12:28.940 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@449e82dd
2023-06-29 10:12:28.941 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:12:28.944 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현'
	order by 1
 {executed in 1 msec}
2023-06-29 10:12:28.969 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bae008d
2023-06-29 10:12:28.969 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:12:28.969 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' order by a.base_year desc,a.acc_time desc
2023-06-29 10:12:28.970 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:12:28.971 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:12:29.027 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '국수현'
 {executed in 0 msec}
2023-06-29 10:12:30.090 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f2102e2
2023-06-29 10:12:30.091 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:12:30.093 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱'
	order by 1
 {executed in 1 msec}
2023-06-29 10:12:30.100 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '고상욱'
 {executed in 0 msec}
2023-06-29 10:12:30.119 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56308092
2023-06-29 10:12:30.119 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:12:30.119 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
2023-06-29 10:12:30.120 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:12:30.120 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:12:30.963 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@449e82dd
2023-06-29 10:12:30.964 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:12:30.969 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현'
	order by 1
 {executed in 4 msec}
2023-06-29 10:12:30.994 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bae008d
2023-06-29 10:12:30.994 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:12:30.994 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' order by a.base_year desc,a.acc_time desc
2023-06-29 10:12:30.995 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:12:30.996 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:12:31.039 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '국수현'
 {executed in 0 msec}
2023-06-29 10:12:32.313 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e9727d06
2023-06-29 10:12:32.314 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-29 10:12:32.314 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '국수현' ORDER BY b.base_ym desc
2023-06-29 10:12:32.315 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:12:32.317 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '국수현' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-29 10:12:32.318 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '국수현' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-29 10:12:44.683 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bae008d
2023-06-29 10:12:44.683 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:12:44.683 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' order by a.base_year desc,a.acc_time desc
2023-06-29 10:12:44.684 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:12:44.685 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:12:44.686 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:14:24.327 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d0d1365d
2023-06-29 10:14:24.327 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-29 10:14:24.327 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '국수현'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-06-29 10:14:24.328 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:14:24.474 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '국수현'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 146 msec}
2023-06-29 10:14:24.596 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '국수현'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 122 msec}
2023-06-29 10:14:24.629 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@59abaf73
2023-06-29 10:14:24.629 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-29 10:14:24.629 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '국수현' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-06-29 10:14:25.156 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '국수현' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 526 msec}
2023-06-29 10:14:25.156 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:14:25.157 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '국수현' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-29 10:14:25.195 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@68910bc9
2023-06-29 10:14:25.195 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-29 10:14:25.195 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '국수현' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
2023-06-29 10:14:25.220 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '국수현' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 25 msec}
2023-06-29 10:14:25.244 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '국수현' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 24 msec}
2023-06-29 10:16:18.454 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 10:16:18.455 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:16:18.471 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 16 msec}
2023-06-29 10:16:19.763 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9abfd7e3
2023-06-29 10:16:19.765 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:16:19.767 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권용수'
	order by 1
 {executed in 1 msec}
2023-06-29 10:16:19.791 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@61cf5593
2023-06-29 10:16:19.791 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:16:19.791 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권용수' order by a.base_year desc,a.acc_time desc
2023-06-29 10:16:19.792 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권용수' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:16:19.793 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권용수' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:16:19.833 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권용수'
 {executed in 1 msec}
2023-06-29 10:16:20.974 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@26f28b63
2023-06-29 10:16:20.974 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-29 10:16:20.974 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '권용수'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-06-29 10:16:20.975 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:16:21.096 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '권용수'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 121 msec}
2023-06-29 10:16:21.219 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '권용수'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 122 msec}
2023-06-29 10:16:21.251 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@afcd0479
2023-06-29 10:16:21.251 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-29 10:16:21.251 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권용수' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-06-29 10:16:21.865 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권용수' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 613 msec}
2023-06-29 10:16:21.866 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:16:21.867 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권용수' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-29 10:16:21.900 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@beb260cf
2023-06-29 10:16:21.900 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-29 10:16:21.901 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권용수' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
2023-06-29 10:16:21.922 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권용수' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 21 msec}
2023-06-29 10:16:21.946 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권용수' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 24 msec}
2023-06-29 10:16:28.411 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3d2f6d2c
2023-06-29 10:16:28.411 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:16:28.411 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권용수' order by a.base_year desc,a.acc_time desc
2023-06-29 10:16:28.412 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:16:28.413 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권용수' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:16:28.414 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권용수' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:16:28.475 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1ffe9a76
2023-06-29 10:16:28.478 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현'
	order by 1
 {executed in 1 msec}
2023-06-29 10:16:28.485 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '국수현'
 {executed in 1 msec}
2023-06-29 10:16:28.503 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e70e1826
2023-06-29 10:16:28.503 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:16:28.503 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' order by a.base_year desc,a.acc_time desc
2023-06-29 10:16:28.504 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:16:28.506 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:16:43.144 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 10:16:43.145 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:16:43.167 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 22 msec}
2023-06-29 10:16:51.678 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 10:16:51.680 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:16:51.681 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-29 10:16:58.936 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 10:16:58.937 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:16:58.938 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-29 10:17:08.887 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 10:17:08.888 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:17:08.889 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-29 10:17:37.730 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 10:17:37.731 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:17:37.732 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-29 10:18:12.315 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 10:18:12.316 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:18:12.317 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-29 10:18:30.834 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 10:18:30.835 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:18:30.836 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-29 10:18:40.395 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 10:18:40.396 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:18:40.397 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-29 10:18:50.897 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 10:18:50.898 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:18:50.900 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-29 10:18:56.294 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 10:18:56.295 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:18:56.296 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-06-29 10:19:01.985 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6e34dd56
2023-06-29 10:19:01.986 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:19:01.989 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
91. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호'
	order by 1
 {executed in 1 msec}
2023-06-29 10:19:02.014 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@35445b06
2023-06-29 10:19:02.014 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:19:02.014 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김권호' order by a.base_year desc,a.acc_time desc
2023-06-29 10:19:02.015 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김권호' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:19:02.016 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김권호' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:19:02.061 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
91. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김권호'
 {executed in 0 msec}
2023-06-29 10:19:03.553 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1308d77f
2023-06-29 10:19:03.553 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-29 10:19:03.553 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '김권호' ORDER BY b.base_ym desc
2023-06-29 10:19:03.554 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:19:03.557 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '김권호' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-29 10:19:03.559 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '김권호' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-29 10:19:07.381 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aa279722
2023-06-29 10:19:07.381 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-29 10:19:07.381 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '김권호' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-29 10:19:07.382 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:19:07.383 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '김권호' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-29 10:19:07.384 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '김권호' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-29 10:19:09.336 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@35445b06
2023-06-29 10:19:09.336 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:19:09.336 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김권호' order by a.base_year desc,a.acc_time desc
2023-06-29 10:19:09.337 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:19:09.338 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김권호' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:19:09.339 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김권호' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:19:11.354 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@544b3c5
2023-06-29 10:19:11.355 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:19:11.357 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
92. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김기영'
	order by 1
 {executed in 1 msec}
2023-06-29 10:19:11.382 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cc543175
2023-06-29 10:19:11.382 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:19:11.382 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김기영' order by a.base_year desc,a.acc_time desc
2023-06-29 10:19:11.383 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김기영' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:19:11.384 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김기영' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:19:11.430 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
92. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김기영'
 {executed in 0 msec}
2023-06-29 10:19:12.875 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@816040f2
2023-06-29 10:19:12.876 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:19:12.878 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
92. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김민규'
	order by 1
 {executed in 1 msec}
2023-06-29 10:19:12.902 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@486fbea2
2023-06-29 10:19:12.902 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:19:12.903 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김민규' order by a.base_year desc,a.acc_time desc
2023-06-29 10:19:12.904 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김민규' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:19:12.905 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김민규' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:19:12.950 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
92. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김민규'
 {executed in 0 msec}
2023-06-29 10:19:25.256 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 10:19:25.258 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:19:25.279 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 21 msec}
2023-06-29 10:19:26.375 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6e34dd56
2023-06-29 10:19:26.376 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:19:26.378 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
92. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김권호'
	order by 1
 {executed in 1 msec}
2023-06-29 10:19:26.403 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@35445b06
2023-06-29 10:19:26.403 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:19:26.403 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김권호' order by a.base_year desc,a.acc_time desc
2023-06-29 10:19:26.404 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김권호' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:19:26.405 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김권호' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:19:26.444 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
92. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김권호'
 {executed in 1 msec}
2023-06-29 10:19:29.004 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5b3abd3d
2023-06-29 10:19:29.005 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:19:29.007 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
92. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김문성'
	order by 1
 {executed in 2 msec}
2023-06-29 10:19:29.033 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@224a3aed
2023-06-29 10:19:29.033 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:19:29.033 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김문성' order by a.base_year desc,a.acc_time desc
2023-06-29 10:19:29.035 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김문성' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:19:29.036 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김문성' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:19:29.085 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
92. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김문성'
 {executed in 1 msec}
2023-06-29 10:19:30.489 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@eb766
2023-06-29 10:19:30.489 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-29 10:19:30.489 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '김문성' ORDER BY b.base_ym desc
2023-06-29 10:19:30.490 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:19:30.493 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '김문성' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-29 10:19:30.495 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '김문성' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-29 10:19:36.502 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@972d7709
2023-06-29 10:19:36.502 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-29 10:19:36.502 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '김문성' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-29 10:19:36.503 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:19:36.504 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '김문성' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-29 10:19:36.505 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '김문성' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-29 10:19:38.120 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e76d70bd
2023-06-29 10:19:38.120 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-29 10:19:38.120 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '김문성'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-06-29 10:19:38.121 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:19:38.253 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '김문성'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 132 msec}
2023-06-29 10:19:38.368 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '김문성'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 114 msec}
2023-06-29 10:19:38.404 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7047e9d3
2023-06-29 10:19:38.404 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-29 10:19:38.404 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김문성' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-06-29 10:19:38.927 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김문성' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 522 msec}
2023-06-29 10:19:38.928 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:19:38.928 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김문성' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-29 10:19:38.970 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@39558c04
2023-06-29 10:19:38.970 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-29 10:19:38.970 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김문성' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-04' ORDER BY a.START_TIME
2023-06-29 10:19:39.008 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김문성' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-04' ORDER BY a.START_TIME
 {executed in 38 msec}
2023-06-29 10:19:39.038 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김문성' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-04' ORDER BY a.START_TIME
 {executed in 29 msec}
2023-06-29 10:20:40.293 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 10:20:40.295 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:20:40.314 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 19 msec}
2023-06-29 10:20:41.110 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f01aae1a
2023-06-29 10:20:41.111 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:20:41.113 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
92. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김대수'
	order by 1
 {executed in 2 msec}
2023-06-29 10:20:41.140 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b72a2bca
2023-06-29 10:20:41.140 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:20:41.140 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김대수' order by a.base_year desc,a.acc_time desc
2023-06-29 10:20:41.141 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김대수' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:20:41.142 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김대수' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:20:41.185 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
92. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김대수'
 {executed in 1 msec}
2023-06-29 10:20:42.429 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7c4d619a
2023-06-29 10:20:42.429 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-29 10:20:42.429 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '김대수'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-06-29 10:20:42.429 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:20:42.479 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '김대수'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 49 msec}
2023-06-29 10:20:42.534 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '김대수'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 55 msec}
2023-06-29 10:20:44.559 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fe8a511e
2023-06-29 10:20:44.559 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:20:44.559 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김대수' order by a.base_year desc,a.acc_time desc
2023-06-29 10:20:44.560 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:20:44.561 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김대수' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:20:44.562 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김대수' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:20:44.613 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ff48a41f
2023-06-29 10:20:44.617 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
92. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김동회'
	order by 1
 {executed in 2 msec}
2023-06-29 10:20:44.649 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c65821cf
2023-06-29 10:20:44.649 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:20:44.649 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김동회' order by a.base_year desc,a.acc_time desc
2023-06-29 10:20:44.650 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김동회' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:20:44.652 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김동회' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:20:44.709 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
92. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김동회'
 {executed in 0 msec}
2023-06-29 10:20:46.177 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@441b324b
2023-06-29 10:20:46.177 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-29 10:20:46.177 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '김동회'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-06-29 10:20:46.178 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:20:46.328 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '김동회'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 150 msec}
2023-06-29 10:20:46.452 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '김동회'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 124 msec}
2023-06-29 10:20:46.487 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ccf5ab61
2023-06-29 10:20:46.488 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-29 10:20:46.488 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김동회' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-06-29 10:20:47.043 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김동회' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 555 msec}
2023-06-29 10:20:47.044 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:20:47.044 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김동회' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-29 10:20:47.080 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dbdb07b7
2023-06-29 10:20:47.080 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-29 10:20:47.080 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김동회' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
2023-06-29 10:20:47.114 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김동회' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 33 msec}
2023-06-29 10:20:47.148 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '김동회' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 33 msec}
2023-06-29 10:22:08.091 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 10:22:08.092 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:22:08.107 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 15 msec}
2023-06-29 10:22:09.132 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dbf10eee
2023-06-29 10:22:09.133 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:22:09.135 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
92. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권재범'
	order by 1
 {executed in 1 msec}
2023-06-29 10:22:09.161 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a3008c9e
2023-06-29 10:22:09.161 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:22:09.161 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권재범' order by a.base_year desc,a.acc_time desc
2023-06-29 10:22:09.162 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권재범' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:22:09.163 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권재범' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:22:09.201 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
92. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권재범'
 {executed in 0 msec}
2023-06-29 10:22:10.258 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6823c26e
2023-06-29 10:22:10.258 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-29 10:22:10.258 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '권재범'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-06-29 10:22:10.259 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:22:10.385 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '권재범'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 126 msec}
2023-06-29 10:22:10.506 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '권재범'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 121 msec}
2023-06-29 10:22:10.538 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f0fe3b84
2023-06-29 10:22:10.538 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-29 10:22:10.538 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권재범' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-06-29 10:22:11.048 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권재범' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 510 msec}
2023-06-29 10:22:11.049 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
92. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:22:11.050 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권재범' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-29 10:22:11.088 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ffe397da
2023-06-29 10:22:11.088 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-29 10:22:11.088 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권재범' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
2023-06-29 10:22:11.111 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권재범' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 23 msec}
2023-06-29 10:22:11.141 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
92. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권재범' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 29 msec}
2023-06-29 10:23:11.651 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-29 10:23:11.652 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
99. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:23:11.669 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
99. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 17 msec}
2023-06-29 10:23:12.383 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@40256eb1
2023-06-29 10:23:12.384 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
99. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:23:12.386 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
99. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종'
	order by 1
 {executed in 1 msec}
2023-06-29 10:23:12.411 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@734ec61
2023-06-29 10:23:12.411 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:23:12.411 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' order by a.base_year desc,a.acc_time desc
2023-06-29 10:23:12.412 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
99. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:23:12.413 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
99. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:23:12.458 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
99. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권태종'
 {executed in 0 msec}
2023-06-29 10:23:13.437 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cc582231
2023-06-29 10:23:13.437 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-29 10:23:13.437 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '권태종'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-06-29 10:23:13.438 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
99. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:23:13.561 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
99. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '권태종'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 122 msec}
2023-06-29 10:23:13.684 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
99. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '권태종'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM LIKE  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 123 msec}
2023-06-29 10:23:13.715 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@55329b47
2023-06-29 10:23:13.715 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-29 10:23:13.715 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-06-29 10:23:14.288 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
99. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 572 msec}
2023-06-29 10:23:14.288 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
99. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:23:14.289 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
99. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-29 10:23:14.325 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6417f79d
2023-06-29 10:23:14.325 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-29 10:23:14.325 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
2023-06-29 10:23:14.347 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
99. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 22 msec}
2023-06-29 10:23:14.376 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
99. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 28 msec}
2023-06-29 10:43:10.772 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e29503fa
2023-06-29 10:43:10.772 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-29 10:43:10.773 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' order by a.base_year desc,a.acc_time desc
2023-06-29 10:43:10.773 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
110. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 10:43:10.775 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
110. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-29 10:43:10.776 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
110. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권태종' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-29 10:43:23.287 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 10:43:23.287 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 10:43:23.287 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 10:43:23.288 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
111. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 10:43:23.291 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
111. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 10:43:23.294 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
111. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 10:57:05.258 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=47s866ms157µs100ns).
2023-06-29 11:34:34.188 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-29 11:34:34.188 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-29 11:34:34.188 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-29 11:34:34.188 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-29 11:53:17.097 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-29 11:53:17.097 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-29 11:53:17.097 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-29 11:53:17.098 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-29 11:53:17.098 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-29 11:53:18.482 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
142. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 11:53:18.484 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
142. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-06-29 11:53:18.486 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-29 11:53:18.578 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$6rG3BqFfGDeIpj.UZ7ndG.IIIC2nvowXYfEoTRvGyj5KGPha9dzqK
2023-06-29 11:53:18.670 INFO  [http-nio-10010-exec-2] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-29 11:53:22.934 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 11:53:22.934 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 11:53:22.934 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 11:53:22.935 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
142. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 11:53:22.938 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
142. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 11:53:22.941 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
142. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 11:54:03.515 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 11:54:03.516 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 11:54:03.516 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 11:54:03.517 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
142. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 11:54:03.520 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
142. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 11:54:03.523 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
142. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 11:54:23.667 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 11:54:23.667 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 11:54:23.667 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 11:54:23.668 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
142. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 11:54:23.670 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
142. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 11:54:23.674 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
142. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 11:55:52.769 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 11:55:52.769 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 11:55:52.770 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 11:55:52.770 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
142. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 11:55:52.773 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
142. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 11:55:52.776 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
142. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 11:56:35.774 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 11:56:35.774 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 11:56:35.774 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 11:56:35.775 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
142. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 11:56:35.779 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
142. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 11:56:35.782 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
142. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 11:58:41.469 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 11:58:41.469 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 11:58:41.469 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 11:58:41.470 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
143. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 11:58:41.474 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
143. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 11:58:41.477 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
143. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 12:00:13.528 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 12:00:13.528 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 12:00:13.529 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 12:00:13.529 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
143. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 12:00:13.532 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
143. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 12:00:13.534 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
143. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 12:02:21.009 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 12:02:21.009 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 12:02:21.009 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 12:02:21.010 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 12:02:21.014 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 12:02:21.017 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 12:03:35.473 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 12:03:35.473 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 12:03:35.474 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 12:03:35.475 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 12:03:35.477 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 12:03:35.481 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 12:05:19.893 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 12:05:19.893 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 12:05:19.893 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 12:05:19.894 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 12:05:19.897 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 12:05:19.900 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 12:05:52.635 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 12:05:52.635 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 12:05:52.635 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 12:05:52.636 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 12:05:52.639 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 12:05:52.642 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 12:08:17.285 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 12:08:17.285 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 12:08:17.285 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 12:08:17.286 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 12:08:17.289 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 12:08:17.292 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 12:17:02.142 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 12:17:02.142 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 12:17:02.142 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 12:17:02.143 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 12:17:02.146 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 12:17:02.149 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 12:17:50.762 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 12:17:50.762 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 12:17:50.762 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 12:17:50.763 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
153. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 12:17:50.766 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
153. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 12:17:50.770 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
153. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 12:18:25.063 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 12:18:25.063 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 12:18:25.064 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 12:18:25.064 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
153. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 12:18:25.067 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
153. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 12:18:25.070 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
153. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 12:38:26.734 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 12:38:26.734 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 12:38:26.734 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 12:38:26.735 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
163. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 12:38:26.738 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
163. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 12:38:26.740 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
163. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 12:42:21.874 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 12:42:21.874 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 12:42:21.874 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 12:42:21.875 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 12:42:21.878 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 12:42:21.881 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 12:44:00.930 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 12:44:00.930 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 12:44:00.930 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 12:44:00.931 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 12:44:00.934 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 12:44:00.937 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 13:34:39.618 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-29 13:34:39.618 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-29 13:34:39.618 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-29 13:34:39.618 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-29 14:22:45.619 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-29 14:22:45.619 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-29 14:22:45.619 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-06-29 14:22:45.619 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-29 14:22:45.619 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-06-29 14:22:45.635 ERROR [http-nio-10010-exec-10] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$1b96a7ee.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-29 14:22:45.641 ERROR [http-nio-10010-exec-10] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$1b96a7ee.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-29 14:22:45.644 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-29 14:22:45.644 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-29 14:22:45.644 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-29 14:22:45.644 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-29 14:22:45.644 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-29 14:22:45.800 ERROR [http-nio-10010-exec-10] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$1b96a7ee.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-29 14:22:45.802 ERROR [http-nio-10010-exec-10] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$1b96a7ee.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-29 14:22:45.802 ERROR [http-nio-10010-exec-10] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$1b96a7ee.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 97 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 100 common frames omitted
2023-06-29 14:22:45.838 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-29 14:22:45.838 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-29 14:22:45.838 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-29 14:22:45.838 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-29 14:22:45.838 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-29 14:22:47.104 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
222. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 14:22:47.105 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
222. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-06-29 14:22:47.106 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-29 14:22:47.197 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$7lGjGOSjQqCLQwedAUcbmuC2XWeba7ys4NmuOuoxqQhtrhy5YG1gy
2023-06-29 14:22:47.288 INFO  [http-nio-10010-exec-8] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-29 14:22:49.799 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 14:22:49.799 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 14:22:49.799 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 14:22:49.800 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
222. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 14:22:49.803 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
222. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 14:22:49.806 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
222. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:01:32.142 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:01:32.142 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:01:32.148 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:01:32.149 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
242. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 15:01:32.152 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 15:01:32.155 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:02:41.921 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:02:41.921 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:02:41.921 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:02:41.922 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
242. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 15:02:41.924 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:02:41.927 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:03:19.205 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:03:19.205 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:03:19.205 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:03:19.206 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
242. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 15:03:19.208 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:03:19.211 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:03:41.983 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:03:41.983 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:03:41.983 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:03:41.984 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
242. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 15:03:41.986 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:03:41.989 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:04:01.949 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:04:01.949 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:04:01.949 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:04:01.950 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
242. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 15:04:01.952 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:04:01.954 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:04:47.599 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:04:47.599 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:04:47.599 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:04:47.600 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
242. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 15:04:47.625 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 24 msec}
2023-06-29 15:04:47.628 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 15:04:52.663 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:04:52.663 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:04:52.663 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:04:52.664 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
242. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 15:04:52.667 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:04:52.669 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:07:14.450 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:07:14.450 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:07:14.451 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:07:14.451 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
242. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 15:07:14.454 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 15:07:14.457 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 15:07:17.116 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:07:17.116 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:07:17.116 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:07:17.117 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
242. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 15:07:17.120 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:07:17.122 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:12:54.847 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:12:54.847 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:12:54.847 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:12:54.848 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
242. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 15:12:54.851 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:12:54.855 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 15:13:01.766 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:13:01.766 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:13:01.766 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:13:01.767 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
242. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 15:13:01.770 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:13:01.773 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:13:03.466 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:13:03.466 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:13:03.466 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:13:03.467 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
242. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 15:13:03.469 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:13:03.472 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 15:13:04.756 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:13:04.756 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:13:04.756 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:13:04.756 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
242. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 15:13:04.759 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:13:04.761 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:13:21.935 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:13:21.935 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:13:21.935 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:13:21.936 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
242. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 15:13:21.939 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 15:13:21.941 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:14:10.947 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:14:10.947 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:14:10.947 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:14:10.948 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
242. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 15:14:10.951 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 15:14:10.954 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
242. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 15:49:00.755 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:49:00.756 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:49:00.756 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:49:00.758 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
262. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 15:49:00.762 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
262. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 4 msec}
2023-06-29 15:49:00.766 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
262. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 15:49:40.674 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:49:40.674 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:49:40.674 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:49:40.675 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
262. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 15:49:40.679 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
262. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 15:49:40.682 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
262. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 15:50:20.975 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:50:20.975 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:50:20.976 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:50:20.977 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
262. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 15:50:20.980 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
262. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 15:50:20.984 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
262. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 15:50:33.091 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:50:33.091 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:50:33.091 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:50:33.092 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
262. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 15:50:33.095 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
262. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 15:50:33.098 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
262. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:50:50.657 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:50:50.657 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:50:50.657 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:50:50.658 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
262. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 15:50:50.660 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
262. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:50:50.663 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
262. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:52:39.864 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:52:39.864 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:52:39.864 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:52:39.865 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
262. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 15:52:39.867 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
262. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:52:39.870 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
262. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 15:57:13.879 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:57:13.879 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:57:13.879 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:57:13.880 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
263. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 15:57:13.881 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
263. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 15:57:13.883 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
263. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 0 msec}
2023-06-29 15:59:12.304 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 15:59:12.304 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 15:59:12.304 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 15:59:12.305 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
269. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 15:59:12.306 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
269. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 15:59:12.307 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
269. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 0 msec}
2023-06-29 16:02:24.169 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 16:02:24.170 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 16:02:24.170 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 16:02:24.171 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
272. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 16:02:24.172 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
272. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 16:02:24.173 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
272. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 16:02:42.225 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
272. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-06-29 16:02:42.234 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
272. DELETE FROM TBM_ACCIDENT_INFO WHERE company_no = '100'  AND base_year = '2023'
 {executed in 2 msec}
2023-06-29 16:02:42.241 INFO  [http-nio-10010-exec-9] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , :acc_date , :route_nm , :emp_nm , :acc_time , :company_nm , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
2023-06-29 16:02:42.249 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
273. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 16:02:42.285 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
273. batching 73 statements:
 1:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-06' , '20번' , '김종국' , '09:24:00' , '인천스마트' , 3573.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'DB / 수리비입금' , '논현주공 13단지 앞' , '0' , 908520.0 , 908520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 2:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-06' , '5-1번' , '이택선' , '18:28:00' , '인천스마트' , 3643.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '전세버스 / 수리완료' , '주안역 환승장' , '0' , 86820.0 , 86820.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 3:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-07' , '38번' , '채종두' , '12:45:00' , '인천스마트' , 3551.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '대물 90 / 회사처리' , '주안역 앞' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 4:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-08' , '38번' , '윤세호' , '14:41:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '서창캠핑장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 5:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-13' , '21번' , '심기섭' , '15:26:00' , '인천스마트' , 3625.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '예술회관 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 6:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-15' , '27번' , '임인복' , '22:32:00' , '인천스마트' , 3638.0 , '자차' , '자피' , '시설물 충격' , 100.0 , '0' , '종결' , '회사 자체 수리' , '남동중학교 정류장' , '0' , '0' , '0' , '0' , '0' , 172720.0 , 172720.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 7:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-18' , '38번' , '고상욱' , '13:59:00' , '인천스마트' , 3552.0 , '자차' , '피해' , '측면충돌' , '10(무과실주장)' , 90.0 , '종결' , '삼성접수 / 수리비 50입금' , '하늘마을앞 사거리' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 8:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-19' , '21번' , '이용진' , '06:57:00' , '인천스마트' , 3623.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 삼공수리' , '매소홀터널 앞' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 9:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-24' , '20번' , '서수찬' , '09:54:00' , '인천스마트' , 3506.0 , '대물,자차' , '가해' , '시설물 충격' , 100.0 , '0' , '종결' , '공제접수 / 가로등,가로수' , '선수촌5단지 앞' , '0' , '0' , '0' , '0' , 4892800.0 , 4609000.0 , 9501800.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
10:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-26' , '5--번' , '신경식' , '16:27:00' , '인천스마트' , 3646.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '미추홀서경찰관/각자수리' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
11:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-27' , '5-1번' , '남기선' , '20:25:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '수리비 40 입금' , '대림아파트 정류장' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
12:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-29' , '38번' , '박정훈' , '12:16:00' , '인천스마트' , 3575.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리비 50입금' , '독정이고개' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
13:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-02' , '27번' , '전정훈' , '07:11:00' , '인천스마트' , 7125.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 40 입금완료' , '신선초교 앞 공사장 입구' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
14:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-04' , '5-1번' , '남기선' , '07:00:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB접수/수리비 입금' , '소방본부 정류장' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
15:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2020-01-21' , '27번' , '홍성운' , '10:29:00' , '인천스마트' , 3676.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상 청구' , '주안1동성당 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
16:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-06' , '38번' , '최병국' , '09:46:00' , '인천스마트' , 3576.0 , '자차' , '피해' , '측면충돌' , '20 (무과실 주장)' , 80.0 , '종결' , 'KB접수 / 수리비 입금' , '새안의원 앞' , '0' , 900000.0 , 900000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
17:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-06' , '27번' , '권병묵' , '18:15:00' , '인천스마트' , 3638.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'DB접수 / 수리비 입금' , '논현사거리 정류장' , '0' , 398520.0 , 398520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
18:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-05' , '5-1번' , '남기선' , '13:50:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '기타' , 100.0 , '0' , '종결' , '피해자 김복순 30합의' , '주안7동행정복지센터 정류장' , '0' , '0' , '0' , 300000.0 , '0' , '0' , 300000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
19:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-08' , '20번' , '이종식' , '10:18:00' , '인천스마트' , 3556.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수(대인,대물)' , '논현주공14단지 앞' , '0' , '0' , '0' , 1339560.0 , 9717620.0 , 2863454.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
20:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-08' , '38번' , '박근호' , '08:35:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '롯데접수 / 수리완료' , '전재울사거리' , '0' , 108000.0 , 108000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
21:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-08' , '21번' , '허선균' , '13:37:00' , '인천스마트' , 3562.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '대인X, 대물 공제접수' , '도화고가 앞' , '0' , '0' , '0' , '0' , 1800000.0 , 103400.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
22:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-09' , '38번' , '박근호' , '13:38:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB접수/수리완료' , '세일빌라 입구' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
23:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-09' , '38번' , '장길영' , '12:44:00' , '인천스마트' , 3551.0 , '대인' , '가해' , '승차' , 100.0 , '0' , '진행' , '경찰신고 / 합의 조율중' , '하늘마을정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
24:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2022-11-04' , '5-1번' , '오정택' , '13:38:00' , '인천스마트' , 3645.0 , '자차,대인' , '피해' , '측면충돌 (현대구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상청구' , '학익2동 행정복지센터 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
25:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-17' , '21번' , '박인서' , '13:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리비 입금' , '현대시장 정류장' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
26:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-21' , '38번' , '윤세호' , '12:21:00' , '인천스마트' , 3549.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '빽밀러 파손 / 30입금' , '구월동 우리은행사거리' , '0' , 300000.0 , 300000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
27:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-22' , '21번' , '허선균' , '08:31:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '하나손해 / 수리예정' , '경인지방노동청 입구' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
28:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-06' , '5번' , '최정수' , '00:35:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '기타' , '0' , 100.0 , '종결' , '수리비 15 입금' , '연안부두 차고지' , '0' , 150000.0 , 150000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
29:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-06' , '27번' , '백종필' , '20:25:00' , '인천스마트' , 3659.0 , '자차, 승객' , '피해' , '측면충돌' , 10.0 , 90.0 , '종결' , '삼성접수/수리비 70입금' , '주적골삼거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
30:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-09' , '5번' , '김성취' , '19:19:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 35입금' , '임광그대로가 103동 앞' , '0' , 350000.0 , 350000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
31:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-10' , '5번' , '한태전' , '21:13:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '종결' , 'DB접수 / 수리비 70입금' , '문학 목우촌 앞' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
32:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-13' , '27번' , '임인복' , '20:31:00' , '인천스마트' , 7123.0 , '자차' , '피해' , '측면충돌' , 10.0 , 90.0 , '진행' , '렌트공제/ 과실 9:1확정' , '항동 SK주유소 앞' , '0' , 1599300.0 , 1599300.0 , 818000.0 , 500000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
33:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-15' , '5번' , '김도근' , '23:50:00' , '인천스마트' , 3621.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '연안부두 차고지' , '0' , 250000.0 , 250000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
34:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-16' , '5번' , '임충환' , '14:40:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 50입금' , '토지금고 굴다리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
35:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-18' , '5-1번' , '박정배' , '11:20:00' , '인천스마트' , 3644.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 /수리예정' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
36:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-19' , '20번' , '김동회' , '12:27:00' , '인천스마트' , 3504.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '현대 접수/수리비 50입금' , '동방중학교 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
37:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-15' , '38번' , '윤세호' , '19:51:00' , '인천스마트' , 3553.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '김명희(78세,여)/120 회사처리' , '윤성아파트 앞' , '0' , '0' , '0' , 1200000.0 , 1200000.0 , '0' , 1200000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
38:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-21' , '5번' , '자선호' , '19:43:00' , '인천스마트' , 3622.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 입급' , '롯데백화점 사거리' , '0' , 800000.0 , 800000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
39:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-21' , '5번' , '김요섭' , '21:00:00' , '인천스마트' , 3632.0 , '자차,대인' , '쌍피' , '측면충돌' , 40.0 , 60.0 , '종결' , '차량 각 처리, 승객 상대처리' , '선수촌아파트 입구 회전교차로' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
40:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-23' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
41:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-23' , '27번' , '김용문' , '15:50:00' , '인천스마트' , 3641.0 , '대인' , '가해' , ' 문 끼임사고' , 100.0 , '0' , '종결' , '합의금(박순예)60지급' , '인하대역 1번출구' , '0' , '0' , '0' , 600000.0 , '0' , '0' , 600000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
42:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-25' , '27번' , '인호덕' , '10:45:00' , '인천스마트' , 3676.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리완료' , '도림동고개' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
43:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-25' , '27번' , '이용재' , '16:06:00' , '인천스마트' , 3637.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB / 수리비 70입금' , '논현역사거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
44:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-25' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '삼성접수/신고예정' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
45:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-25' , '27번' , '이용일' , '14:31:00' , '인천스마트' , 3634.0 , '대인' , '가해' , '개문발차' , 100.0 , '0' , '종결' , '공제접수' , '한신휴아파트 정류장' , '0' , '0' , '0' , 2710000.0 , '0' , '0' , 2710000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
46:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-28' , '21번' , '조성훈' , '23:05:00' , '인천스마트' , 3563.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '종결' , '대인X, 대물 90회사합의' , '롯데백화점 사거리' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
47:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-31' , '21번' , '유병수' , '07:30:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '한화 / 수리비 60입금' , '서창중 정류장' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
48:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-04' , '20번' , '이형규' , '20:05:00' , '인천스마트' , 3505.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25만 입금' , '인평고 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
49:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-05' , '27번' , '윤병진' , '09:31:00' , '인천스마트' , 7122.0 , '자차' , '피해' , '측면충돌' , '무과실 주장' , 80.0 , '진행' , 'DB접수 / 과실협의중' , '토지금고시장 입구 삼거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
50:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-05' , '20번' , '임재준' , '12:05:00' , '인천스마트' , 3574.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '공제접수' , '남촌동입구 정류장' , '0' , '0' , '0' , 1700000.0 , '0' , '0' , 1700000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
51:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-05' , '27번' , '이승수' , '13:06:00' , '인천스마트' , 3640.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 60입금' , '주적골 삼거리' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
52:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-06' , '27번' , '이용일' , '10:44:00' , '인천스마트' , 3634.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , 'KB / 수리비입금예정' , '용현고가교' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
53:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-10' , '20번' , '김동회' , '10:30:00' , '인천스마트' , 3504.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '50 합의' , '모래내시장전 사거리' , '0' , '0' , '0' , 500000.0 , '0' , '0' , 500000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
54:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-10' , '38번' , '박정훈' , '16:30:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금 ' , '경인식약청 앞' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
55:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-11' , '38번' , '김승배' , '14:02:00' , '인천스마트' , 3550.0 , '인,물피' , '쌍피' , '측면충돌' , 60.0 , 40.0 , '진행' , '현대접수 / 공제접수' , '신기사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
56:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-13' , '38번' , '장명근' , '14:57:00' , '인천스마트' , 3553.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금' , '소래포구역 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
57:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-14' , '5번' , '임충환' , '15:42:00' , '인천스마트' , 3632.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '공제접수' , '서창119안전센터 앞' , '0' , '0' , '0' , '0' , 1152880.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
58:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-16' , '5-1번' , '이택선' , '16:40:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '명보주유소 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
59:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-18' , '20번' , '손신영' , '16:52:00' , '인천스마트' , 3565.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '진행' , '공제접수' , '태화아파트 정류장 전' , '0' , '0' , '0' , 818000.0 , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
60:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-19' , '5-1번' , '이덕길' , '15:33:00' , '인천스마트' , 3648.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사 접수 / 수리완료' , '신기시장 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
61:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-22' , '5번' , '장남균' , '23:42:00' , '인천스마트' , 3631.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB / 수리완료' , '신선초교 사거리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
62:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2018-08-16' , '27번' , '정재철' , '20:00:00' , '인천스마트' , 3633.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '무과실 주장' , 100.0 , '진행' , '현대 선처리후 구상청구' , '논현동 소래풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
63:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-28' , '38번' , '이정성' , '07:03:00' , '인천스마트' , 3546.0 , '대인,대물,자차' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수' , '남동경찰서 사거리' , '0' , '0' , '0' , '0' , 660000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
64:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-05-04' , '38번' , '유종각' , '12:41:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '차내전도' , 50.0 , 50.0 , '종결' , '80 합의, 경찰신고' , '토지금고시장 사거리' , '0' , '0' , '0' , 800000.0 , '0' , '0' , 800000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
65:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-05-05' , '27번' , '이용재B' , '11:23:00' , '인천스마트' , 3639.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '빽밀러 파손 / 공제접수' , '신선초교 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
66:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-05-06' , '38번' , '이경환' , '13:53:00' , '인천스마트' , 3551.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수' , '관교동 풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , 212828.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
67:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-05-07' , '20번' , '박준용' , '11:32:00' , '인천스마트' , 3053.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '공제접수 / 수리완료' , '하늘마을3단지 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
68:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-05-07' , '5-1번' , '박덕환' , '11:48:00' , '인천스마트' , 3648.0 , '대믈' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수 / 대물' , '토지금고시장 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
69:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-05-07' , '21번' , '유종선' , '13:50:00' , '인천스마트' , 3626.0 , '대인' , '피해' , '비접촉' , '0' , 100.0 , '종결' , '승객 DB접수처리' , '석바위사거리 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
70:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-05-11' , '27번' , '이용재B' , '09:23:00' , '인천스마트' , 3639.0 , '자차' , '피해' , '접촉' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '롯데백화점 건너 정류장' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
71:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-05-12' , '5번' , '양광일 ' , '22:44:00' , '인천스마트' , 3629.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 / 수리예정' , '토지금고시장 사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
72:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-05-15' , '21번' , '노주성' , '10:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '진행' , 'KB접수 / 수리예정' , '서창도서관 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
73:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-05-16' , '5-1번' , '권태종' , '21:52:00' , '인천스마트' , 3647.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '공제접수 / 대물' , '주안역 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 {executed in 24 msec}
2023-06-29 16:02:42.301 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 16:02:42.301 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 16:02:42.301 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 16:02:42.304 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
273. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 16:02:42.307 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
273. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 16:02:49.635 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 16:02:49.635 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 16:02:49.635 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 16:02:49.636 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
273. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 16:02:49.639 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
273. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 16:02:49.642 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
273. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 16:12:03.258 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 16:12:03.259 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 16:12:03.259 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 16:12:03.260 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
273. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 16:12:03.263 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
273. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 16:12:03.265 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
273. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 16:57:39.386 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 16:57:39.386 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 16:57:39.386 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 16:57:39.388 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
295. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 16:57:39.391 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
295. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 16:57:39.394 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
295. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 17:03:34.398 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 17:03:34.398 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 17:03:34.398 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 17:03:34.399 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
303. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 17:03:34.402 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
303. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 17:03:34.406 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
303. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 17:03:44.985 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 17:03:44.985 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 17:03:44.985 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 17:03:44.986 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
303. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 17:03:44.990 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
303. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 17:03:44.993 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
303. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 17:53:51.675 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-29 17:53:51.675 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-29 17:53:51.676 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-29 17:53:51.676 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-29 18:02:00.537 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=6m48s863ms576µs600ns).
2023-06-29 20:30:49.716 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=2h25m19s146ms32µs600ns).
2023-06-29 20:32:21.414 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-29 20:32:21.414 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-29 20:32:21.414 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-06-29 20:32:21.414 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-29 20:32:21.414 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-06-29 20:32:21.428 ERROR [http-nio-10010-exec-10] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$1b96a7ee.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-29 20:32:21.430 ERROR [http-nio-10010-exec-10] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$1b96a7ee.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-29 20:32:21.432 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-29 20:32:21.432 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-29 20:32:21.432 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-29 20:32:21.432 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-29 20:32:21.432 INFO  [http-nio-10010-exec-10] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-29 20:32:21.451 ERROR [http-nio-10010-exec-10] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$1b96a7ee.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-29 20:32:21.454 ERROR [http-nio-10010-exec-10] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$1b96a7ee.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-29 20:32:21.455 ERROR [http-nio-10010-exec-10] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$1b96a7ee.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 97 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 100 common frames omitted
2023-06-29 20:32:21.489 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-29 20:32:21.489 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-29 20:32:21.489 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-29 20:32:21.490 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-29 20:32:21.490 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-29 20:32:22.650 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
343. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 20:32:22.652 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
343. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-06-29 20:32:22.655 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-29 20:32:22.747 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$gyx60x3TUx6d9lVu17YyTe9dG/joOZgTRggDIz4Ab3.5fxB3HQlna
2023-06-29 20:32:22.838 INFO  [http-nio-10010-exec-7] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-29 20:32:26.421 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:32:26.421 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:32:26.421 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:32:26.421 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
343. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 20:32:26.425 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
343. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 20:32:26.430 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
343. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 5 msec}
2023-06-29 20:34:35.169 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:34:35.169 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:34:35.169 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:34:35.170 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
343. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 20:34:35.174 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
343. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 20:34:35.177 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
343. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 20:36:14.096 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:36:14.096 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:36:14.096 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:36:14.097 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
343. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 20:36:14.101 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
343. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 20:36:14.105 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
343. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 20:36:40.144 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:36:40.145 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:36:40.145 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:36:40.145 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
343. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 20:36:40.149 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
343. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 20:36:40.151 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
343. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 20:40:17.718 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:40:17.718 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:40:17.718 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:40:17.720 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
343. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 20:40:17.723 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
343. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 20:40:17.727 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
343. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 20:40:19.375 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
343. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 20:40:19.377 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
343. DELETE FROM TBM_ACCIDENT_INFO WHERE company_no = '100'  AND base_year = '2023'
 {executed in 1 msec}
2023-06-29 20:40:19.387 INFO  [http-nio-10010-exec-8] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , :acc_date , :route_nm , :emp_nm , :acc_time , :company_nm , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
2023-06-29 20:40:19.397 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:40:19.397 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:40:19.397 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:40:19.398 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
344. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 20:40:19.399 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
344. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:40:19.400 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
344. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 0 msec}
2023-06-29 20:40:47.822 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
344. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 20:40:47.823 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
344. DELETE FROM TBM_ACCIDENT_INFO WHERE company_no = '100'  AND base_year = '2023'
 {executed in 1 msec}
2023-06-29 20:40:47.833 INFO  [http-nio-10010-exec-1] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , :acc_date , :route_nm , :emp_nm , :acc_time , :company_nm , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
2023-06-29 20:40:47.834 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
345. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 20:40:47.840 ERROR [http-nio-10010-exec-1] [c.p.d.core.error.GlobalExceptionHandler] - handleEntityNotFoundException
org.springframework.dao.InvalidDataAccessApiUsageException: No value supplied for the SQL parameter 'acc_date': No value registered for key 'acc_date'
	at org.springframework.jdbc.core.namedparam.NamedParameterUtils.buildValueArray(NamedParameterUtils.java:355)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$2.setValues(NamedParameterJdbcTemplate.java:371)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$2(JdbcTemplate.java:944)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:617)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:647)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:936)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:366)
	at com.pjy.dashboard.dao.DynamicSqlDao.batchInsert(DynamicSqlDao.java:737)
	at com.pjy.dashboard.dao.DynamicSqlDao$$FastClassBySpringCGLIB$$8af24191.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at com.pjy.dashboard.dao.DynamicSqlH2Dao$$EnhancerBySpringCGLIB$$1ca6177d.batchInsert(<generated>)
	at com.pjy.dashboard.service.DynamicSqlService.insertInfo(DynamicSqlService.java:619)
	at com.pjy.dashboard.controller.TestController.BUS_insertInfo(TestController.java:399)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$1b96a7ee.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-29 20:40:47.851 WARN  [http-nio-10010-exec-1] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [org.springframework.dao.InvalidDataAccessApiUsageException: No value supplied for the SQL parameter 'acc_date': No value registered for key 'acc_date']
2023-06-29 20:44:28.265 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:44:28.265 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:44:28.265 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:44:28.267 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
345. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 20:44:28.268 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
345. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 0 msec}
2023-06-29 20:44:28.269 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
345. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:44:43.790 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
345. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 20:44:43.791 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
345. DELETE FROM TBM_ACCIDENT_INFO WHERE company_no = '100'  AND base_year = '2023'
 {executed in 0 msec}
2023-06-29 20:44:43.797 INFO  [http-nio-10010-exec-2] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , :acc_date , :route_nm , :emp_nm , :acc_time , :company_nm , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
2023-06-29 20:44:43.798 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
346. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 20:44:43.826 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
346. batching 73 statements:
 1:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-06' , '20번' , '김종국' , '09:24:00' , '인천스마트' , 3573.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'DB / 수리비입금' , '논현주공 13단지 앞' , '0' , 908520.0 , 908520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 2:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-06' , '5-1번' , '이택선' , '18:28:00' , '인천스마트' , 3643.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '전세버스 / 수리완료' , '주안역 환승장' , '0' , 86820.0 , 86820.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 3:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-07' , '38번' , '채종두' , '12:45:00' , '인천스마트' , 3551.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '대물 90 / 회사처리' , '주안역 앞' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 4:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-08' , '38번' , '윤세호' , '14:41:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '서창캠핑장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 5:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-13' , '21번' , '심기섭' , '15:26:00' , '인천스마트' , 3625.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '예술회관 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 6:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-15' , '27번' , '임인복' , '22:32:00' , '인천스마트' , 3638.0 , '자차' , '자피' , '시설물 충격' , 100.0 , '0' , '종결' , '회사 자체 수리' , '남동중학교 정류장' , '0' , '0' , '0' , '0' , '0' , 172720.0 , 172720.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 7:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-18' , '38번' , '고상욱' , '13:59:00' , '인천스마트' , 3552.0 , '자차' , '피해' , '측면충돌' , '10(무과실주장)' , 90.0 , '종결' , '삼성접수 / 수리비 50입금' , '하늘마을앞 사거리' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 8:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-19' , '21번' , '이용진' , '06:57:00' , '인천스마트' , 3623.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 삼공수리' , '매소홀터널 앞' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 9:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-24' , '20번' , '서수찬' , '09:54:00' , '인천스마트' , 3506.0 , '대물,자차' , '가해' , '시설물 충격' , 100.0 , '0' , '종결' , '공제접수 / 가로등,가로수' , '선수촌5단지 앞' , '0' , '0' , '0' , '0' , 4892800.0 , 4609000.0 , 9501800.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
10:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-26' , '5--번' , '신경식' , '16:27:00' , '인천스마트' , 3646.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '미추홀서경찰관/각자수리' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
11:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-27' , '5-1번' , '남기선' , '20:25:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '수리비 40 입금' , '대림아파트 정류장' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
12:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-29' , '38번' , '박정훈' , '12:16:00' , '인천스마트' , 3575.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리비 50입금' , '독정이고개' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
13:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-02' , '27번' , '전정훈' , '07:11:00' , '인천스마트' , 7125.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 40 입금완료' , '신선초교 앞 공사장 입구' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
14:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-04' , '5-1번' , '남기선' , '07:00:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB접수/수리비 입금' , '소방본부 정류장' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
15:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2020-01-21' , '27번' , '홍성운' , '10:29:00' , '인천스마트' , 3676.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상 청구' , '주안1동성당 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
16:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-06' , '38번' , '최병국' , '09:46:00' , '인천스마트' , 3576.0 , '자차' , '피해' , '측면충돌' , '20 (무과실 주장)' , 80.0 , '종결' , 'KB접수 / 수리비 입금' , '새안의원 앞' , '0' , 900000.0 , 900000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
17:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-06' , '27번' , '권병묵' , '18:15:00' , '인천스마트' , 3638.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'DB접수 / 수리비 입금' , '논현사거리 정류장' , '0' , 398520.0 , 398520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
18:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-05' , '5-1번' , '남기선' , '13:50:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '기타' , 100.0 , '0' , '종결' , '피해자 김복순 30합의' , '주안7동행정복지센터 정류장' , '0' , '0' , '0' , 300000.0 , '0' , '0' , 300000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
19:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-08' , '20번' , '이종식' , '10:18:00' , '인천스마트' , 3556.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수(대인,대물)' , '논현주공14단지 앞' , '0' , '0' , '0' , 1339560.0 , 9717620.0 , 2863454.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
20:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-08' , '38번' , '박근호' , '08:35:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '롯데접수 / 수리완료' , '전재울사거리' , '0' , 108000.0 , 108000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
21:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-08' , '21번' , '허선균' , '13:37:00' , '인천스마트' , 3562.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '대인X, 대물 공제접수' , '도화고가 앞' , '0' , '0' , '0' , '0' , 1800000.0 , 103400.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
22:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-09' , '38번' , '박근호' , '13:38:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB접수/수리완료' , '세일빌라 입구' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
23:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-09' , '38번' , '장길영' , '12:44:00' , '인천스마트' , 3551.0 , '대인' , '가해' , '승차' , 100.0 , '0' , '진행' , '경찰신고 / 합의 조율중' , '하늘마을정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
24:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2022-11-04' , '5-1번' , '오정택' , '13:38:00' , '인천스마트' , 3645.0 , '자차,대인' , '피해' , '측면충돌 (현대구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상청구' , '학익2동 행정복지센터 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
25:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-17' , '21번' , '박인서' , '13:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리비 입금' , '현대시장 정류장' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
26:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-21' , '38번' , '윤세호' , '12:21:00' , '인천스마트' , 3549.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '빽밀러 파손 / 30입금' , '구월동 우리은행사거리' , '0' , 300000.0 , 300000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
27:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-02-22' , '21번' , '허선균' , '08:31:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '하나손해 / 수리예정' , '경인지방노동청 입구' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
28:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-06' , '5번' , '최정수' , '00:35:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '기타' , '0' , 100.0 , '종결' , '수리비 15 입금' , '연안부두 차고지' , '0' , 150000.0 , 150000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
29:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-06' , '27번' , '백종필' , '20:25:00' , '인천스마트' , 3659.0 , '자차, 승객' , '피해' , '측면충돌' , 10.0 , 90.0 , '종결' , '삼성접수/수리비 70입금' , '주적골삼거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
30:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-09' , '5번' , '김성취' , '19:19:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 35입금' , '임광그대로가 103동 앞' , '0' , 350000.0 , 350000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
31:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-10' , '5번' , '한태전' , '21:13:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '종결' , 'DB접수 / 수리비 70입금' , '문학 목우촌 앞' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
32:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-13' , '27번' , '임인복' , '20:31:00' , '인천스마트' , 7123.0 , '자차' , '피해' , '측면충돌' , 10.0 , 90.0 , '진행' , '렌트공제/ 과실 9:1확정' , '항동 SK주유소 앞' , '0' , 1599300.0 , 1599300.0 , 818000.0 , 500000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
33:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-15' , '5번' , '김도근' , '23:50:00' , '인천스마트' , 3621.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '연안부두 차고지' , '0' , 250000.0 , 250000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
34:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-16' , '5번' , '임충환' , '14:40:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 50입금' , '토지금고 굴다리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
35:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-18' , '5-1번' , '박정배' , '11:20:00' , '인천스마트' , 3644.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 /수리예정' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
36:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-19' , '20번' , '김동회' , '12:27:00' , '인천스마트' , 3504.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '현대 접수/수리비 50입금' , '동방중학교 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
37:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-15' , '38번' , '윤세호' , '19:51:00' , '인천스마트' , 3553.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '김명희(78세,여)/120 회사처리' , '윤성아파트 앞' , '0' , '0' , '0' , 1200000.0 , 1200000.0 , '0' , 1200000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
38:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-21' , '5번' , '자선호' , '19:43:00' , '인천스마트' , 3622.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 입급' , '롯데백화점 사거리' , '0' , 800000.0 , 800000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
39:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-21' , '5번' , '김요섭' , '21:00:00' , '인천스마트' , 3632.0 , '자차,대인' , '쌍피' , '측면충돌' , 40.0 , 60.0 , '종결' , '차량 각 처리, 승객 상대처리' , '선수촌아파트 입구 회전교차로' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
40:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-23' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
41:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-23' , '27번' , '김용문' , '15:50:00' , '인천스마트' , 3641.0 , '대인' , '가해' , ' 문 끼임사고' , 100.0 , '0' , '종결' , '합의금(박순예)60지급' , '인하대역 1번출구' , '0' , '0' , '0' , 600000.0 , '0' , '0' , 600000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
42:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-25' , '27번' , '인호덕' , '10:45:00' , '인천스마트' , 3676.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리완료' , '도림동고개' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
43:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-25' , '27번' , '이용재' , '16:06:00' , '인천스마트' , 3637.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB / 수리비 70입금' , '논현역사거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
44:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-25' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '삼성접수/신고예정' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
45:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-25' , '27번' , '이용일' , '14:31:00' , '인천스마트' , 3634.0 , '대인' , '가해' , '개문발차' , 100.0 , '0' , '종결' , '공제접수' , '한신휴아파트 정류장' , '0' , '0' , '0' , 2710000.0 , '0' , '0' , 2710000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
46:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-28' , '21번' , '조성훈' , '23:05:00' , '인천스마트' , 3563.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '종결' , '대인X, 대물 90회사합의' , '롯데백화점 사거리' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
47:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-03-31' , '21번' , '유병수' , '07:30:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '한화 / 수리비 60입금' , '서창중 정류장' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
48:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-04' , '20번' , '이형규' , '20:05:00' , '인천스마트' , 3505.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25만 입금' , '인평고 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
49:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-05' , '27번' , '윤병진' , '09:31:00' , '인천스마트' , 7122.0 , '자차' , '피해' , '측면충돌' , '무과실 주장' , 80.0 , '진행' , 'DB접수 / 과실협의중' , '토지금고시장 입구 삼거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
50:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-05' , '20번' , '임재준' , '12:05:00' , '인천스마트' , 3574.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '공제접수' , '남촌동입구 정류장' , '0' , '0' , '0' , 1700000.0 , '0' , '0' , 1700000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
51:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-05' , '27번' , '이승수' , '13:06:00' , '인천스마트' , 3640.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 60입금' , '주적골 삼거리' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
52:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-06' , '27번' , '이용일' , '10:44:00' , '인천스마트' , 3634.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , 'KB / 수리비입금예정' , '용현고가교' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
53:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-10' , '20번' , '김동회' , '10:30:00' , '인천스마트' , 3504.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '50 합의' , '모래내시장전 사거리' , '0' , '0' , '0' , 500000.0 , '0' , '0' , 500000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
54:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-10' , '38번' , '박정훈' , '16:30:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금 ' , '경인식약청 앞' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
55:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-11' , '38번' , '김승배' , '14:02:00' , '인천스마트' , 3550.0 , '인,물피' , '쌍피' , '측면충돌' , 60.0 , 40.0 , '진행' , '현대접수 / 공제접수' , '신기사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
56:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-13' , '38번' , '장명근' , '14:57:00' , '인천스마트' , 3553.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금' , '소래포구역 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
57:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-14' , '5번' , '임충환' , '15:42:00' , '인천스마트' , 3632.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '공제접수' , '서창119안전센터 앞' , '0' , '0' , '0' , '0' , 1152880.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
58:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-16' , '5-1번' , '이택선' , '16:40:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '명보주유소 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
59:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-18' , '20번' , '손신영' , '16:52:00' , '인천스마트' , 3565.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '진행' , '공제접수' , '태화아파트 정류장 전' , '0' , '0' , '0' , 818000.0 , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
60:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-19' , '5-1번' , '이덕길' , '15:33:00' , '인천스마트' , 3648.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사 접수 / 수리완료' , '신기시장 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
61:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-22' , '5번' , '장남균' , '23:42:00' , '인천스마트' , 3631.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB / 수리완료' , '신선초교 사거리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
62:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2018-08-16' , '27번' , '정재철' , '20:00:00' , '인천스마트' , 3633.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '무과실 주장' , 100.0 , '진행' , '현대 선처리후 구상청구' , '논현동 소래풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
63:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-04-28' , '38번' , '이정성' , '07:03:00' , '인천스마트' , 3546.0 , '대인,대물,자차' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수' , '남동경찰서 사거리' , '0' , '0' , '0' , '0' , 660000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
64:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-05-04' , '38번' , '유종각' , '12:41:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '차내전도' , 50.0 , 50.0 , '종결' , '80 합의, 경찰신고' , '토지금고시장 사거리' , '0' , '0' , '0' , 800000.0 , '0' , '0' , 800000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
65:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-05-05' , '27번' , '이용재B' , '11:23:00' , '인천스마트' , 3639.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '빽밀러 파손 / 공제접수' , '신선초교 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
66:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-05-06' , '38번' , '이경환' , '13:53:00' , '인천스마트' , 3551.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수' , '관교동 풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , 212828.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
67:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-05-07' , '20번' , '박준용' , '11:32:00' , '인천스마트' , 3053.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '공제접수 / 수리완료' , '하늘마을3단지 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
68:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-05-07' , '5-1번' , '박덕환' , '11:48:00' , '인천스마트' , 3648.0 , '대믈' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수 / 대물' , '토지금고시장 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
69:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-05-07' , '21번' , '유종선' , '13:50:00' , '인천스마트' , 3626.0 , '대인' , '피해' , '비접촉' , '0' , 100.0 , '종결' , '승객 DB접수처리' , '석바위사거리 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
70:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-05-11' , '27번' , '이용재B' , '09:23:00' , '인천스마트' , 3639.0 , '자차' , '피해' , '접촉' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '롯데백화점 건너 정류장' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
71:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-05-12' , '5번' , '양광일 ' , '22:44:00' , '인천스마트' , 3629.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 / 수리예정' , '토지금고시장 사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
72:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-05-15' , '21번' , '노주성' , '10:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '진행' , 'KB접수 / 수리예정' , '서창도서관 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
73:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-05-16' , '5-1번' , '권태종' , '21:52:00' , '인천스마트' , 3647.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '공제접수 / 대물' , '주안역 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 {executed in 21 msec}
2023-06-29 20:44:43.841 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:44:43.841 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:44:43.841 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:44:43.844 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
346. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 20:44:43.846 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
346. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 20:44:48.842 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:44:48.842 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:44:48.843 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:44:48.843 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
346. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 20:44:48.846 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
346. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 20:44:48.849 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
346. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 20:45:00.101 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:45:00.101 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:45:00.101 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:45:00.102 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
346. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 20:45:00.105 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
346. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 20:45:00.107 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
346. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 20:45:01.024 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:45:01.024 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:45:01.024 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:45:01.025 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
346. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 20:45:01.028 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
346. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 20:45:01.031 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
346. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 20:45:04.443 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:45:04.443 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:45:04.443 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:45:04.444 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
346. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 20:45:04.447 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
346. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 20:45:04.450 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
346. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 20:45:45.322 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
346. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 20:45:45.324 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
346. DELETE FROM TBM_ACCIDENT_INFO WHERE company_no = '100'  AND base_year = '2023'
 {executed in 1 msec}
2023-06-29 20:45:45.332 INFO  [http-nio-10010-exec-4] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , :acc_date , :route_nm , :emp_nm , :acc_time , :company_nm , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
2023-06-29 20:45:45.333 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
347. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 20:45:45.335 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
347. batching 1 statements:
1:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-08' , '38번' , '윤세호' , '14:41:00' , '인천스마트' , 3546.0 , '자차자차' , '피해' , '측면충돌' , '0' , '100.0' , '종결' , '삼성접수 / 수리완료' , '서창캠핑장 앞' , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 {executed in 2 msec}
2023-06-29 20:45:45.346 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:45:45.346 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:45:45.346 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:45:45.347 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:45:45.349 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 0 msec}
2023-06-29 20:46:08.310 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:46:08.310 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:46:08.310 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:46:08.311 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
347. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 20:46:08.312 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:46:08.313 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:46:57.035 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:46:57.036 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:46:57.036 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:46:57.037 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
347. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 20:46:57.038 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 0 msec}
2023-06-29 20:46:57.039 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:47:12.006 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:47:12.006 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:47:12.006 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:47:12.007 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
347. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 20:47:12.008 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:47:12.009 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:47:13.170 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:47:13.170 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:47:13.171 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:47:13.171 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
347. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 20:47:13.172 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:47:13.173 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:47:13.722 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:47:13.722 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:47:13.722 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:47:13.723 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
347. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 20:47:13.724 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:47:13.725 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:47:13.946 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:47:13.946 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:47:13.946 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:47:13.947 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:47:13.948 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:47:14.149 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:47:14.149 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:47:14.149 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:47:14.150 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:47:14.151 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:47:14.336 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:47:14.336 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:47:14.336 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:47:14.337 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:47:14.338 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:47:14.536 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:47:14.536 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:47:14.536 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:47:14.537 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 0 msec}
2023-06-29 20:47:14.537 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 0 msec}
2023-06-29 20:47:14.734 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:47:14.734 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:47:14.734 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:47:14.736 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:47:14.737 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 0 msec}
2023-06-29 20:47:14.942 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:47:14.942 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:47:14.942 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:47:14.943 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:47:14.944 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:47:15.274 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:47:15.274 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:47:15.274 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:47:15.275 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:47:15.276 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
347. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:55:38.075 INFO  [RMI TCP Connection(659)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-06-29 20:55:38.105 INFO  [RMI TCP Connection(659)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-06-29 20:55:38.107 INFO  [RMI TCP Connection(659)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-06-29 20:55:38.115 INFO  [RMI TCP Connection(659)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-06-29 20:55:38.147 INFO  [RMI TCP Connection(659)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-06-29 20:55:42.989 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 24248 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-29 20:55:42.993 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-29 20:55:43.048 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-29 20:55:43.048 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-29 20:55:44.382 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-29 20:55:44.382 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-29 20:55:44.529 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 137ms. Found 3 JPA repository interfaces.
2023-06-29 20:55:44.879 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-29 20:55:44.879 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-29 20:55:44.923 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-29 20:55:44.924 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-29 20:55:44.925 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-29 20:55:44.925 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 46ms. Found 0 JDBC repository interfaces.
2023-06-29 20:55:45.357 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-29 20:55:45.423 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-29 20:55:45.424 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-29 20:55:45.424 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-29 20:55:45.425 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-29 20:55:45.425 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-29 20:55:45.426 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-29 20:55:45.426 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-29 20:55:45.426 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-29 20:55:45.426 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-29 20:55:45.426 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-29 20:55:45.426 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-29 20:55:45.427 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-29 20:55:45.487 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$384ef03a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 20:55:45.541 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-29 20:55:45.624 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$22455467] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 20:55:45.708 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 20:55:45.711 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@ae084e5' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 20:55:45.717 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$4719f719] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 20:55:45.727 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$6c6f0f2f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 20:55:45.731 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 20:55:45.732 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 20:55:45.752 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$89978c2d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 20:55:45.786 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$917d95f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 20:55:45.917 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-29 20:55:45.923 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-29 20:55:46.356 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-29 20:55:46.371 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-29 20:55:46.383 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-29 20:55:46.383 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-29 20:55:46.855 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-29 20:55:46.868 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-29 20:55:46.868 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3820 ms
2023-06-29 20:55:47.693 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@f3142d5 with name: jasyptStringEncryptor
2023-06-29 20:55:47.747 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-29 20:55:47.841 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 8 msec}
2023-06-29 20:55:47.847 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-29 20:55:48.613 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-29 20:55:48.989 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-29 20:55:49.064 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-29 20:55:49.066 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-29 20:55:49.221 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-29 20:55:49.448 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 20:55:49.465 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-29 20:55:50.192 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 20:55:50.195 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-29 20:55:50.243 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-29 20:55:50.518 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-29 20:55:51.594 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-29 20:55:51.605 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-29 20:55:51.795 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-29 20:55:51.795 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-29 20:55:51.795 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-29 20:55:51.795 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-29 20:55:51.795 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-29 20:55:51.796 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-29 20:55:51.796 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-29 20:55:51.796 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-29 20:55:51.796 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-29 20:55:51.954 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1a532e4, org.springframework.security.web.context.SecurityContextPersistenceFilter@147a8a8d, org.springframework.security.web.header.HeaderWriterFilter@38ce961, org.springframework.web.filter.CorsFilter@28e2ae77, org.springframework.security.web.authentication.logout.LogoutFilter@51b6dd27, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@5fb885f2, org.springframework.security.web.session.ConcurrentSessionFilter@22fb5df9, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@7dddeae1, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@176ab7c6, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2a4ecaff, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@76d5fc27, org.springframework.security.web.session.SessionManagementFilter@2973c4cb, org.springframework.security.web.access.ExceptionTranslationFilter@64a73894, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5a08c9f4]
2023-06-29 20:55:51.975 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-29 20:55:52.324 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-29 20:55:52.397 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-29 20:55:52.812 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 20:55:53.646 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-29 20:55:53.674 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-29 20:55:53.811 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-29 20:55:53.814 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-29 20:55:53.872 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-29 20:55:53.877 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.375 seconds (JVM running for 13.75)
2023-06-29 20:55:53.878 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-29 20:55:53.878 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-29 20:55:53.878 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-29 20:55:55.058 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-29 20:55:55.058 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-29 20:55:55.088 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 30 ms
2023-06-29 20:57:03.985 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:57:03.985 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:57:04.055 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:57:04.101 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 20:57:04.103 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:57:04.110 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:57:58.742 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 20:57:58.742 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 20:57:58.743 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 20:57:58.743 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 20:57:58.745 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 0 msec}
2023-06-29 20:57:58.746 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 20:58:07.686 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 20:58:07.692 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
1. DELETE FROM TBM_ACCIDENT_INFO WHERE company_no = '100'  AND base_year = '2023'
 {executed in 1 msec}
2023-06-29 20:58:26.718 INFO  [http-nio-10010-exec-4] [com.pjy.dashboard.dao.DynamicSqlDao] - keyColumns  : acc_date
2023-06-29 20:58:26.718 INFO  [http-nio-10010-exec-4] [com.pjy.dashboard.dao.DynamicSqlDao] - keyColumns  : base_year
2023-06-29 20:58:26.719 INFO  [http-nio-10010-exec-4] [com.pjy.dashboard.dao.DynamicSqlDao] - keyColumns  : company_no
2023-06-29 20:58:26.719 INFO  [http-nio-10010-exec-4] [com.pjy.dashboard.dao.DynamicSqlDao] - keyColumns  : emp_nm
2023-06-29 20:58:26.719 INFO  [http-nio-10010-exec-4] [com.pjy.dashboard.dao.DynamicSqlDao] - keyColumns  : route_nm
2023-06-29 20:58:26.719 INFO  [http-nio-10010-exec-4] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , :acc_date , :route_nm , :emp_nm , :acc_time , :company_nm , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
2023-06-29 20:58:26.730 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 20:58:26.745 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
2. batching 1 statements:
1:  INSERT INTO TBM_ACCIDENT_INFO (company_no,base_year,acc_date,route_nm,emp_nm,acc_time,company_nm,car_no,acc_gb,gapi_gb,acc_kind,jacha_rate,sangdae_rate,proc_result,proc_memo,acc_place,daein_in_amt,daemul_in_amt,in_tot_amt,daein_out_amt,daemul_out_amt,jacha_amt,out_tot_amt,last_chg_user,last_chg_date) values ( '100' , '2023' , '2023-01-08' , '38번' , '윤세호' , '14:41:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , '100.0' , '종결' , '삼성접수 / 수리완료' , '서창캠핑장 앞' , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
 {executed in 3 msec}
2023-06-29 21:12:51.760 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 1868 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-29 21:12:51.764 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-29 21:12:51.818 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-29 21:12:51.820 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-29 21:12:53.012 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-29 21:12:53.012 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-29 21:12:53.156 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 134ms. Found 3 JPA repository interfaces.
2023-06-29 21:12:53.513 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-29 21:12:53.513 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-29 21:12:53.556 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-29 21:12:53.557 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-29 21:12:53.558 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-29 21:12:53.558 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 45ms. Found 0 JDBC repository interfaces.
2023-06-29 21:12:53.997 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-29 21:12:54.066 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-29 21:12:54.067 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-29 21:12:54.067 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-29 21:12:54.067 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-29 21:12:54.067 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-29 21:12:54.067 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-29 21:12:54.068 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-29 21:12:54.068 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-29 21:12:54.068 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-29 21:12:54.068 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-29 21:12:54.068 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-29 21:12:54.068 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-29 21:12:54.131 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$436ed03f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 21:12:54.187 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-29 21:12:54.283 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$2d65346c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 21:12:54.365 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 21:12:54.368 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@4a62e04c' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 21:12:54.372 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$5239d71e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 21:12:54.384 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$778eef34] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 21:12:54.387 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 21:12:54.389 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 21:12:54.412 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$94b76c32] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 21:12:54.443 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$1437b964] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 21:12:54.574 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-29 21:12:54.580 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-29 21:12:55.026 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-29 21:12:55.043 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-29 21:12:55.054 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-29 21:12:55.054 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-29 21:12:55.430 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-29 21:12:55.442 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-29 21:12:55.442 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3621 ms
2023-06-29 21:12:56.314 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@4c57dbd7 with name: jasyptStringEncryptor
2023-06-29 21:12:56.372 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-29 21:12:56.455 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-06-29 21:12:56.460 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-29 21:12:57.211 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-29 21:12:57.538 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-29 21:12:57.618 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-29 21:12:57.619 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-29 21:12:57.771 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-29 21:12:58.006 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:12:58.024 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-29 21:12:58.719 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:12:58.722 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-29 21:12:58.769 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-29 21:12:59.015 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-29 21:13:00.101 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-29 21:13:00.113 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-29 21:13:00.291 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-29 21:13:00.292 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-29 21:13:00.292 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-29 21:13:00.292 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-29 21:13:00.292 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-29 21:13:00.292 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-29 21:13:00.292 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-29 21:13:00.292 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-29 21:13:00.293 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-29 21:13:00.452 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1745aa22, org.springframework.security.web.context.SecurityContextPersistenceFilter@214e7657, org.springframework.security.web.header.HeaderWriterFilter@7924b5a4, org.springframework.web.filter.CorsFilter@1a4acaa6, org.springframework.security.web.authentication.logout.LogoutFilter@546ebc5b, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@62bcf381, org.springframework.security.web.session.ConcurrentSessionFilter@66ec169b, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@c135de9, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@24685098, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7ccc7235, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6a478cbe, org.springframework.security.web.session.SessionManagementFilter@61846c34, org.springframework.security.web.access.ExceptionTranslationFilter@436ccbc8, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@2b365d5e]
2023-06-29 21:13:00.475 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-29 21:13:00.828 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-29 21:13:00.901 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-29 21:13:01.315 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:13:02.120 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-29 21:13:02.149 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-29 21:13:02.293 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-29 21:13:02.296 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-29 21:13:02.352 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-29 21:13:02.358 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.052 seconds (JVM running for 12.384)
2023-06-29 21:13:02.359 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-29 21:13:02.359 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-29 21:13:02.359 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-29 21:13:03.449 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-29 21:13:03.449 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-29 21:13:03.470 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 21 ms
2023-06-29 21:13:11.886 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-29 21:13:11.888 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-29 21:13:11.889 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-29 21:13:11.889 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-29 21:13:11.889 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-29 21:13:14.300 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:13:14.308 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-06-29 21:13:14.329 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-29 21:13:14.419 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$Jb7F5IJ8.L3perV/1fRzoe.7/ezP0/B1hMuf20YQ4UunjU2oYgBYi
2023-06-29 21:13:14.509 INFO  [http-nio-10010-exec-6] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-29 21:13:17.442 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:13:17.443 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:13:17.505 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:13:17.515 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:13:17.517 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 21:13:17.523 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 21:13:37.140 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:13:37.140 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:13:37.140 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:13:37.141 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:13:37.142 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 21:13:37.143 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 21:13:44.625 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:13:44.631 INFO  [http-nio-10010-exec-8] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , :acc_date , :route_nm , :emp_nm , :acc_time , :company_nm , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-06-29 21:13:44.639 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:13:44.674 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
2. batching 73 statements:
 1:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-06' , '20번' , '김종국' , '09:24:00' , '인천스마트' , 3573.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'DB / 수리비입금' , '논현주공 13단지 앞' , '0' , 908520.0 , 908520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 2:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-06' , '5-1번' , '이택선' , '18:28:00' , '인천스마트' , 3643.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '전세버스 / 수리완료' , '주안역 환승장' , '0' , 86820.0 , 86820.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 3:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-07' , '38번' , '채종두' , '12:45:00' , '인천스마트' , 3551.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '대물 90 / 회사처리' , '주안역 앞' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 4:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-08' , '38번' , '윤세호' , '14:41:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '서창캠핑장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 5:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-13' , '21번' , '심기섭' , '15:26:00' , '인천스마트' , 3625.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '예술회관 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 6:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-15' , '27번' , '임인복' , '22:32:00' , '인천스마트' , 3638.0 , '자차' , '자피' , '시설물 충격' , 100.0 , '0' , '종결' , '회사 자체 수리' , '남동중학교 정류장' , '0' , '0' , '0' , '0' , '0' , 172720.0 , 172720.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 7:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-18' , '38번' , '고상욱' , '13:59:00' , '인천스마트' , 3552.0 , '자차' , '피해' , '측면충돌' , '10(무과실주장)' , 90.0 , '종결' , '삼성접수 / 수리비 50입금' , '하늘마을앞 사거리' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 8:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-19' , '21번' , '이용진' , '06:57:00' , '인천스마트' , 3623.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 삼공수리' , '매소홀터널 앞' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 9:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-24' , '20번' , '서수찬' , '09:54:00' , '인천스마트' , 3506.0 , '대물,자차' , '가해' , '시설물 충격' , 100.0 , '0' , '종결' , '공제접수 / 가로등,가로수' , '선수촌5단지 앞' , '0' , '0' , '0' , '0' , 4892800.0 , 4609000.0 , 9501800.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
10:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-26' , '5--번' , '신경식' , '16:27:00' , '인천스마트' , 3646.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '미추홀서경찰관/각자수리' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
11:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-27' , '5-1번' , '남기선' , '20:25:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '수리비 40 입금' , '대림아파트 정류장' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
12:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-29' , '38번' , '박정훈' , '12:16:00' , '인천스마트' , 3575.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리비 50입금' , '독정이고개' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
13:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-02' , '27번' , '전정훈' , '07:11:00' , '인천스마트' , 7125.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 40 입금완료' , '신선초교 앞 공사장 입구' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
14:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-04' , '5-1번' , '남기선' , '07:00:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB접수/수리비 입금' , '소방본부 정류장' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
15:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2020-01-21' , '27번' , '홍성운' , '10:29:00' , '인천스마트' , 3676.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상 청구' , '주안1동성당 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
16:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-06' , '38번' , '최병국' , '09:46:00' , '인천스마트' , 3576.0 , '자차' , '피해' , '측면충돌' , '20 (무과실 주장)' , 80.0 , '종결' , 'KB접수 / 수리비 입금' , '새안의원 앞' , '0' , 900000.0 , 900000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
17:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-06' , '27번' , '권병묵' , '18:15:00' , '인천스마트' , 3638.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'DB접수 / 수리비 입금' , '논현사거리 정류장' , '0' , 398520.0 , 398520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
18:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-05' , '5-1번' , '남기선' , '13:50:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '기타' , 100.0 , '0' , '종결' , '피해자 김복순 30합의' , '주안7동행정복지센터 정류장' , '0' , '0' , '0' , 300000.0 , '0' , '0' , 300000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
19:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '20번' , '이종식' , '10:18:00' , '인천스마트' , 3556.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수(대인,대물)' , '논현주공14단지 앞' , '0' , '0' , '0' , 1339560.0 , 9717620.0 , 2863454.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
20:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '38번' , '박근호' , '08:35:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '롯데접수 / 수리완료' , '전재울사거리' , '0' , 108000.0 , 108000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
21:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '21번' , '허선균' , '13:37:00' , '인천스마트' , 3562.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '대인X, 대물 공제접수' , '도화고가 앞' , '0' , '0' , '0' , '0' , 1800000.0 , 103400.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
22:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-09' , '38번' , '박근호' , '13:38:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB접수/수리완료' , '세일빌라 입구' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
23:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-09' , '38번' , '장길영' , '12:44:00' , '인천스마트' , 3551.0 , '대인' , '가해' , '승차' , 100.0 , '0' , '진행' , '경찰신고 / 합의 조율중' , '하늘마을정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
24:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2022-11-04' , '5-1번' , '오정택' , '13:38:00' , '인천스마트' , 3645.0 , '자차,대인' , '피해' , '측면충돌 (현대구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상청구' , '학익2동 행정복지센터 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
25:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-17' , '21번' , '박인서' , '13:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리비 입금' , '현대시장 정류장' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
26:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-21' , '38번' , '윤세호' , '12:21:00' , '인천스마트' , 3549.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '빽밀러 파손 / 30입금' , '구월동 우리은행사거리' , '0' , 300000.0 , 300000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
27:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-22' , '21번' , '허선균' , '08:31:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '하나손해 / 수리예정' , '경인지방노동청 입구' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
28:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-06' , '5번' , '최정수' , '00:35:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '기타' , '0' , 100.0 , '종결' , '수리비 15 입금' , '연안부두 차고지' , '0' , 150000.0 , 150000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
29:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-06' , '27번' , '백종필' , '20:25:00' , '인천스마트' , 3659.0 , '자차, 승객' , '피해' , '측면충돌' , 10.0 , 90.0 , '종결' , '삼성접수/수리비 70입금' , '주적골삼거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
30:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-09' , '5번' , '김성취' , '19:19:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 35입금' , '임광그대로가 103동 앞' , '0' , 350000.0 , 350000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
31:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-10' , '5번' , '한태전' , '21:13:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '종결' , 'DB접수 / 수리비 70입금' , '문학 목우촌 앞' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
32:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-13' , '27번' , '임인복' , '20:31:00' , '인천스마트' , 7123.0 , '자차' , '피해' , '측면충돌' , 10.0 , 90.0 , '진행' , '렌트공제/ 과실 9:1확정' , '항동 SK주유소 앞' , '0' , 1599300.0 , 1599300.0 , 818000.0 , 500000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
33:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-15' , '5번' , '김도근' , '23:50:00' , '인천스마트' , 3621.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '연안부두 차고지' , '0' , 250000.0 , 250000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
34:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-16' , '5번' , '임충환' , '14:40:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 50입금' , '토지금고 굴다리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
35:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-18' , '5-1번' , '박정배' , '11:20:00' , '인천스마트' , 3644.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 /수리예정' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
36:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-19' , '20번' , '김동회' , '12:27:00' , '인천스마트' , 3504.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '현대 접수/수리비 50입금' , '동방중학교 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
37:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-15' , '38번' , '윤세호' , '19:51:00' , '인천스마트' , 3553.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '김명희(78세,여)/120 회사처리' , '윤성아파트 앞' , '0' , '0' , '0' , 1200000.0 , 1200000.0 , '0' , 1200000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
38:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-21' , '5번' , '자선호' , '19:43:00' , '인천스마트' , 3622.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 입급' , '롯데백화점 사거리' , '0' , 800000.0 , 800000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
39:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-21' , '5번' , '김요섭' , '21:00:00' , '인천스마트' , 3632.0 , '자차,대인' , '쌍피' , '측면충돌' , 40.0 , 60.0 , '종결' , '차량 각 처리, 승객 상대처리' , '선수촌아파트 입구 회전교차로' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
40:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-23' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
41:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-23' , '27번' , '김용문' , '15:50:00' , '인천스마트' , 3641.0 , '대인' , '가해' , ' 문 끼임사고' , 100.0 , '0' , '종결' , '합의금(박순예)60지급' , '인하대역 1번출구' , '0' , '0' , '0' , 600000.0 , '0' , '0' , 600000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
42:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '인호덕' , '10:45:00' , '인천스마트' , 3676.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리완료' , '도림동고개' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
43:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '이용재' , '16:06:00' , '인천스마트' , 3637.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB / 수리비 70입금' , '논현역사거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
44:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '삼성접수/신고예정' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
45:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '이용일' , '14:31:00' , '인천스마트' , 3634.0 , '대인' , '가해' , '개문발차' , 100.0 , '0' , '종결' , '공제접수' , '한신휴아파트 정류장' , '0' , '0' , '0' , 2710000.0 , '0' , '0' , 2710000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
46:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-28' , '21번' , '조성훈' , '23:05:00' , '인천스마트' , 3563.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '종결' , '대인X, 대물 90회사합의' , '롯데백화점 사거리' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
47:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-31' , '21번' , '유병수' , '07:30:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '한화 / 수리비 60입금' , '서창중 정류장' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
48:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-04' , '20번' , '이형규' , '20:05:00' , '인천스마트' , 3505.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25만 입금' , '인평고 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
49:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '27번' , '윤병진' , '09:31:00' , '인천스마트' , 7122.0 , '자차' , '피해' , '측면충돌' , '무과실 주장' , 80.0 , '진행' , 'DB접수 / 과실협의중' , '토지금고시장 입구 삼거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
50:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '20번' , '임재준' , '12:05:00' , '인천스마트' , 3574.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '공제접수' , '남촌동입구 정류장' , '0' , '0' , '0' , 1700000.0 , '0' , '0' , 1700000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
51:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '27번' , '이승수' , '13:06:00' , '인천스마트' , 3640.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 60입금' , '주적골 삼거리' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
52:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-06' , '27번' , '이용일' , '10:44:00' , '인천스마트' , 3634.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , 'KB / 수리비입금예정' , '용현고가교' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
53:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-10' , '20번' , '김동회' , '10:30:00' , '인천스마트' , 3504.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '50 합의' , '모래내시장전 사거리' , '0' , '0' , '0' , 500000.0 , '0' , '0' , 500000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
54:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-10' , '38번' , '박정훈' , '16:30:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금 ' , '경인식약청 앞' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
55:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-11' , '38번' , '김승배' , '14:02:00' , '인천스마트' , 3550.0 , '인,물피' , '쌍피' , '측면충돌' , 60.0 , 40.0 , '진행' , '현대접수 / 공제접수' , '신기사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
56:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-13' , '38번' , '장명근' , '14:57:00' , '인천스마트' , 3553.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금' , '소래포구역 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
57:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-14' , '5번' , '임충환' , '15:42:00' , '인천스마트' , 3632.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '공제접수' , '서창119안전센터 앞' , '0' , '0' , '0' , '0' , 1152880.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
58:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-16' , '5-1번' , '이택선' , '16:40:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '명보주유소 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
59:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-18' , '20번' , '손신영' , '16:52:00' , '인천스마트' , 3565.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '진행' , '공제접수' , '태화아파트 정류장 전' , '0' , '0' , '0' , 818000.0 , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
60:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-19' , '5-1번' , '이덕길' , '15:33:00' , '인천스마트' , 3648.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사 접수 / 수리완료' , '신기시장 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
61:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-22' , '5번' , '장남균' , '23:42:00' , '인천스마트' , 3631.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB / 수리완료' , '신선초교 사거리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
62:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2018-08-16' , '27번' , '정재철' , '20:00:00' , '인천스마트' , 3633.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '무과실 주장' , 100.0 , '진행' , '현대 선처리후 구상청구' , '논현동 소래풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
63:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-28' , '38번' , '이정성' , '07:03:00' , '인천스마트' , 3546.0 , '대인,대물,자차' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수' , '남동경찰서 사거리' , '0' , '0' , '0' , '0' , 660000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
64:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-04' , '38번' , '유종각' , '12:41:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '차내전도' , 50.0 , 50.0 , '종결' , '80 합의, 경찰신고' , '토지금고시장 사거리' , '0' , '0' , '0' , 800000.0 , '0' , '0' , 800000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
65:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-05' , '27번' , '이용재B' , '11:23:00' , '인천스마트' , 3639.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '빽밀러 파손 / 공제접수' , '신선초교 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
66:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-06' , '38번' , '이경환' , '13:53:00' , '인천스마트' , 3551.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수' , '관교동 풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , 212828.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
67:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '20번' , '박준용' , '11:32:00' , '인천스마트' , 3053.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '공제접수 / 수리완료' , '하늘마을3단지 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
68:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '5-1번' , '박덕환' , '11:48:00' , '인천스마트' , 3648.0 , '대믈' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수 / 대물' , '토지금고시장 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
69:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '21번' , '유종선' , '13:50:00' , '인천스마트' , 3626.0 , '대인' , '피해' , '비접촉' , '0' , 100.0 , '종결' , '승객 DB접수처리' , '석바위사거리 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
70:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-11' , '27번' , '이용재B' , '09:23:00' , '인천스마트' , 3639.0 , '자차' , '피해' , '접촉' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '롯데백화점 건너 정류장' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
71:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-12' , '5번' , '양광일 ' , '22:44:00' , '인천스마트' , 3629.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 / 수리예정' , '토지금고시장 사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
72:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-15' , '21번' , '노주성' , '10:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '진행' , 'KB접수 / 수리예정' , '서창도서관 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
73:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-16' , '5-1번' , '권태종' , '21:52:00' , '인천스마트' , 3647.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '공제접수 / 대물' , '주안역 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 22 msec}
2023-06-29 21:13:44.691 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:13:44.691 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:13:44.691 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:13:44.695 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 4 msec}
2023-06-29 21:13:44.699 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:16:21.311 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:16:21.311 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:16:21.311 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:16:21.312 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:16:21.316 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:16:21.318 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:16:26.829 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:16:26.829 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:16:26.829 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:16:26.830 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:16:26.833 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:16:26.837 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:17:11.622 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:17:11.629 INFO  [http-nio-10010-exec-8] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , :acc_date , :route_nm , :emp_nm , :acc_time , :company_nm , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-06-29 21:17:11.631 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:17:11.633 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
3. batching 1 statements:
1:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-08' , '38번' , '윤세호' , '14:41:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '111' , '100.0' , '종결' , '삼성접수 / 수리완료' , '서창캠핑장 앞' , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 0 msec}
2023-06-29 21:17:11.645 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:17:11.645 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:17:11.645 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:17:11.648 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:17:11.652 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:17:18.861 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:17:18.862 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:17:18.862 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:17:18.863 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:17:18.866 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:17:18.868 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:18:47.522 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:18:47.522 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:18:47.522 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:18:47.523 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:18:47.527 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:18:47.529 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:18:58.896 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:18:58.902 INFO  [http-nio-10010-exec-1] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , :acc_date , :route_nm , :emp_nm , :acc_time , :company_nm , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-06-29 21:18:58.904 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:18:58.928 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
4. batching 73 statements:
 1:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-06' , '20번' , '김종국' , '09:24:00' , '인천스마트' , 3573.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'DB / 수리비입금' , '논현주공 13단지 앞' , '0' , 908520.0 , 908520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 2:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-06' , '5-1번' , '이택선' , '18:28:00' , '인천스마트' , 3643.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '전세버스 / 수리완료' , '주안역 환승장' , '0' , 86820.0 , 86820.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 3:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-07' , '38번' , '채종두' , '12:45:00' , '인천스마트' , 3551.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '대물 90 / 회사처리' , '주안역 앞' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 4:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-08' , '38번' , '윤세호' , '14:41:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '서창캠핑장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 5:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-13' , '21번' , '심기섭' , '15:26:00' , '인천스마트' , 3625.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '예술회관 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 6:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-15' , '27번' , '임인복' , '22:32:00' , '인천스마트' , 3638.0 , '자차' , '자피' , '시설물 충격' , 100.0 , '0' , '종결' , '회사 자체 수리' , '남동중학교 정류장' , '0' , '0' , '0' , '0' , '0' , 172720.0 , 172720.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 7:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-18' , '38번' , '고상욱' , '13:59:00' , '인천스마트' , 3552.0 , '자차' , '피해' , '측면충돌' , '10(무과실주장)' , 90.0 , '종결' , '삼성접수 / 수리비 50입금' , '하늘마을앞 사거리' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 8:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-19' , '21번' , '이용진' , '06:57:00' , '인천스마트' , 3623.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 삼공수리' , '매소홀터널 앞' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 9:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-24' , '20번' , '서수찬' , '09:54:00' , '인천스마트' , 3506.0 , '대물,자차' , '가해' , '시설물 충격' , 100.0 , '0' , '종결' , '공제접수 / 가로등,가로수' , '선수촌5단지 앞' , '0' , '0' , '0' , '0' , 4892800.0 , 4609000.0 , 9501800.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
10:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-26' , '5--번' , '신경식' , '16:27:00' , '인천스마트' , 3646.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '미추홀서경찰관/각자수리' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
11:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-27' , '5-1번' , '남기선' , '20:25:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '수리비 40 입금' , '대림아파트 정류장' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
12:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-29' , '38번' , '박정훈' , '12:16:00' , '인천스마트' , 3575.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리비 50입금' , '독정이고개' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
13:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-02' , '27번' , '전정훈' , '07:11:00' , '인천스마트' , 7125.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 40 입금완료' , '신선초교 앞 공사장 입구' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
14:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-04' , '5-1번' , '남기선' , '07:00:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB접수/수리비 입금' , '소방본부 정류장' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
15:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2020-01-21' , '27번' , '홍성운' , '10:29:00' , '인천스마트' , 3676.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상 청구' , '주안1동성당 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
16:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-06' , '38번' , '최병국' , '09:46:00' , '인천스마트' , 3576.0 , '자차' , '피해' , '측면충돌' , '20 (무과실 주장)' , 80.0 , '종결' , 'KB접수 / 수리비 입금' , '새안의원 앞' , '0' , 900000.0 , 900000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
17:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-06' , '27번' , '권병묵' , '18:15:00' , '인천스마트' , 3638.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'DB접수 / 수리비 입금' , '논현사거리 정류장' , '0' , 398520.0 , 398520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
18:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-05' , '5-1번' , '남기선' , '13:50:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '기타' , 100.0 , '0' , '종결' , '피해자 김복순 30합의' , '주안7동행정복지센터 정류장' , '0' , '0' , '0' , 300000.0 , '0' , '0' , 300000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
19:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '20번' , '이종식' , '10:18:00' , '인천스마트' , 3556.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수(대인,대물)' , '논현주공14단지 앞' , '0' , '0' , '0' , 1339560.0 , 9717620.0 , 2863454.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
20:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '38번' , '박근호' , '08:35:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '롯데접수 / 수리완료' , '전재울사거리' , '0' , 108000.0 , 108000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
21:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '21번' , '허선균' , '13:37:00' , '인천스마트' , 3562.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '대인X, 대물 공제접수' , '도화고가 앞' , '0' , '0' , '0' , '0' , 1800000.0 , 103400.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
22:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-09' , '38번' , '박근호' , '13:38:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB접수/수리완료' , '세일빌라 입구' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
23:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-09' , '38번' , '장길영' , '12:44:00' , '인천스마트' , 3551.0 , '대인' , '가해' , '승차' , 100.0 , '0' , '진행' , '경찰신고 / 합의 조율중' , '하늘마을정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
24:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2022-11-04' , '5-1번' , '오정택' , '13:38:00' , '인천스마트' , 3645.0 , '자차,대인' , '피해' , '측면충돌 (현대구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상청구' , '학익2동 행정복지센터 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
25:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-17' , '21번' , '박인서' , '13:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리비 입금' , '현대시장 정류장' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
26:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-21' , '38번' , '윤세호' , '12:21:00' , '인천스마트' , 3549.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '빽밀러 파손 / 30입금' , '구월동 우리은행사거리' , '0' , 300000.0 , 300000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
27:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-22' , '21번' , '허선균' , '08:31:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '하나손해 / 수리예정' , '경인지방노동청 입구' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
28:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-06' , '5번' , '최정수' , '00:35:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '기타' , '0' , 100.0 , '종결' , '수리비 15 입금' , '연안부두 차고지' , '0' , 150000.0 , 150000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
29:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-06' , '27번' , '백종필' , '20:25:00' , '인천스마트' , 3659.0 , '자차, 승객' , '피해' , '측면충돌' , 10.0 , 90.0 , '종결' , '삼성접수/수리비 70입금' , '주적골삼거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
30:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-09' , '5번' , '김성취' , '19:19:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 35입금' , '임광그대로가 103동 앞' , '0' , 350000.0 , 350000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
31:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-10' , '5번' , '한태전' , '21:13:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '종결' , 'DB접수 / 수리비 70입금' , '문학 목우촌 앞' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
32:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-13' , '27번' , '임인복' , '20:31:00' , '인천스마트' , 7123.0 , '자차' , '피해' , '측면충돌' , 10.0 , 90.0 , '진행' , '렌트공제/ 과실 9:1확정' , '항동 SK주유소 앞' , '0' , 1599300.0 , 1599300.0 , 818000.0 , 500000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
33:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-15' , '5번' , '김도근' , '23:50:00' , '인천스마트' , 3621.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '연안부두 차고지' , '0' , 250000.0 , 250000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
34:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-16' , '5번' , '임충환' , '14:40:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 50입금' , '토지금고 굴다리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
35:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-18' , '5-1번' , '박정배' , '11:20:00' , '인천스마트' , 3644.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 /수리예정' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
36:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-19' , '20번' , '김동회' , '12:27:00' , '인천스마트' , 3504.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '현대 접수/수리비 50입금' , '동방중학교 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
37:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-15' , '38번' , '윤세호' , '19:51:00' , '인천스마트' , 3553.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '김명희(78세,여)/120 회사처리' , '윤성아파트 앞' , '0' , '0' , '0' , 1200000.0 , 1200000.0 , '0' , 1200000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
38:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-21' , '5번' , '자선호' , '19:43:00' , '인천스마트' , 3622.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 입급' , '롯데백화점 사거리' , '0' , 800000.0 , 800000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
39:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-21' , '5번' , '김요섭' , '21:00:00' , '인천스마트' , 3632.0 , '자차,대인' , '쌍피' , '측면충돌' , 40.0 , 60.0 , '종결' , '차량 각 처리, 승객 상대처리' , '선수촌아파트 입구 회전교차로' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
40:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-23' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
41:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-23' , '27번' , '김용문' , '15:50:00' , '인천스마트' , 3641.0 , '대인' , '가해' , ' 문 끼임사고' , 100.0 , '0' , '종결' , '합의금(박순예)60지급' , '인하대역 1번출구' , '0' , '0' , '0' , 600000.0 , '0' , '0' , 600000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
42:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '인호덕' , '10:45:00' , '인천스마트' , 3676.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리완료' , '도림동고개' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
43:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '이용재' , '16:06:00' , '인천스마트' , 3637.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB / 수리비 70입금' , '논현역사거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
44:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '삼성접수/신고예정' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
45:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '이용일' , '14:31:00' , '인천스마트' , 3634.0 , '대인' , '가해' , '개문발차' , 100.0 , '0' , '종결' , '공제접수' , '한신휴아파트 정류장' , '0' , '0' , '0' , 2710000.0 , '0' , '0' , 2710000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
46:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-28' , '21번' , '조성훈' , '23:05:00' , '인천스마트' , 3563.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '종결' , '대인X, 대물 90회사합의' , '롯데백화점 사거리' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
47:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-31' , '21번' , '유병수' , '07:30:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '한화 / 수리비 60입금' , '서창중 정류장' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
48:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-04' , '20번' , '이형규' , '20:05:00' , '인천스마트' , 3505.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25만 입금' , '인평고 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
49:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '27번' , '윤병진' , '09:31:00' , '인천스마트' , 7122.0 , '자차' , '피해' , '측면충돌' , '무과실 주장' , 80.0 , '진행' , 'DB접수 / 과실협의중' , '토지금고시장 입구 삼거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
50:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '20번' , '임재준' , '12:05:00' , '인천스마트' , 3574.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '공제접수' , '남촌동입구 정류장' , '0' , '0' , '0' , 1700000.0 , '0' , '0' , 1700000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
51:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '27번' , '이승수' , '13:06:00' , '인천스마트' , 3640.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 60입금' , '주적골 삼거리' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
52:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-06' , '27번' , '이용일' , '10:44:00' , '인천스마트' , 3634.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , 'KB / 수리비입금예정' , '용현고가교' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
53:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-10' , '20번' , '김동회' , '10:30:00' , '인천스마트' , 3504.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '50 합의' , '모래내시장전 사거리' , '0' , '0' , '0' , 500000.0 , '0' , '0' , 500000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
54:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-10' , '38번' , '박정훈' , '16:30:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금 ' , '경인식약청 앞' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
55:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-11' , '38번' , '김승배' , '14:02:00' , '인천스마트' , 3550.0 , '인,물피' , '쌍피' , '측면충돌' , 60.0 , 40.0 , '진행' , '현대접수 / 공제접수' , '신기사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
56:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-13' , '38번' , '장명근' , '14:57:00' , '인천스마트' , 3553.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금' , '소래포구역 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
57:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-14' , '5번' , '임충환' , '15:42:00' , '인천스마트' , 3632.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '공제접수' , '서창119안전센터 앞' , '0' , '0' , '0' , '0' , 1152880.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
58:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-16' , '5-1번' , '이택선' , '16:40:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '명보주유소 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
59:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-18' , '20번' , '손신영' , '16:52:00' , '인천스마트' , 3565.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '진행' , '공제접수' , '태화아파트 정류장 전' , '0' , '0' , '0' , 818000.0 , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
60:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-19' , '5-1번' , '이덕길' , '15:33:00' , '인천스마트' , 3648.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사 접수 / 수리완료' , '신기시장 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
61:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-22' , '5번' , '장남균' , '23:42:00' , '인천스마트' , 3631.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB / 수리완료' , '신선초교 사거리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
62:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2018-08-16' , '27번' , '정재철' , '20:00:00' , '인천스마트' , 3633.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '무과실 주장' , 100.0 , '진행' , '현대 선처리후 구상청구' , '논현동 소래풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
63:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-28' , '38번' , '이정성' , '07:03:00' , '인천스마트' , 3546.0 , '대인,대물,자차' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수' , '남동경찰서 사거리' , '0' , '0' , '0' , '0' , 660000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
64:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-04' , '38번' , '유종각' , '12:41:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '차내전도' , 50.0 , 50.0 , '종결' , '80 합의, 경찰신고' , '토지금고시장 사거리' , '0' , '0' , '0' , 800000.0 , '0' , '0' , 800000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
65:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-05' , '27번' , '이용재B' , '11:23:00' , '인천스마트' , 3639.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '빽밀러 파손 / 공제접수' , '신선초교 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
66:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-06' , '38번' , '이경환' , '13:53:00' , '인천스마트' , 3551.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수' , '관교동 풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , 212828.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
67:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '20번' , '박준용' , '11:32:00' , '인천스마트' , 3053.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '공제접수 / 수리완료' , '하늘마을3단지 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
68:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '5-1번' , '박덕환' , '11:48:00' , '인천스마트' , 3648.0 , '대믈' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수 / 대물' , '토지금고시장 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
69:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '21번' , '유종선' , '13:50:00' , '인천스마트' , 3626.0 , '대인' , '피해' , '비접촉' , '0' , 100.0 , '종결' , '승객 DB접수처리' , '석바위사거리 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
70:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-11' , '27번' , '이용재B' , '09:23:00' , '인천스마트' , 3639.0 , '자차' , '피해' , '접촉' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '롯데백화점 건너 정류장' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
71:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-12' , '5번' , '양광일 ' , '22:44:00' , '인천스마트' , 3629.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 / 수리예정' , '토지금고시장 사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
72:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-15' , '21번' , '노주성' , '10:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '진행' , 'KB접수 / 수리예정' , '서창도서관 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
73:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-16' , '5-1번' , '권태종' , '21:52:00' , '인천스마트' , 3647.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '공제접수 / 대물' , '주안역 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 19 msec}
2023-06-29 21:18:58.997 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:18:58.997 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:18:58.997 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:18:59.000 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:18:59.005 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 4 msec}
2023-06-29 21:19:06.923 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:19:06.923 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:19:06.923 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:19:06.924 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:19:06.927 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:19:06.930 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:19:09.297 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:19:09.297 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:19:09.297 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:19:09.298 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:19:09.302 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:19:09.305 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:19:11.305 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:19:11.305 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:19:11.305 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:19:11.306 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:19:11.309 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:19:11.312 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:19:14.394 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:19:14.394 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:19:14.394 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:19:14.395 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:19:14.398 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:19:14.401 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:20:16.168 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:20:16.168 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:20:16.168 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:20:16.169 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:20:16.172 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:20:16.175 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:21:34.915 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:21:34.915 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:21:34.915 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:21:34.916 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:21:34.920 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:21:34.923 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:23:47.891 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:23:47.891 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:23:47.892 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:23:47.893 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:23:47.896 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:23:47.899 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:24:25.046 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:24:25.046 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:24:25.046 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:24:25.047 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:24:25.051 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:24:25.054 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:24:31.681 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:24:31.686 INFO  [http-nio-10010-exec-2] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , :acc_date , :route_nm , :emp_nm , :acc_time , :company_nm , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-06-29 21:24:31.688 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:24:31.709 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
5. batching 73 statements:
 1:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-06' , '20번' , '김종국' , '09:24:00' , '인천스마트' , 3573.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'DB / 수리비입금' , '논현주공 13단지 앞' , '0' , 908520.0 , 908520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 2:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-06' , '5-1번' , '이택선' , '18:28:00' , '인천스마트' , 3643.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '전세버스 / 수리완료' , '주안역 환승장' , '0' , 86820.0 , 86820.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 3:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-07' , '38번' , '채종두' , '12:45:00' , '인천스마트' , 3551.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '대물 90 / 회사처리' , '주안역 앞' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 4:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-08' , '38번' , '윤세호' , '14:41:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '서창캠핑장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 5:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-13' , '21번' , '심기섭' , '15:26:00' , '인천스마트' , 3625.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '예술회관 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 6:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-15' , '27번' , '임인복' , '22:32:00' , '인천스마트' , 3638.0 , '자차' , '자피' , '시설물 충격' , 100.0 , '0' , '종결' , '회사 자체 수리' , '남동중학교 정류장' , '0' , '0' , '0' , '0' , '0' , 172720.0 , 172720.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 7:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-18' , '38번' , '고상욱' , '13:59:00' , '인천스마트' , 3552.0 , '자차' , '피해' , '측면충돌' , '10(무과실주장)' , 90.0 , '종결' , '삼성접수 / 수리비 50입금' , '하늘마을앞 사거리' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 8:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-19' , '21번' , '이용진' , '06:57:00' , '인천스마트' , 3623.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 삼공수리' , '매소홀터널 앞' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 9:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-24' , '20번' , '서수찬' , '09:54:00' , '인천스마트' , 3506.0 , '대물,자차' , '가해' , '시설물 충격' , 100.0 , '0' , '종결' , '공제접수 / 가로등,가로수' , '선수촌5단지 앞' , '0' , '0' , '0' , '0' , 4892800.0 , 4609000.0 , 9501800.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
10:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-26' , '5--번' , '신경식' , '16:27:00' , '인천스마트' , 3646.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '미추홀서경찰관/각자수리' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
11:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-27' , '5-1번' , '남기선' , '20:25:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '수리비 40 입금' , '대림아파트 정류장' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
12:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-29' , '38번' , '박정훈' , '12:16:00' , '인천스마트' , 3575.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리비 50입금' , '독정이고개' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
13:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-02' , '27번' , '전정훈' , '07:11:00' , '인천스마트' , 7125.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 40 입금완료' , '신선초교 앞 공사장 입구' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
14:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-04' , '5-1번' , '남기선' , '07:00:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB접수/수리비 입금' , '소방본부 정류장' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
15:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2020-01-21' , '27번' , '홍성운' , '10:29:00' , '인천스마트' , 3676.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상 청구' , '주안1동성당 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
16:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-06' , '38번' , '최병국' , '09:46:00' , '인천스마트' , 3576.0 , '자차' , '피해' , '측면충돌' , '20 (무과실 주장)' , 80.0 , '종결' , 'KB접수 / 수리비 입금' , '새안의원 앞' , '0' , 900000.0 , 900000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
17:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-06' , '27번' , '권병묵' , '18:15:00' , '인천스마트' , 3638.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'DB접수 / 수리비 입금' , '논현사거리 정류장' , '0' , 398520.0 , 398520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
18:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-05' , '5-1번' , '남기선' , '13:50:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '기타' , 100.0 , '0' , '종결' , '피해자 김복순 30합의' , '주안7동행정복지센터 정류장' , '0' , '0' , '0' , 300000.0 , '0' , '0' , 300000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
19:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '20번' , '이종식' , '10:18:00' , '인천스마트' , 3556.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수(대인,대물)' , '논현주공14단지 앞' , '0' , '0' , '0' , 1339560.0 , 9717620.0 , 2863454.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
20:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '38번' , '박근호' , '08:35:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '롯데접수 / 수리완료' , '전재울사거리' , '0' , 108000.0 , 108000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
21:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '21번' , '허선균' , '13:37:00' , '인천스마트' , 3562.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '대인X, 대물 공제접수' , '도화고가 앞' , '0' , '0' , '0' , '0' , 1800000.0 , 103400.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
22:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-09' , '38번' , '박근호' , '13:38:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB접수/수리완료' , '세일빌라 입구' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
23:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-09' , '38번' , '장길영' , '12:44:00' , '인천스마트' , 3551.0 , '대인' , '가해' , '승차' , 100.0 , '0' , '진행' , '경찰신고 / 합의 조율중' , '하늘마을정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
24:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2022-11-04' , '5-1번' , '오정택' , '13:38:00' , '인천스마트' , 3645.0 , '자차,대인' , '피해' , '측면충돌 (현대구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상청구' , '학익2동 행정복지센터 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
25:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-17' , '21번' , '박인서' , '13:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리비 입금' , '현대시장 정류장' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
26:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-21' , '38번' , '윤세호' , '12:21:00' , '인천스마트' , 3549.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '빽밀러 파손 / 30입금' , '구월동 우리은행사거리' , '0' , 300000.0 , 300000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
27:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-22' , '21번' , '허선균' , '08:31:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '하나손해 / 수리예정' , '경인지방노동청 입구' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
28:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-06' , '5번' , '최정수' , '00:35:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '기타' , '0' , 100.0 , '종결' , '수리비 15 입금' , '연안부두 차고지' , '0' , 150000.0 , 150000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
29:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-06' , '27번' , '백종필' , '20:25:00' , '인천스마트' , 3659.0 , '자차, 승객' , '피해' , '측면충돌' , 10.0 , 90.0 , '종결' , '삼성접수/수리비 70입금' , '주적골삼거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
30:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-09' , '5번' , '김성취' , '19:19:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 35입금' , '임광그대로가 103동 앞' , '0' , 350000.0 , 350000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
31:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-10' , '5번' , '한태전' , '21:13:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '종결' , 'DB접수 / 수리비 70입금' , '문학 목우촌 앞' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
32:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-13' , '27번' , '임인복' , '20:31:00' , '인천스마트' , 7123.0 , '자차' , '피해' , '측면충돌' , 10.0 , 90.0 , '진행' , '렌트공제/ 과실 9:1확정' , '항동 SK주유소 앞' , '0' , 1599300.0 , 1599300.0 , 818000.0 , 500000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
33:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-15' , '5번' , '김도근' , '23:50:00' , '인천스마트' , 3621.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '연안부두 차고지' , '0' , 250000.0 , 250000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
34:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-16' , '5번' , '임충환' , '14:40:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 50입금' , '토지금고 굴다리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
35:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-18' , '5-1번' , '박정배' , '11:20:00' , '인천스마트' , 3644.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 /수리예정' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
36:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-19' , '20번' , '김동회' , '12:27:00' , '인천스마트' , 3504.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '현대 접수/수리비 50입금' , '동방중학교 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
37:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-15' , '38번' , '윤세호' , '19:51:00' , '인천스마트' , 3553.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '김명희(78세,여)/120 회사처리' , '윤성아파트 앞' , '0' , '0' , '0' , 1200000.0 , 1200000.0 , '0' , 1200000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
38:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-21' , '5번' , '자선호' , '19:43:00' , '인천스마트' , 3622.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 입급' , '롯데백화점 사거리' , '0' , 800000.0 , 800000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
39:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-21' , '5번' , '김요섭' , '21:00:00' , '인천스마트' , 3632.0 , '자차,대인' , '쌍피' , '측면충돌' , 40.0 , 60.0 , '종결' , '차량 각 처리, 승객 상대처리' , '선수촌아파트 입구 회전교차로' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
40:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-23' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
41:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-23' , '27번' , '김용문' , '15:50:00' , '인천스마트' , 3641.0 , '대인' , '가해' , ' 문 끼임사고' , 100.0 , '0' , '종결' , '합의금(박순예)60지급' , '인하대역 1번출구' , '0' , '0' , '0' , 600000.0 , '0' , '0' , 600000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
42:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '인호덕' , '10:45:00' , '인천스마트' , 3676.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리완료' , '도림동고개' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
43:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '이용재' , '16:06:00' , '인천스마트' , 3637.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB / 수리비 70입금' , '논현역사거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
44:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '삼성접수/신고예정' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
45:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '이용일' , '14:31:00' , '인천스마트' , 3634.0 , '대인' , '가해' , '개문발차' , 100.0 , '0' , '종결' , '공제접수' , '한신휴아파트 정류장' , '0' , '0' , '0' , 2710000.0 , '0' , '0' , 2710000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
46:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-28' , '21번' , '조성훈' , '23:05:00' , '인천스마트' , 3563.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '종결' , '대인X, 대물 90회사합의' , '롯데백화점 사거리' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
47:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-31' , '21번' , '유병수' , '07:30:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '한화 / 수리비 60입금' , '서창중 정류장' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
48:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-04' , '20번' , '이형규' , '20:05:00' , '인천스마트' , 3505.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25만 입금' , '인평고 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
49:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '27번' , '윤병진' , '09:31:00' , '인천스마트' , 7122.0 , '자차' , '피해' , '측면충돌' , '무과실 주장' , 80.0 , '진행' , 'DB접수 / 과실협의중' , '토지금고시장 입구 삼거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
50:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '20번' , '임재준' , '12:05:00' , '인천스마트' , 3574.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '공제접수' , '남촌동입구 정류장' , '0' , '0' , '0' , 1700000.0 , '0' , '0' , 1700000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
51:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '27번' , '이승수' , '13:06:00' , '인천스마트' , 3640.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 60입금' , '주적골 삼거리' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
52:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-06' , '27번' , '이용일' , '10:44:00' , '인천스마트' , 3634.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , 'KB / 수리비입금예정' , '용현고가교' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
53:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-10' , '20번' , '김동회' , '10:30:00' , '인천스마트' , 3504.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '50 합의' , '모래내시장전 사거리' , '0' , '0' , '0' , 500000.0 , '0' , '0' , 500000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
54:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-10' , '38번' , '박정훈' , '16:30:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금 ' , '경인식약청 앞' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
55:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-11' , '38번' , '김승배' , '14:02:00' , '인천스마트' , 3550.0 , '인,물피' , '쌍피' , '측면충돌' , 60.0 , 40.0 , '진행' , '현대접수 / 공제접수' , '신기사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
56:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-13' , '38번' , '장명근' , '14:57:00' , '인천스마트' , 3553.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금' , '소래포구역 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
57:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-14' , '5번' , '임충환' , '15:42:00' , '인천스마트' , 3632.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '공제접수' , '서창119안전센터 앞' , '0' , '0' , '0' , '0' , 1152880.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
58:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-16' , '5-1번' , '이택선' , '16:40:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '명보주유소 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
59:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-18' , '20번' , '손신영' , '16:52:00' , '인천스마트' , 3565.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '진행' , '공제접수' , '태화아파트 정류장 전' , '0' , '0' , '0' , 818000.0 , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
60:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-19' , '5-1번' , '이덕길' , '15:33:00' , '인천스마트' , 3648.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사 접수 / 수리완료' , '신기시장 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
61:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-22' , '5번' , '장남균' , '23:42:00' , '인천스마트' , 3631.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB / 수리완료' , '신선초교 사거리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
62:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2018-08-16' , '27번' , '정재철' , '20:00:00' , '인천스마트' , 3633.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '무과실 주장' , 100.0 , '진행' , '현대 선처리후 구상청구' , '논현동 소래풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
63:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-28' , '38번' , '이정성' , '07:03:00' , '인천스마트' , 3546.0 , '대인,대물,자차' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수' , '남동경찰서 사거리' , '0' , '0' , '0' , '0' , 660000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
64:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-04' , '38번' , '유종각' , '12:41:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '차내전도' , 50.0 , 50.0 , '종결' , '80 합의, 경찰신고' , '토지금고시장 사거리' , '0' , '0' , '0' , 800000.0 , '0' , '0' , 800000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
65:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-05' , '27번' , '이용재B' , '11:23:00' , '인천스마트' , 3639.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '빽밀러 파손 / 공제접수' , '신선초교 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
66:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-06' , '38번' , '이경환' , '13:53:00' , '인천스마트' , 3551.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수' , '관교동 풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , 212828.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
67:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '20번' , '박준용' , '11:32:00' , '인천스마트' , 3053.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '공제접수 / 수리완료' , '하늘마을3단지 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
68:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '5-1번' , '박덕환' , '11:48:00' , '인천스마트' , 3648.0 , '대믈' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수 / 대물' , '토지금고시장 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
69:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '21번' , '유종선' , '13:50:00' , '인천스마트' , 3626.0 , '대인' , '피해' , '비접촉' , '0' , 100.0 , '종결' , '승객 DB접수처리' , '석바위사거리 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
70:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-11' , '27번' , '이용재B' , '09:23:00' , '인천스마트' , 3639.0 , '자차' , '피해' , '접촉' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '롯데백화점 건너 정류장' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
71:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-12' , '5번' , '양광일 ' , '22:44:00' , '인천스마트' , 3629.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 / 수리예정' , '토지금고시장 사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
72:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-15' , '21번' , '노주성' , '10:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '진행' , 'KB접수 / 수리예정' , '서창도서관 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
73:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-16' , '5-1번' , '권태종' , '21:52:00' , '인천스마트' , 3647.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '공제접수 / 대물' , '주안역 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 17 msec}
2023-06-29 21:24:31.723 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:24:31.723 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:24:31.723 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:24:31.726 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:24:31.730 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:24:35.565 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:24:35.565 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:24:35.565 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:24:35.566 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:24:35.568 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:24:35.570 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:24:41.042 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:24:41.042 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:24:41.042 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:24:41.043 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:24:41.045 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:24:41.048 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 21:25:38.762 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:25:38.763 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:25:38.763 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:25:38.764 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:25:38.767 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:25:38.771 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:25:41.910 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:25:41.910 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:25:41.910 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:25:41.911 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:25:41.914 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:25:41.917 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:26:17.925 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:26:17.925 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:26:17.926 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:26:17.926 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:26:17.929 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:26:17.932 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:26:21.276 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:26:21.276 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:26:21.276 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:26:21.277 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:26:21.280 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:26:21.282 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:28:30.816 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:28:30.816 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:28:30.816 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:28:30.817 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:28:30.820 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:28:30.823 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:28:33.004 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:28:33.004 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:28:33.004 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:28:33.005 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:28:33.008 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:28:33.012 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 4 msec}
2023-06-29 21:28:34.562 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:28:34.562 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:28:34.562 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:28:34.563 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:28:34.565 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:28:34.569 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:28:35.896 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:28:35.896 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:28:35.896 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:28:35.897 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:28:35.900 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:28:35.902 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:28:44.692 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:28:44.692 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:28:44.692 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:28:44.693 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:28:44.695 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:28:44.697 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:28:46.908 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:28:46.908 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:28:46.908 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:28:46.909 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:28:46.912 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:28:46.914 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:29:22.216 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:29:22.216 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:29:22.217 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:29:22.217 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:29:22.220 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:29:22.224 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 4 msec}
2023-06-29 21:29:24.255 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:29:24.255 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:29:24.256 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:29:24.256 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:29:24.259 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:29:24.263 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:30:39.466 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:30:39.466 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:30:39.467 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:30:39.468 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:30:39.471 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:30:39.474 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:30:41.293 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:30:41.293 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:30:41.294 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:30:41.295 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:30:41.298 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:30:41.301 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:30:43.759 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:30:43.760 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:30:43.760 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:30:43.761 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:30:43.763 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:30:43.766 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:30:45.797 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:30:45.797 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:30:45.797 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:30:45.798 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:30:45.800 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:30:45.803 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:32:26.858 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:32:26.858 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:32:26.858 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:32:26.860 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:32:26.862 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:32:26.866 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:32:28.528 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:32:28.528 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:32:28.528 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:32:28.529 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:32:28.532 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:32:28.534 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
5. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:32:46.795 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
5. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:32:46.803 INFO  [http-nio-10010-exec-2] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , :acc_date , :route_nm , :emp_nm , :acc_time , :company_nm , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-06-29 21:32:46.805 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
8. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:32:46.826 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
8. batching 73 statements:
 1:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-06' , '20번' , '김종국' , '09:24:00' , '인천스마트' , 3573.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'DB / 수리비입금' , '논현주공 13단지 앞' , '0' , 908520.0 , 908520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 2:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-06' , '5-1번' , '이택선' , '18:28:00' , '인천스마트' , 3643.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '전세버스 / 수리완료' , '주안역 환승장' , '0' , 86820.0 , 86820.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 3:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-07' , '38번' , '채종두' , '12:45:00' , '인천스마트' , 3551.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '대물 90 / 회사처리' , '주안역 앞' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 4:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-08' , '38번' , '윤세호' , '14:41:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '서창캠핑장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 5:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-13' , '21번' , '심기섭' , '15:26:00' , '인천스마트' , 3625.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '예술회관 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 6:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-15' , '27번' , '임인복' , '22:32:00' , '인천스마트' , 3638.0 , '자차' , '자피' , '시설물 충격' , 100.0 , '0' , '종결' , '회사 자체 수리' , '남동중학교 정류장' , '0' , '0' , '0' , '0' , '0' , 172720.0 , 172720.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 7:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-18' , '38번' , '고상욱' , '13:59:00' , '인천스마트' , 3552.0 , '자차' , '피해' , '측면충돌' , '10(무과실주장)' , 90.0 , '종결' , '삼성접수 / 수리비 50입금' , '하늘마을앞 사거리' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 8:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-19' , '21번' , '이용진' , '06:57:00' , '인천스마트' , 3623.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 삼공수리' , '매소홀터널 앞' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 9:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-24' , '20번' , '서수찬' , '09:54:00' , '인천스마트' , 3506.0 , '대물,자차' , '가해' , '시설물 충격' , 100.0 , '0' , '종결' , '공제접수 / 가로등,가로수' , '선수촌5단지 앞' , '0' , '0' , '0' , '0' , 4892800.0 , 4609000.0 , 9501800.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
10:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-26' , '5--번' , '신경식' , '16:27:00' , '인천스마트' , 3646.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '미추홀서경찰관/각자수리' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
11:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-27' , '5-1번' , '남기선' , '20:25:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '수리비 40 입금' , '대림아파트 정류장' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
12:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-29' , '38번' , '박정훈' , '12:16:00' , '인천스마트' , 3575.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리비 50입금' , '독정이고개' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
13:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-02' , '27번' , '전정훈' , '07:11:00' , '인천스마트' , 7125.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 40 입금완료' , '신선초교 앞 공사장 입구' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
14:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-04' , '5-1번' , '남기선' , '07:00:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB접수/수리비 입금' , '소방본부 정류장' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
15:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2020-01-21' , '27번' , '홍성운' , '10:29:00' , '인천스마트' , 3676.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상 청구' , '주안1동성당 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
16:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-06' , '38번' , '최병국' , '09:46:00' , '인천스마트' , 3576.0 , '자차' , '피해' , '측면충돌' , '20 (무과실 주장)' , 80.0 , '종결' , 'KB접수 / 수리비 입금' , '새안의원 앞' , '0' , 900000.0 , 900000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
17:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-06' , '27번' , '권병묵' , '18:15:00' , '인천스마트' , 3638.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'DB접수 / 수리비 입금' , '논현사거리 정류장' , '0' , 398520.0 , 398520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
18:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-05' , '5-1번' , '남기선' , '13:50:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '기타' , 100.0 , '0' , '종결' , '피해자 김복순 30합의' , '주안7동행정복지센터 정류장' , '0' , '0' , '0' , 300000.0 , '0' , '0' , 300000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
19:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '20번' , '이종식' , '10:18:00' , '인천스마트' , 3556.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수(대인,대물)' , '논현주공14단지 앞' , '0' , '0' , '0' , 1339560.0 , 9717620.0 , 2863454.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
20:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '38번' , '박근호' , '08:35:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '롯데접수 / 수리완료' , '전재울사거리' , '0' , 108000.0 , 108000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
21:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '21번' , '허선균' , '13:37:00' , '인천스마트' , 3562.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '대인X, 대물 공제접수' , '도화고가 앞' , '0' , '0' , '0' , '0' , 1800000.0 , 103400.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
22:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-09' , '38번' , '박근호' , '13:38:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB접수/수리완료' , '세일빌라 입구' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
23:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-09' , '38번' , '장길영' , '12:44:00' , '인천스마트' , 3551.0 , '대인' , '가해' , '승차' , 100.0 , '0' , '진행' , '경찰신고 / 합의 조율중' , '하늘마을정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
24:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2022-11-04' , '5-1번' , '오정택' , '13:38:00' , '인천스마트' , 3645.0 , '자차,대인' , '피해' , '측면충돌 (현대구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상청구' , '학익2동 행정복지센터 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
25:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-17' , '21번' , '박인서' , '13:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리비 입금' , '현대시장 정류장' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
26:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-21' , '38번' , '윤세호' , '12:21:00' , '인천스마트' , 3549.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '빽밀러 파손 / 30입금' , '구월동 우리은행사거리' , '0' , 300000.0 , 300000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
27:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-22' , '21번' , '허선균' , '08:31:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '하나손해 / 수리예정' , '경인지방노동청 입구' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
28:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-06' , '5번' , '최정수' , '00:35:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '기타' , '0' , 100.0 , '종결' , '수리비 15 입금' , '연안부두 차고지' , '0' , 150000.0 , 150000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
29:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-06' , '27번' , '백종필' , '20:25:00' , '인천스마트' , 3659.0 , '자차, 승객' , '피해' , '측면충돌' , 10.0 , 90.0 , '종결' , '삼성접수/수리비 70입금' , '주적골삼거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
30:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-09' , '5번' , '김성취' , '19:19:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 35입금' , '임광그대로가 103동 앞' , '0' , 350000.0 , 350000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
31:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-10' , '5번' , '한태전' , '21:13:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '종결' , 'DB접수 / 수리비 70입금' , '문학 목우촌 앞' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
32:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-13' , '27번' , '임인복' , '20:31:00' , '인천스마트' , 7123.0 , '자차' , '피해' , '측면충돌' , 10.0 , 90.0 , '진행' , '렌트공제/ 과실 9:1확정' , '항동 SK주유소 앞' , '0' , 1599300.0 , 1599300.0 , 818000.0 , 500000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
33:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-15' , '5번' , '김도근' , '23:50:00' , '인천스마트' , 3621.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '연안부두 차고지' , '0' , 250000.0 , 250000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
34:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-16' , '5번' , '임충환' , '14:40:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 50입금' , '토지금고 굴다리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
35:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-18' , '5-1번' , '박정배' , '11:20:00' , '인천스마트' , 3644.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 /수리예정' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
36:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-19' , '20번' , '김동회' , '12:27:00' , '인천스마트' , 3504.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '현대 접수/수리비 50입금' , '동방중학교 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
37:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-15' , '38번' , '윤세호' , '19:51:00' , '인천스마트' , 3553.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '김명희(78세,여)/120 회사처리' , '윤성아파트 앞' , '0' , '0' , '0' , 1200000.0 , 1200000.0 , '0' , 1200000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
38:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-21' , '5번' , '자선호' , '19:43:00' , '인천스마트' , 3622.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 입급' , '롯데백화점 사거리' , '0' , 800000.0 , 800000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
39:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-21' , '5번' , '김요섭' , '21:00:00' , '인천스마트' , 3632.0 , '자차,대인' , '쌍피' , '측면충돌' , 40.0 , 60.0 , '종결' , '차량 각 처리, 승객 상대처리' , '선수촌아파트 입구 회전교차로' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
40:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-23' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
41:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-23' , '27번' , '김용문' , '15:50:00' , '인천스마트' , 3641.0 , '대인' , '가해' , ' 문 끼임사고' , 100.0 , '0' , '종결' , '합의금(박순예)60지급' , '인하대역 1번출구' , '0' , '0' , '0' , 600000.0 , '0' , '0' , 600000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
42:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '인호덕' , '10:45:00' , '인천스마트' , 3676.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리완료' , '도림동고개' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
43:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '이용재' , '16:06:00' , '인천스마트' , 3637.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB / 수리비 70입금' , '논현역사거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
44:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '삼성접수/신고예정' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
45:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '이용일' , '14:31:00' , '인천스마트' , 3634.0 , '대인' , '가해' , '개문발차' , 100.0 , '0' , '종결' , '공제접수' , '한신휴아파트 정류장' , '0' , '0' , '0' , 2710000.0 , '0' , '0' , 2710000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
46:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-28' , '21번' , '조성훈' , '23:05:00' , '인천스마트' , 3563.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '종결' , '대인X, 대물 90회사합의' , '롯데백화점 사거리' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
47:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-31' , '21번' , '유병수' , '07:30:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '한화 / 수리비 60입금' , '서창중 정류장' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
48:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-04' , '20번' , '이형규' , '20:05:00' , '인천스마트' , 3505.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25만 입금' , '인평고 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
49:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '27번' , '윤병진' , '09:31:00' , '인천스마트' , 7122.0 , '자차' , '피해' , '측면충돌' , '무과실 주장' , 80.0 , '진행' , 'DB접수 / 과실협의중' , '토지금고시장 입구 삼거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
50:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '20번' , '임재준' , '12:05:00' , '인천스마트' , 3574.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '공제접수' , '남촌동입구 정류장' , '0' , '0' , '0' , 1700000.0 , '0' , '0' , 1700000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
51:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '27번' , '이승수' , '13:06:00' , '인천스마트' , 3640.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 60입금' , '주적골 삼거리' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
52:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-06' , '27번' , '이용일' , '10:44:00' , '인천스마트' , 3634.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , 'KB / 수리비입금예정' , '용현고가교' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
53:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-10' , '20번' , '김동회' , '10:30:00' , '인천스마트' , 3504.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '50 합의' , '모래내시장전 사거리' , '0' , '0' , '0' , 500000.0 , '0' , '0' , 500000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
54:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-10' , '38번' , '박정훈' , '16:30:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금 ' , '경인식약청 앞' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
55:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-11' , '38번' , '김승배' , '14:02:00' , '인천스마트' , 3550.0 , '인,물피' , '쌍피' , '측면충돌' , 60.0 , 40.0 , '진행' , '현대접수 / 공제접수' , '신기사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
56:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-13' , '38번' , '장명근' , '14:57:00' , '인천스마트' , 3553.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금' , '소래포구역 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
57:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-14' , '5번' , '임충환' , '15:42:00' , '인천스마트' , 3632.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '공제접수' , '서창119안전센터 앞' , '0' , '0' , '0' , '0' , 1152880.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
58:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-16' , '5-1번' , '이택선' , '16:40:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '명보주유소 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
59:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-18' , '20번' , '손신영' , '16:52:00' , '인천스마트' , 3565.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '진행' , '공제접수' , '태화아파트 정류장 전' , '0' , '0' , '0' , 818000.0 , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
60:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-19' , '5-1번' , '이덕길' , '15:33:00' , '인천스마트' , 3648.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사 접수 / 수리완료' , '신기시장 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
61:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-22' , '5번' , '장남균' , '23:42:00' , '인천스마트' , 3631.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB / 수리완료' , '신선초교 사거리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
62:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2018-08-16' , '27번' , '정재철' , '20:00:00' , '인천스마트' , 3633.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '무과실 주장' , 100.0 , '진행' , '현대 선처리후 구상청구' , '논현동 소래풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
63:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-28' , '38번' , '이정성' , '07:03:00' , '인천스마트' , 3546.0 , '대인,대물,자차' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수' , '남동경찰서 사거리' , '0' , '0' , '0' , '0' , 660000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
64:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-04' , '38번' , '유종각' , '12:41:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '차내전도' , 50.0 , 50.0 , '종결' , '80 합의, 경찰신고' , '토지금고시장 사거리' , '0' , '0' , '0' , 800000.0 , '0' , '0' , 800000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
65:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-05' , '27번' , '이용재B' , '11:23:00' , '인천스마트' , 3639.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '빽밀러 파손 / 공제접수' , '신선초교 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
66:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-06' , '38번' , '이경환' , '13:53:00' , '인천스마트' , 3551.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수' , '관교동 풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , 212828.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
67:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '20번' , '박준용' , '11:32:00' , '인천스마트' , 3053.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '공제접수 / 수리완료' , '하늘마을3단지 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
68:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '5-1번' , '박덕환' , '11:48:00' , '인천스마트' , 3648.0 , '대믈' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수 / 대물' , '토지금고시장 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
69:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '21번' , '유종선' , '13:50:00' , '인천스마트' , 3626.0 , '대인' , '피해' , '비접촉' , '0' , 100.0 , '종결' , '승객 DB접수처리' , '석바위사거리 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
70:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-11' , '27번' , '이용재B' , '09:23:00' , '인천스마트' , 3639.0 , '자차' , '피해' , '접촉' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '롯데백화점 건너 정류장' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
71:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-12' , '5번' , '양광일 ' , '22:44:00' , '인천스마트' , 3629.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 / 수리예정' , '토지금고시장 사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
72:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-15' , '21번' , '노주성' , '10:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '진행' , 'KB접수 / 수리예정' , '서창도서관 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
73:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-16' , '5-1번' , '권태종' , '21:52:00' , '인천스마트' , 3647.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '공제접수 / 대물' , '주안역 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 16 msec}
2023-06-29 21:32:46.839 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:32:46.839 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:32:46.839 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:32:46.843 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
8. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:32:46.846 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
8. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:33:39.111 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:33:39.111 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:33:39.111 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:33:39.112 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:33:39.115 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:33:39.117 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:33:44.804 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:33:44.810 INFO  [http-nio-10010-exec-3] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , :acc_date , :route_nm , :emp_nm , :acc_time , :company_nm , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-06-29 21:33:44.811 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:33:44.826 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
12. batching 73 statements:
 1:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-06' , '20번' , '김종국' , '09:24:00' , '인천스마트' , 3573.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'DB / 수리비입금' , '논현주공 13단지 앞' , '0' , 908520.0 , 908520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 2:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-06' , '5-1번' , '이택선' , '18:28:00' , '인천스마트' , 3643.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '전세버스 / 수리완료' , '주안역 환승장' , '0' , 86820.0 , 86820.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 3:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-07' , '38번' , '채종두' , '12:45:00' , '인천스마트' , 3551.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '대물 90 / 회사처리' , '주안역 앞' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 4:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-08' , '38번' , '윤세호' , '14:41:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '서창캠핑장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 5:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-13' , '21번' , '심기섭' , '15:26:00' , '인천스마트' , 3625.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '예술회관 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 6:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-15' , '27번' , '임인복' , '22:32:00' , '인천스마트' , 3638.0 , '자차' , '자피' , '시설물 충격' , 100.0 , '0' , '종결' , '회사 자체 수리' , '남동중학교 정류장' , '0' , '0' , '0' , '0' , '0' , 172720.0 , 172720.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 7:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-18' , '38번' , '고상욱' , '13:59:00' , '인천스마트' , 3552.0 , '자차' , '피해' , '측면충돌' , '10(무과실주장)' , 90.0 , '종결' , '삼성접수 / 수리비 50입금' , '하늘마을앞 사거리' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 8:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-19' , '21번' , '이용진' , '06:57:00' , '인천스마트' , 3623.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 삼공수리' , '매소홀터널 앞' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 9:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-24' , '20번' , '서수찬' , '09:54:00' , '인천스마트' , 3506.0 , '대물,자차' , '가해' , '시설물 충격' , 100.0 , '0' , '종결' , '공제접수 / 가로등,가로수' , '선수촌5단지 앞' , '0' , '0' , '0' , '0' , 4892800.0 , 4609000.0 , 9501800.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
10:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-26' , '5--번' , '신경식' , '16:27:00' , '인천스마트' , 3646.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '미추홀서경찰관/각자수리' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
11:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-27' , '5-1번' , '남기선' , '20:25:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '수리비 40 입금' , '대림아파트 정류장' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
12:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-29' , '38번' , '박정훈' , '12:16:00' , '인천스마트' , 3575.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리비 50입금' , '독정이고개' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
13:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-02' , '27번' , '전정훈' , '07:11:00' , '인천스마트' , 7125.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 40 입금완료' , '신선초교 앞 공사장 입구' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
14:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-04' , '5-1번' , '남기선' , '07:00:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB접수/수리비 입금' , '소방본부 정류장' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
15:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2020-01-21' , '27번' , '홍성운' , '10:29:00' , '인천스마트' , 3676.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상 청구' , '주안1동성당 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
16:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-06' , '38번' , '최병국' , '09:46:00' , '인천스마트' , 3576.0 , '자차' , '피해' , '측면충돌' , '20 (무과실 주장)' , 80.0 , '종결' , 'KB접수 / 수리비 입금' , '새안의원 앞' , '0' , 900000.0 , 900000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
17:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-06' , '27번' , '권병묵' , '18:15:00' , '인천스마트' , 3638.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'DB접수 / 수리비 입금' , '논현사거리 정류장' , '0' , 398520.0 , 398520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
18:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-05' , '5-1번' , '남기선' , '13:50:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '기타' , 100.0 , '0' , '종결' , '피해자 김복순 30합의' , '주안7동행정복지센터 정류장' , '0' , '0' , '0' , 300000.0 , '0' , '0' , 300000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
19:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '20번' , '이종식' , '10:18:00' , '인천스마트' , 3556.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수(대인,대물)' , '논현주공14단지 앞' , '0' , '0' , '0' , 1339560.0 , 9717620.0 , 2863454.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
20:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '38번' , '박근호' , '08:35:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '롯데접수 / 수리완료' , '전재울사거리' , '0' , 108000.0 , 108000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
21:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '21번' , '허선균' , '13:37:00' , '인천스마트' , 3562.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '대인X, 대물 공제접수' , '도화고가 앞' , '0' , '0' , '0' , '0' , 1800000.0 , 103400.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
22:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-09' , '38번' , '박근호' , '13:38:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB접수/수리완료' , '세일빌라 입구' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
23:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-09' , '38번' , '장길영' , '12:44:00' , '인천스마트' , 3551.0 , '대인' , '가해' , '승차' , 100.0 , '0' , '진행' , '경찰신고 / 합의 조율중' , '하늘마을정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
24:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2022-11-04' , '5-1번' , '오정택' , '13:38:00' , '인천스마트' , 3645.0 , '자차,대인' , '피해' , '측면충돌 (현대구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상청구' , '학익2동 행정복지센터 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
25:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-17' , '21번' , '박인서' , '13:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리비 입금' , '현대시장 정류장' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
26:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-21' , '38번' , '윤세호' , '12:21:00' , '인천스마트' , 3549.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '빽밀러 파손 / 30입금' , '구월동 우리은행사거리' , '0' , 300000.0 , 300000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
27:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-22' , '21번' , '허선균' , '08:31:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '하나손해 / 수리예정' , '경인지방노동청 입구' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
28:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-06' , '5번' , '최정수' , '00:35:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '기타' , '0' , 100.0 , '종결' , '수리비 15 입금' , '연안부두 차고지' , '0' , 150000.0 , 150000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
29:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-06' , '27번' , '백종필' , '20:25:00' , '인천스마트' , 3659.0 , '자차, 승객' , '피해' , '측면충돌' , 10.0 , 90.0 , '종결' , '삼성접수/수리비 70입금' , '주적골삼거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
30:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-09' , '5번' , '김성취' , '19:19:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 35입금' , '임광그대로가 103동 앞' , '0' , 350000.0 , 350000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
31:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-10' , '5번' , '한태전' , '21:13:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '종결' , 'DB접수 / 수리비 70입금' , '문학 목우촌 앞' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
32:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-13' , '27번' , '임인복' , '20:31:00' , '인천스마트' , 7123.0 , '자차' , '피해' , '측면충돌' , 10.0 , 90.0 , '진행' , '렌트공제/ 과실 9:1확정' , '항동 SK주유소 앞' , '0' , 1599300.0 , 1599300.0 , 818000.0 , 500000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
33:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-15' , '5번' , '김도근' , '23:50:00' , '인천스마트' , 3621.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '연안부두 차고지' , '0' , 250000.0 , 250000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
34:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-16' , '5번' , '임충환' , '14:40:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 50입금' , '토지금고 굴다리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
35:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-18' , '5-1번' , '박정배' , '11:20:00' , '인천스마트' , 3644.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 /수리예정' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
36:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-19' , '20번' , '김동회' , '12:27:00' , '인천스마트' , 3504.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '현대 접수/수리비 50입금' , '동방중학교 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
37:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-15' , '38번' , '윤세호' , '19:51:00' , '인천스마트' , 3553.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '김명희(78세,여)/120 회사처리' , '윤성아파트 앞' , '0' , '0' , '0' , 1200000.0 , 1200000.0 , '0' , 1200000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
38:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-21' , '5번' , '자선호' , '19:43:00' , '인천스마트' , 3622.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 입급' , '롯데백화점 사거리' , '0' , 800000.0 , 800000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
39:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-21' , '5번' , '김요섭' , '21:00:00' , '인천스마트' , 3632.0 , '자차,대인' , '쌍피' , '측면충돌' , 40.0 , 60.0 , '종결' , '차량 각 처리, 승객 상대처리' , '선수촌아파트 입구 회전교차로' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
40:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-23' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
41:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-23' , '27번' , '김용문' , '15:50:00' , '인천스마트' , 3641.0 , '대인' , '가해' , ' 문 끼임사고' , 100.0 , '0' , '종결' , '합의금(박순예)60지급' , '인하대역 1번출구' , '0' , '0' , '0' , 600000.0 , '0' , '0' , 600000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
42:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '인호덕' , '10:45:00' , '인천스마트' , 3676.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리완료' , '도림동고개' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
43:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '이용재' , '16:06:00' , '인천스마트' , 3637.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB / 수리비 70입금' , '논현역사거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
44:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '삼성접수/신고예정' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
45:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '이용일' , '14:31:00' , '인천스마트' , 3634.0 , '대인' , '가해' , '개문발차' , 100.0 , '0' , '종결' , '공제접수' , '한신휴아파트 정류장' , '0' , '0' , '0' , 2710000.0 , '0' , '0' , 2710000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
46:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-28' , '21번' , '조성훈' , '23:05:00' , '인천스마트' , 3563.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '종결' , '대인X, 대물 90회사합의' , '롯데백화점 사거리' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
47:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-31' , '21번' , '유병수' , '07:30:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '한화 / 수리비 60입금' , '서창중 정류장' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
48:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-04' , '20번' , '이형규' , '20:05:00' , '인천스마트' , 3505.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25만 입금' , '인평고 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
49:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '27번' , '윤병진' , '09:31:00' , '인천스마트' , 7122.0 , '자차' , '피해' , '측면충돌' , '무과실 주장' , 80.0 , '진행' , 'DB접수 / 과실협의중' , '토지금고시장 입구 삼거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
50:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '20번' , '임재준' , '12:05:00' , '인천스마트' , 3574.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '공제접수' , '남촌동입구 정류장' , '0' , '0' , '0' , 1700000.0 , '0' , '0' , 1700000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
51:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '27번' , '이승수' , '13:06:00' , '인천스마트' , 3640.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 60입금' , '주적골 삼거리' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
52:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-06' , '27번' , '이용일' , '10:44:00' , '인천스마트' , 3634.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , 'KB / 수리비입금예정' , '용현고가교' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
53:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-10' , '20번' , '김동회' , '10:30:00' , '인천스마트' , 3504.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '50 합의' , '모래내시장전 사거리' , '0' , '0' , '0' , 500000.0 , '0' , '0' , 500000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
54:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-10' , '38번' , '박정훈' , '16:30:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금 ' , '경인식약청 앞' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
55:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-11' , '38번' , '김승배' , '14:02:00' , '인천스마트' , 3550.0 , '인,물피' , '쌍피' , '측면충돌' , 60.0 , 40.0 , '진행' , '현대접수 / 공제접수' , '신기사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
56:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-13' , '38번' , '장명근' , '14:57:00' , '인천스마트' , 3553.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금' , '소래포구역 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
57:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-14' , '5번' , '임충환' , '15:42:00' , '인천스마트' , 3632.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '공제접수' , '서창119안전센터 앞' , '0' , '0' , '0' , '0' , 1152880.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
58:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-16' , '5-1번' , '이택선' , '16:40:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '명보주유소 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
59:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-18' , '20번' , '손신영' , '16:52:00' , '인천스마트' , 3565.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '진행' , '공제접수' , '태화아파트 정류장 전' , '0' , '0' , '0' , 818000.0 , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
60:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-19' , '5-1번' , '이덕길' , '15:33:00' , '인천스마트' , 3648.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사 접수 / 수리완료' , '신기시장 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
61:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-22' , '5번' , '장남균' , '23:42:00' , '인천스마트' , 3631.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB / 수리완료' , '신선초교 사거리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
62:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2018-08-16' , '27번' , '정재철' , '20:00:00' , '인천스마트' , 3633.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '무과실 주장' , 100.0 , '진행' , '현대 선처리후 구상청구' , '논현동 소래풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
63:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-28' , '38번' , '이정성' , '07:03:00' , '인천스마트' , 3546.0 , '대인,대물,자차' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수' , '남동경찰서 사거리' , '0' , '0' , '0' , '0' , 660000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
64:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-04' , '38번' , '유종각' , '12:41:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '차내전도' , 50.0 , 50.0 , '종결' , '80 합의, 경찰신고' , '토지금고시장 사거리' , '0' , '0' , '0' , 800000.0 , '0' , '0' , 800000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
65:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-05' , '27번' , '이용재B' , '11:23:00' , '인천스마트' , 3639.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '빽밀러 파손 / 공제접수' , '신선초교 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
66:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-06' , '38번' , '이경환' , '13:53:00' , '인천스마트' , 3551.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수' , '관교동 풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , 212828.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
67:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '20번' , '박준용' , '11:32:00' , '인천스마트' , 3053.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '공제접수 / 수리완료' , '하늘마을3단지 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
68:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '5-1번' , '박덕환' , '11:48:00' , '인천스마트' , 3648.0 , '대믈' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수 / 대물' , '토지금고시장 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
69:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '21번' , '유종선' , '13:50:00' , '인천스마트' , 3626.0 , '대인' , '피해' , '비접촉' , '0' , 100.0 , '종결' , '승객 DB접수처리' , '석바위사거리 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
70:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-11' , '27번' , '이용재B' , '09:23:00' , '인천스마트' , 3639.0 , '자차' , '피해' , '접촉' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '롯데백화점 건너 정류장' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
71:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-12' , '5번' , '양광일 ' , '22:44:00' , '인천스마트' , 3629.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 / 수리예정' , '토지금고시장 사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
72:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-15' , '21번' , '노주성' , '10:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '진행' , 'KB접수 / 수리예정' , '서창도서관 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
73:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-16' , '5-1번' , '권태종' , '21:52:00' , '인천스마트' , 3647.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '공제접수 / 대물' , '주안역 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 10 msec}
2023-06-29 21:33:44.840 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:33:44.840 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:33:44.840 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:33:44.843 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:33:44.846 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:34:00.987 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:34:00.987 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:34:00.988 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:34:00.988 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:34:00.991 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:34:00.995 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:34:14.930 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:34:14.930 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:34:14.930 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:34:14.931 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:34:14.933 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:34:14.935 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 21:34:20.436 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:34:20.442 INFO  [http-nio-10010-exec-8] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , :acc_date , :route_nm , :emp_nm , :acc_time , :company_nm , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-06-29 21:34:20.444 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:34:20.463 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
13. batching 73 statements:
 1:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-06' , '20번' , '김종국' , '09:24:00' , '인천스마트' , 3573.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'DB / 수리비입금' , '논현주공 13단지 앞' , '0' , 908520.0 , 908520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 2:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-06' , '5-1번' , '이택선' , '18:28:00' , '인천스마트' , 3643.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '전세버스 / 수리완료' , '주안역 환승장' , '0' , 86820.0 , 86820.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 3:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-07' , '38번' , '채종두' , '12:45:00' , '인천스마트' , 3551.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '대물 90 / 회사처리' , '주안역 앞' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 4:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-08' , '38번' , '윤세호' , '14:41:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '서창캠핑장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 5:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-13' , '21번' , '심기섭' , '15:26:00' , '인천스마트' , 3625.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '예술회관 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 6:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-15' , '27번' , '임인복' , '22:32:00' , '인천스마트' , 3638.0 , '자차' , '자피' , '시설물 충격' , 100.0 , '0' , '종결' , '회사 자체 수리' , '남동중학교 정류장' , '0' , '0' , '0' , '0' , '0' , 172720.0 , 172720.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 7:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-18' , '38번' , '고상욱' , '13:59:00' , '인천스마트' , 3552.0 , '자차' , '피해' , '측면충돌' , '10(무과실주장)' , 90.0 , '종결' , '삼성접수 / 수리비 50입금' , '하늘마을앞 사거리' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 8:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-19' , '21번' , '이용진' , '06:57:00' , '인천스마트' , 3623.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 삼공수리' , '매소홀터널 앞' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 9:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-24' , '20번' , '서수찬' , '09:54:00' , '인천스마트' , 3506.0 , '대물,자차' , '가해' , '시설물 충격' , 100.0 , '0' , '종결' , '공제접수 / 가로등,가로수' , '선수촌5단지 앞' , '0' , '0' , '0' , '0' , 4892800.0 , 4609000.0 , 9501800.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
10:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-26' , '5--번' , '신경식' , '16:27:00' , '인천스마트' , 3646.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '미추홀서경찰관/각자수리' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
11:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-27' , '5-1번' , '남기선' , '20:25:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '수리비 40 입금' , '대림아파트 정류장' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
12:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-29' , '38번' , '박정훈' , '12:16:00' , '인천스마트' , 3575.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리비 50입금' , '독정이고개' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
13:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-02' , '27번' , '전정훈' , '07:11:00' , '인천스마트' , 7125.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 40 입금완료' , '신선초교 앞 공사장 입구' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
14:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-04' , '5-1번' , '남기선' , '07:00:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB접수/수리비 입금' , '소방본부 정류장' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
15:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2020-01-21' , '27번' , '홍성운' , '10:29:00' , '인천스마트' , 3676.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상 청구' , '주안1동성당 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
16:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-06' , '38번' , '최병국' , '09:46:00' , '인천스마트' , 3576.0 , '자차' , '피해' , '측면충돌' , '20 (무과실 주장)' , 80.0 , '종결' , 'KB접수 / 수리비 입금' , '새안의원 앞' , '0' , 900000.0 , 900000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
17:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-06' , '27번' , '권병묵' , '18:15:00' , '인천스마트' , 3638.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'DB접수 / 수리비 입금' , '논현사거리 정류장' , '0' , 398520.0 , 398520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
18:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-05' , '5-1번' , '남기선' , '13:50:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '기타' , 100.0 , '0' , '종결' , '피해자 김복순 30합의' , '주안7동행정복지센터 정류장' , '0' , '0' , '0' , 300000.0 , '0' , '0' , 300000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
19:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '20번' , '이종식' , '10:18:00' , '인천스마트' , 3556.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수(대인,대물)' , '논현주공14단지 앞' , '0' , '0' , '0' , 1339560.0 , 9717620.0 , 2863454.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
20:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '38번' , '박근호' , '08:35:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '롯데접수 / 수리완료' , '전재울사거리' , '0' , 108000.0 , 108000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
21:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '21번' , '허선균' , '13:37:00' , '인천스마트' , 3562.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '대인X, 대물 공제접수' , '도화고가 앞' , '0' , '0' , '0' , '0' , 1800000.0 , 103400.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
22:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-09' , '38번' , '박근호' , '13:38:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB접수/수리완료' , '세일빌라 입구' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
23:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-09' , '38번' , '장길영' , '12:44:00' , '인천스마트' , 3551.0 , '대인' , '가해' , '승차' , 100.0 , '0' , '진행' , '경찰신고 / 합의 조율중' , '하늘마을정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
24:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2022-11-04' , '5-1번' , '오정택' , '13:38:00' , '인천스마트' , 3645.0 , '자차,대인' , '피해' , '측면충돌 (현대구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상청구' , '학익2동 행정복지센터 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
25:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-17' , '21번' , '박인서' , '13:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리비 입금' , '현대시장 정류장' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
26:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-21' , '38번' , '윤세호' , '12:21:00' , '인천스마트' , 3549.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '빽밀러 파손 / 30입금' , '구월동 우리은행사거리' , '0' , 300000.0 , 300000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
27:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-22' , '21번' , '허선균' , '08:31:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '하나손해 / 수리예정' , '경인지방노동청 입구' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
28:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-06' , '5번' , '최정수' , '00:35:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '기타' , '0' , 100.0 , '종결' , '수리비 15 입금' , '연안부두 차고지' , '0' , 150000.0 , 150000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
29:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-06' , '27번' , '백종필' , '20:25:00' , '인천스마트' , 3659.0 , '자차, 승객' , '피해' , '측면충돌' , 10.0 , 90.0 , '종결' , '삼성접수/수리비 70입금' , '주적골삼거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
30:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-09' , '5번' , '김성취' , '19:19:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 35입금' , '임광그대로가 103동 앞' , '0' , 350000.0 , 350000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
31:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-10' , '5번' , '한태전' , '21:13:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '종결' , 'DB접수 / 수리비 70입금' , '문학 목우촌 앞' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
32:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-13' , '27번' , '임인복' , '20:31:00' , '인천스마트' , 7123.0 , '자차' , '피해' , '측면충돌' , 10.0 , 90.0 , '진행' , '렌트공제/ 과실 9:1확정' , '항동 SK주유소 앞' , '0' , 1599300.0 , 1599300.0 , 818000.0 , 500000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
33:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-15' , '5번' , '김도근' , '23:50:00' , '인천스마트' , 3621.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '연안부두 차고지' , '0' , 250000.0 , 250000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
34:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-16' , '5번' , '임충환' , '14:40:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 50입금' , '토지금고 굴다리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
35:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-18' , '5-1번' , '박정배' , '11:20:00' , '인천스마트' , 3644.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 /수리예정' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
36:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-19' , '20번' , '김동회' , '12:27:00' , '인천스마트' , 3504.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '현대 접수/수리비 50입금' , '동방중학교 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
37:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-15' , '38번' , '윤세호' , '19:51:00' , '인천스마트' , 3553.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '김명희(78세,여)/120 회사처리' , '윤성아파트 앞' , '0' , '0' , '0' , 1200000.0 , 1200000.0 , '0' , 1200000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
38:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-21' , '5번' , '자선호' , '19:43:00' , '인천스마트' , 3622.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 입급' , '롯데백화점 사거리' , '0' , 800000.0 , 800000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
39:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-21' , '5번' , '김요섭' , '21:00:00' , '인천스마트' , 3632.0 , '자차,대인' , '쌍피' , '측면충돌' , 40.0 , 60.0 , '종결' , '차량 각 처리, 승객 상대처리' , '선수촌아파트 입구 회전교차로' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
40:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-23' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
41:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-23' , '27번' , '김용문' , '15:50:00' , '인천스마트' , 3641.0 , '대인' , '가해' , ' 문 끼임사고' , 100.0 , '0' , '종결' , '합의금(박순예)60지급' , '인하대역 1번출구' , '0' , '0' , '0' , 600000.0 , '0' , '0' , 600000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
42:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '인호덕' , '10:45:00' , '인천스마트' , 3676.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리완료' , '도림동고개' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
43:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '이용재' , '16:06:00' , '인천스마트' , 3637.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB / 수리비 70입금' , '논현역사거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
44:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '삼성접수/신고예정' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
45:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '이용일' , '14:31:00' , '인천스마트' , 3634.0 , '대인' , '가해' , '개문발차' , 100.0 , '0' , '종결' , '공제접수' , '한신휴아파트 정류장' , '0' , '0' , '0' , 2710000.0 , '0' , '0' , 2710000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
46:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-28' , '21번' , '조성훈' , '23:05:00' , '인천스마트' , 3563.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '종결' , '대인X, 대물 90회사합의' , '롯데백화점 사거리' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
47:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-31' , '21번' , '유병수' , '07:30:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '한화 / 수리비 60입금' , '서창중 정류장' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
48:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-04' , '20번' , '이형규' , '20:05:00' , '인천스마트' , 3505.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25만 입금' , '인평고 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
49:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '27번' , '윤병진' , '09:31:00' , '인천스마트' , 7122.0 , '자차' , '피해' , '측면충돌' , '무과실 주장' , 80.0 , '진행' , 'DB접수 / 과실협의중' , '토지금고시장 입구 삼거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
50:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '20번' , '임재준' , '12:05:00' , '인천스마트' , 3574.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '공제접수' , '남촌동입구 정류장' , '0' , '0' , '0' , 1700000.0 , '0' , '0' , 1700000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
51:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '27번' , '이승수' , '13:06:00' , '인천스마트' , 3640.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 60입금' , '주적골 삼거리' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
52:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-06' , '27번' , '이용일' , '10:44:00' , '인천스마트' , 3634.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , 'KB / 수리비입금예정' , '용현고가교' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
53:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-10' , '20번' , '김동회' , '10:30:00' , '인천스마트' , 3504.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '50 합의' , '모래내시장전 사거리' , '0' , '0' , '0' , 500000.0 , '0' , '0' , 500000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
54:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-10' , '38번' , '박정훈' , '16:30:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금 ' , '경인식약청 앞' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
55:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-11' , '38번' , '김승배' , '14:02:00' , '인천스마트' , 3550.0 , '인,물피' , '쌍피' , '측면충돌' , 60.0 , 40.0 , '진행' , '현대접수 / 공제접수' , '신기사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
56:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-13' , '38번' , '장명근' , '14:57:00' , '인천스마트' , 3553.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금' , '소래포구역 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
57:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-14' , '5번' , '임충환' , '15:42:00' , '인천스마트' , 3632.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '공제접수' , '서창119안전센터 앞' , '0' , '0' , '0' , '0' , 1152880.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
58:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-16' , '5-1번' , '이택선' , '16:40:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '명보주유소 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
59:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-18' , '20번' , '손신영' , '16:52:00' , '인천스마트' , 3565.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '진행' , '공제접수' , '태화아파트 정류장 전' , '0' , '0' , '0' , 818000.0 , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
60:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-19' , '5-1번' , '이덕길' , '15:33:00' , '인천스마트' , 3648.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사 접수 / 수리완료' , '신기시장 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
61:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-22' , '5번' , '장남균' , '23:42:00' , '인천스마트' , 3631.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB / 수리완료' , '신선초교 사거리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
62:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2018-08-16' , '27번' , '정재철' , '20:00:00' , '인천스마트' , 3633.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '무과실 주장' , 100.0 , '진행' , '현대 선처리후 구상청구' , '논현동 소래풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
63:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-28' , '38번' , '이정성' , '07:03:00' , '인천스마트' , 3546.0 , '대인,대물,자차' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수' , '남동경찰서 사거리' , '0' , '0' , '0' , '0' , 660000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
64:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-04' , '38번' , '유종각' , '12:41:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '차내전도' , 50.0 , 50.0 , '종결' , '80 합의, 경찰신고' , '토지금고시장 사거리' , '0' , '0' , '0' , 800000.0 , '0' , '0' , 800000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
65:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-05' , '27번' , '이용재B' , '11:23:00' , '인천스마트' , 3639.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '빽밀러 파손 / 공제접수' , '신선초교 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
66:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-06' , '38번' , '이경환' , '13:53:00' , '인천스마트' , 3551.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수' , '관교동 풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , 212828.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
67:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '20번' , '박준용' , '11:32:00' , '인천스마트' , 3053.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '공제접수 / 수리완료' , '하늘마을3단지 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
68:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '5-1번' , '박덕환' , '11:48:00' , '인천스마트' , 3648.0 , '대믈' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수 / 대물' , '토지금고시장 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
69:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '21번' , '유종선' , '13:50:00' , '인천스마트' , 3626.0 , '대인' , '피해' , '비접촉' , '0' , 100.0 , '종결' , '승객 DB접수처리' , '석바위사거리 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
70:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-11' , '27번' , '이용재B' , '09:23:00' , '인천스마트' , 3639.0 , '자차' , '피해' , '접촉' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '롯데백화점 건너 정류장' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
71:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-12' , '5번' , '양광일 ' , '22:44:00' , '인천스마트' , 3629.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 / 수리예정' , '토지금고시장 사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
72:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-15' , '21번' , '노주성' , '10:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '진행' , 'KB접수 / 수리예정' , '서창도서관 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
73:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-16' , '5-1번' , '권태종' , '21:52:00' , '인천스마트' , 3647.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '공제접수 / 대물' , '주안역 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 16 msec}
2023-06-29 21:34:20.477 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:34:20.477 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:34:20.478 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:34:20.481 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:34:20.483 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:36:32.423 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:36:32.423 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:36:32.423 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:36:32.424 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:36:32.427 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:36:32.429 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:36:33.849 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:36:33.849 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:36:33.849 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:36:33.850 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:36:33.852 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:36:33.855 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:36:34.523 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:36:34.523 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:36:34.523 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:36:34.523 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:36:34.526 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 21:36:34.528 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:36:39.833 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-06-29 21:36:39.838 INFO  [http-nio-10010-exec-7] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , :acc_date , :route_nm , :emp_nm , :acc_time , :company_nm , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-06-29 21:36:39.839 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:36:39.854 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
14. batching 73 statements:
 1:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-06' , '20번' , '김종국' , '09:24:00' , '인천스마트' , 3573.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'DB / 수리비입금' , '논현주공 13단지 앞' , '0' , 908520.0 , 908520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 2:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-06' , '5-1번' , '이택선' , '18:28:00' , '인천스마트' , 3643.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '전세버스 / 수리완료' , '주안역 환승장' , '0' , 86820.0 , 86820.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 3:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-07' , '38번' , '채종두' , '12:45:00' , '인천스마트' , 3551.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '대물 90 / 회사처리' , '주안역 앞' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 4:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-08' , '38번' , '윤세호' , '14:41:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '서창캠핑장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 5:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-13' , '21번' , '심기섭' , '15:26:00' , '인천스마트' , 3625.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '예술회관 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 6:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-15' , '27번' , '임인복' , '22:32:00' , '인천스마트' , 3638.0 , '자차' , '자피' , '시설물 충격' , 100.0 , '0' , '종결' , '회사 자체 수리' , '남동중학교 정류장' , '0' , '0' , '0' , '0' , '0' , 172720.0 , 172720.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 7:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-18' , '38번' , '고상욱' , '13:59:00' , '인천스마트' , 3552.0 , '자차' , '피해' , '측면충돌' , '10(무과실주장)' , 90.0 , '종결' , '삼성접수 / 수리비 50입금' , '하늘마을앞 사거리' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 8:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-19' , '21번' , '이용진' , '06:57:00' , '인천스마트' , 3623.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 삼공수리' , '매소홀터널 앞' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 9:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-24' , '20번' , '서수찬' , '09:54:00' , '인천스마트' , 3506.0 , '대물,자차' , '가해' , '시설물 충격' , 100.0 , '0' , '종결' , '공제접수 / 가로등,가로수' , '선수촌5단지 앞' , '0' , '0' , '0' , '0' , 4892800.0 , 4609000.0 , 9501800.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
10:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-26' , '5--번' , '신경식' , '16:27:00' , '인천스마트' , 3646.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '미추홀서경찰관/각자수리' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
11:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-27' , '5-1번' , '남기선' , '20:25:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '수리비 40 입금' , '대림아파트 정류장' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
12:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-29' , '38번' , '박정훈' , '12:16:00' , '인천스마트' , 3575.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리비 50입금' , '독정이고개' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
13:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-02' , '27번' , '전정훈' , '07:11:00' , '인천스마트' , 7125.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 40 입금완료' , '신선초교 앞 공사장 입구' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
14:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-04' , '5-1번' , '남기선' , '07:00:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB접수/수리비 입금' , '소방본부 정류장' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
15:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2020-01-21' , '27번' , '홍성운' , '10:29:00' , '인천스마트' , 3676.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상 청구' , '주안1동성당 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
16:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-06' , '38번' , '최병국' , '09:46:00' , '인천스마트' , 3576.0 , '자차' , '피해' , '측면충돌' , '20 (무과실 주장)' , 80.0 , '종결' , 'KB접수 / 수리비 입금' , '새안의원 앞' , '0' , 900000.0 , 900000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
17:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-06' , '27번' , '권병묵' , '18:15:00' , '인천스마트' , 3638.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'DB접수 / 수리비 입금' , '논현사거리 정류장' , '0' , 398520.0 , 398520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
18:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-05' , '5-1번' , '남기선' , '13:50:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '기타' , 100.0 , '0' , '종결' , '피해자 김복순 30합의' , '주안7동행정복지센터 정류장' , '0' , '0' , '0' , 300000.0 , '0' , '0' , 300000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
19:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '20번' , '이종식' , '10:18:00' , '인천스마트' , 3556.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수(대인,대물)' , '논현주공14단지 앞' , '0' , '0' , '0' , 1339560.0 , 9717620.0 , 2863454.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
20:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '38번' , '박근호' , '08:35:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '롯데접수 / 수리완료' , '전재울사거리' , '0' , 108000.0 , 108000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
21:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '21번' , '허선균' , '13:37:00' , '인천스마트' , 3562.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '대인X, 대물 공제접수' , '도화고가 앞' , '0' , '0' , '0' , '0' , 1800000.0 , 103400.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
22:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-09' , '38번' , '박근호' , '13:38:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB접수/수리완료' , '세일빌라 입구' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
23:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-09' , '38번' , '장길영' , '12:44:00' , '인천스마트' , 3551.0 , '대인' , '가해' , '승차' , 100.0 , '0' , '진행' , '경찰신고 / 합의 조율중' , '하늘마을정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
24:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2022-11-04' , '5-1번' , '오정택' , '13:38:00' , '인천스마트' , 3645.0 , '자차,대인' , '피해' , '측면충돌 (현대구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상청구' , '학익2동 행정복지센터 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
25:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-17' , '21번' , '박인서' , '13:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리비 입금' , '현대시장 정류장' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
26:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-21' , '38번' , '윤세호' , '12:21:00' , '인천스마트' , 3549.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '빽밀러 파손 / 30입금' , '구월동 우리은행사거리' , '0' , 300000.0 , 300000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
27:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-22' , '21번' , '허선균' , '08:31:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '하나손해 / 수리예정' , '경인지방노동청 입구' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
28:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-06' , '5번' , '최정수' , '00:35:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '기타' , '0' , 100.0 , '종결' , '수리비 15 입금' , '연안부두 차고지' , '0' , 150000.0 , 150000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
29:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-06' , '27번' , '백종필' , '20:25:00' , '인천스마트' , 3659.0 , '자차, 승객' , '피해' , '측면충돌' , 10.0 , 90.0 , '종결' , '삼성접수/수리비 70입금' , '주적골삼거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
30:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-09' , '5번' , '김성취' , '19:19:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 35입금' , '임광그대로가 103동 앞' , '0' , 350000.0 , 350000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
31:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-10' , '5번' , '한태전' , '21:13:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '종결' , 'DB접수 / 수리비 70입금' , '문학 목우촌 앞' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
32:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-13' , '27번' , '임인복' , '20:31:00' , '인천스마트' , 7123.0 , '자차' , '피해' , '측면충돌' , 10.0 , 90.0 , '진행' , '렌트공제/ 과실 9:1확정' , '항동 SK주유소 앞' , '0' , 1599300.0 , 1599300.0 , 818000.0 , 500000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
33:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-15' , '5번' , '김도근' , '23:50:00' , '인천스마트' , 3621.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '연안부두 차고지' , '0' , 250000.0 , 250000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
34:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-16' , '5번' , '임충환' , '14:40:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 50입금' , '토지금고 굴다리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
35:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-18' , '5-1번' , '박정배' , '11:20:00' , '인천스마트' , 3644.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 /수리예정' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
36:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-19' , '20번' , '김동회' , '12:27:00' , '인천스마트' , 3504.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '현대 접수/수리비 50입금' , '동방중학교 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
37:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-15' , '38번' , '윤세호' , '19:51:00' , '인천스마트' , 3553.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '김명희(78세,여)/120 회사처리' , '윤성아파트 앞' , '0' , '0' , '0' , 1200000.0 , 1200000.0 , '0' , 1200000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
38:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-21' , '5번' , '자선호' , '19:43:00' , '인천스마트' , 3622.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 입급' , '롯데백화점 사거리' , '0' , 800000.0 , 800000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
39:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-21' , '5번' , '김요섭' , '21:00:00' , '인천스마트' , 3632.0 , '자차,대인' , '쌍피' , '측면충돌' , 40.0 , 60.0 , '종결' , '차량 각 처리, 승객 상대처리' , '선수촌아파트 입구 회전교차로' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
40:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-23' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
41:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-23' , '27번' , '김용문' , '15:50:00' , '인천스마트' , 3641.0 , '대인' , '가해' , ' 문 끼임사고' , 100.0 , '0' , '종결' , '합의금(박순예)60지급' , '인하대역 1번출구' , '0' , '0' , '0' , 600000.0 , '0' , '0' , 600000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
42:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '인호덕' , '10:45:00' , '인천스마트' , 3676.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리완료' , '도림동고개' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
43:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '이용재' , '16:06:00' , '인천스마트' , 3637.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB / 수리비 70입금' , '논현역사거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
44:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '삼성접수/신고예정' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
45:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '이용일' , '14:31:00' , '인천스마트' , 3634.0 , '대인' , '가해' , '개문발차' , 100.0 , '0' , '종결' , '공제접수' , '한신휴아파트 정류장' , '0' , '0' , '0' , 2710000.0 , '0' , '0' , 2710000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
46:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-28' , '21번' , '조성훈' , '23:05:00' , '인천스마트' , 3563.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '종결' , '대인X, 대물 90회사합의' , '롯데백화점 사거리' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
47:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-31' , '21번' , '유병수' , '07:30:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '한화 / 수리비 60입금' , '서창중 정류장' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
48:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-04' , '20번' , '이형규' , '20:05:00' , '인천스마트' , 3505.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25만 입금' , '인평고 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
49:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '27번' , '윤병진' , '09:31:00' , '인천스마트' , 7122.0 , '자차' , '피해' , '측면충돌' , '무과실 주장' , 80.0 , '진행' , 'DB접수 / 과실협의중' , '토지금고시장 입구 삼거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
50:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '20번' , '임재준' , '12:05:00' , '인천스마트' , 3574.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '공제접수' , '남촌동입구 정류장' , '0' , '0' , '0' , 1700000.0 , '0' , '0' , 1700000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
51:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '27번' , '이승수' , '13:06:00' , '인천스마트' , 3640.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 60입금' , '주적골 삼거리' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
52:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-06' , '27번' , '이용일' , '10:44:00' , '인천스마트' , 3634.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , 'KB / 수리비입금예정' , '용현고가교' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
53:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-10' , '20번' , '김동회' , '10:30:00' , '인천스마트' , 3504.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '50 합의' , '모래내시장전 사거리' , '0' , '0' , '0' , 500000.0 , '0' , '0' , 500000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
54:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-10' , '38번' , '박정훈' , '16:30:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금 ' , '경인식약청 앞' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
55:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-11' , '38번' , '김승배' , '14:02:00' , '인천스마트' , 3550.0 , '인,물피' , '쌍피' , '측면충돌' , 60.0 , 40.0 , '진행' , '현대접수 / 공제접수' , '신기사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
56:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-13' , '38번' , '장명근' , '14:57:00' , '인천스마트' , 3553.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금' , '소래포구역 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
57:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-14' , '5번' , '임충환' , '15:42:00' , '인천스마트' , 3632.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '공제접수' , '서창119안전센터 앞' , '0' , '0' , '0' , '0' , 1152880.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
58:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-16' , '5-1번' , '이택선' , '16:40:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '명보주유소 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
59:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-18' , '20번' , '손신영' , '16:52:00' , '인천스마트' , 3565.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '진행' , '공제접수' , '태화아파트 정류장 전' , '0' , '0' , '0' , 818000.0 , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
60:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-19' , '5-1번' , '이덕길' , '15:33:00' , '인천스마트' , 3648.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사 접수 / 수리완료' , '신기시장 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
61:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-22' , '5번' , '장남균' , '23:42:00' , '인천스마트' , 3631.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB / 수리완료' , '신선초교 사거리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
62:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2018-08-16' , '27번' , '정재철' , '20:00:00' , '인천스마트' , 3633.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '무과실 주장' , 100.0 , '진행' , '현대 선처리후 구상청구' , '논현동 소래풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
63:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-28' , '38번' , '이정성' , '07:03:00' , '인천스마트' , 3546.0 , '대인,대물,자차' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수' , '남동경찰서 사거리' , '0' , '0' , '0' , '0' , 660000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
64:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-04' , '38번' , '유종각' , '12:41:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '차내전도' , 50.0 , 50.0 , '종결' , '80 합의, 경찰신고' , '토지금고시장 사거리' , '0' , '0' , '0' , 800000.0 , '0' , '0' , 800000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
65:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-05' , '27번' , '이용재B' , '11:23:00' , '인천스마트' , 3639.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '빽밀러 파손 / 공제접수' , '신선초교 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
66:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-06' , '38번' , '이경환' , '13:53:00' , '인천스마트' , 3551.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수' , '관교동 풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , 212828.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
67:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '20번' , '박준용' , '11:32:00' , '인천스마트' , 3053.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '공제접수 / 수리완료' , '하늘마을3단지 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
68:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '5-1번' , '박덕환' , '11:48:00' , '인천스마트' , 3648.0 , '대믈' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수 / 대물' , '토지금고시장 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
69:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '21번' , '유종선' , '13:50:00' , '인천스마트' , 3626.0 , '대인' , '피해' , '비접촉' , '0' , 100.0 , '종결' , '승객 DB접수처리' , '석바위사거리 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
70:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-11' , '27번' , '이용재B' , '09:23:00' , '인천스마트' , 3639.0 , '자차' , '피해' , '접촉' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '롯데백화점 건너 정류장' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
71:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-12' , '5번' , '양광일 ' , '22:44:00' , '인천스마트' , 3629.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 / 수리예정' , '토지금고시장 사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
72:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-15' , '21번' , '노주성' , '10:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '진행' , 'KB접수 / 수리예정' , '서창도서관 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
73:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-16' , '5-1번' , '권태종' , '21:52:00' , '인천스마트' , 3647.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '공제접수 / 대물' , '주안역 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 12 msec}
2023-06-29 21:36:39.867 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:36:39.867 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:36:39.867 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:36:39.869 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:36:39.872 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 21:41:18.158 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:41:18.158 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:41:18.158 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:41:18.159 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:41:18.162 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:41:18.165 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:42:03.492 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:42:03.500 INFO  [http-nio-10010-exec-8] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , :acc_date , :route_nm , :emp_nm , :acc_time , :company_nm , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-06-29 21:42:03.510 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:42:03.510 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:42:03.510 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:42:03.511 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
15. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:42:03.514 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:42:03.517 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:45:15.578 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:45:15.578 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:45:15.578 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:45:15.579 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
15. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:45:15.583 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:45:15.585 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:46:19.468 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:46:19.469 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:46:19.469 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:46:19.469 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
15. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:46:19.472 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:46:19.474 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:46:48.133 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:46:48.133 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:46:48.133 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:46:48.146 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
15. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 11 msec}
2023-06-29 21:46:48.149 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:46:48.152 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:47:27.595 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:47:27.595 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:47:27.595 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:47:27.596 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
15. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:47:27.599 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:47:27.601 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:47:41.942 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:47:41.942 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:47:41.942 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:47:41.943 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
15. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:47:41.945 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:47:41.948 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:48:09.098 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:48:09.098 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:48:09.098 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:48:09.099 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
15. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:48:09.101 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:48:09.104 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:50:27.256 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:50:27.257 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:50:27.257 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:50:27.257 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
15. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:50:27.260 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:50:27.263 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:50:54.492 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:50:54.492 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:50:54.493 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:50:54.493 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
15. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:50:54.496 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:50:54.499 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 21:51:18.166 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:51:18.167 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:51:18.167 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:51:18.168 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
15. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:51:18.170 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 21:51:18.172 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:51:41.265 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:51:41.265 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:51:41.265 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:51:41.266 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
15. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:51:41.268 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:51:41.271 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:54:14.256 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:54:14.256 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:54:14.256 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:54:14.257 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:54:14.260 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:54:14.263 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:55:00.432 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:55:00.432 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:55:00.433 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:55:00.433 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:55:00.436 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:55:00.440 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:56:20.626 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:56:20.626 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:56:20.627 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:56:20.627 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:56:20.631 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 4 msec}
2023-06-29 21:56:20.634 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:56:28.634 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:56:28.640 INFO  [http-nio-10010-exec-4] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , :acc_date , :route_nm , :emp_nm , :acc_time , :company_nm , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-06-29 21:56:28.641 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:56:28.662 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
24. batching 73 statements:
 1:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-06' , '20번' , '김종국' , '09:24:00' , '인천스마트' , 3573.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'DB / 수리비입금' , '논현주공 13단지 앞' , '0' , 908520.0 , 908520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 2:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-06' , '5-1번' , '이택선' , '18:28:00' , '인천스마트' , 3643.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '전세버스 / 수리완료' , '주안역 환승장' , '0' , 86820.0 , 86820.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 3:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-07' , '38번' , '채종두' , '12:45:00' , '인천스마트' , 3551.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '대물 90 / 회사처리' , '주안역 앞' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 4:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-08' , '38번' , '윤세호' , '14:41:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '서창캠핑장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 5:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-13' , '21번' , '심기섭' , '15:26:00' , '인천스마트' , 3625.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '예술회관 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 6:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-15' , '27번' , '임인복' , '22:32:00' , '인천스마트' , 3638.0 , '자차' , '자피' , '시설물 충격' , 100.0 , '0' , '종결' , '회사 자체 수리' , '남동중학교 정류장' , '0' , '0' , '0' , '0' , '0' , 172720.0 , 172720.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 7:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-18' , '38번' , '고상욱' , '13:59:00' , '인천스마트' , 3552.0 , '자차' , '피해' , '측면충돌' , '10(무과실주장)' , 90.0 , '종결' , '삼성접수 / 수리비 50입금' , '하늘마을앞 사거리' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 8:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-19' , '21번' , '이용진' , '06:57:00' , '인천스마트' , 3623.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 삼공수리' , '매소홀터널 앞' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 9:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-24' , '20번' , '서수찬' , '09:54:00' , '인천스마트' , 3506.0 , '대물,자차' , '가해' , '시설물 충격' , 100.0 , '0' , '종결' , '공제접수 / 가로등,가로수' , '선수촌5단지 앞' , '0' , '0' , '0' , '0' , 4892800.0 , 4609000.0 , 9501800.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
10:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-26' , '5--번' , '신경식' , '16:27:00' , '인천스마트' , 3646.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '미추홀서경찰관/각자수리' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
11:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-27' , '5-1번' , '남기선' , '20:25:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '수리비 40 입금' , '대림아파트 정류장' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
12:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-29' , '38번' , '박정훈' , '12:16:00' , '인천스마트' , 3575.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리비 50입금' , '독정이고개' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
13:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-02' , '27번' , '전정훈' , '07:11:00' , '인천스마트' , 7125.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 40 입금완료' , '신선초교 앞 공사장 입구' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
14:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-04' , '5-1번' , '남기선' , '07:00:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB접수/수리비 입금' , '소방본부 정류장' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
15:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2020-01-21' , '27번' , '홍성운' , '10:29:00' , '인천스마트' , 3676.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상 청구' , '주안1동성당 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
16:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-06' , '38번' , '최병국' , '09:46:00' , '인천스마트' , 3576.0 , '자차' , '피해' , '측면충돌' , '20 (무과실 주장)' , 80.0 , '종결' , 'KB접수 / 수리비 입금' , '새안의원 앞' , '0' , 900000.0 , 900000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
17:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-06' , '27번' , '권병묵' , '18:15:00' , '인천스마트' , 3638.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'DB접수 / 수리비 입금' , '논현사거리 정류장' , '0' , 398520.0 , 398520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
18:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-05' , '5-1번' , '남기선' , '13:50:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '기타' , 100.0 , '0' , '종결' , '피해자 김복순 30합의' , '주안7동행정복지센터 정류장' , '0' , '0' , '0' , 300000.0 , '0' , '0' , 300000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
19:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '20번' , '이종식' , '10:18:00' , '인천스마트' , 3556.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수(대인,대물)' , '논현주공14단지 앞' , '0' , '0' , '0' , 1339560.0 , 9717620.0 , 2863454.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
20:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '38번' , '박근호' , '08:35:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '롯데접수 / 수리완료' , '전재울사거리' , '0' , 108000.0 , 108000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
21:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '21번' , '허선균' , '13:37:00' , '인천스마트' , 3562.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '대인X, 대물 공제접수' , '도화고가 앞' , '0' , '0' , '0' , '0' , 1800000.0 , 103400.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
22:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-09' , '38번' , '박근호' , '13:38:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB접수/수리완료' , '세일빌라 입구' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
23:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-09' , '38번' , '장길영' , '12:44:00' , '인천스마트' , 3551.0 , '대인' , '가해' , '승차' , 100.0 , '0' , '진행' , '경찰신고 / 합의 조율중' , '하늘마을정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
24:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2022-11-04' , '5-1번' , '오정택' , '13:38:00' , '인천스마트' , 3645.0 , '자차,대인' , '피해' , '측면충돌 (현대구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상청구' , '학익2동 행정복지센터 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
25:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-17' , '21번' , '박인서' , '13:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리비 입금' , '현대시장 정류장' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
26:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-21' , '38번' , '윤세호' , '12:21:00' , '인천스마트' , 3549.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '빽밀러 파손 / 30입금' , '구월동 우리은행사거리' , '0' , 300000.0 , 300000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
27:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-22' , '21번' , '허선균' , '08:31:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '하나손해 / 수리예정' , '경인지방노동청 입구' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
28:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-06' , '5번' , '최정수' , '00:35:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '기타' , '0' , 100.0 , '종결' , '수리비 15 입금' , '연안부두 차고지' , '0' , 150000.0 , 150000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
29:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-06' , '27번' , '백종필' , '20:25:00' , '인천스마트' , 3659.0 , '자차, 승객' , '피해' , '측면충돌' , 10.0 , 90.0 , '종결' , '삼성접수/수리비 70입금' , '주적골삼거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
30:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-09' , '5번' , '김성취' , '19:19:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 35입금' , '임광그대로가 103동 앞' , '0' , 350000.0 , 350000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
31:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-10' , '5번' , '한태전' , '21:13:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '종결' , 'DB접수 / 수리비 70입금' , '문학 목우촌 앞' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
32:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-13' , '27번' , '임인복' , '20:31:00' , '인천스마트' , 7123.0 , '자차' , '피해' , '측면충돌' , 10.0 , 90.0 , '진행' , '렌트공제/ 과실 9:1확정' , '항동 SK주유소 앞' , '0' , 1599300.0 , 1599300.0 , 818000.0 , 500000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
33:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-15' , '5번' , '김도근' , '23:50:00' , '인천스마트' , 3621.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '연안부두 차고지' , '0' , 250000.0 , 250000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
34:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-16' , '5번' , '임충환' , '14:40:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 50입금' , '토지금고 굴다리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
35:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-18' , '5-1번' , '박정배' , '11:20:00' , '인천스마트' , 3644.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 /수리예정' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
36:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-19' , '20번' , '김동회' , '12:27:00' , '인천스마트' , 3504.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '현대 접수/수리비 50입금' , '동방중학교 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
37:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-15' , '38번' , '윤세호' , '19:51:00' , '인천스마트' , 3553.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '김명희(78세,여)/120 회사처리' , '윤성아파트 앞' , '0' , '0' , '0' , 1200000.0 , 1200000.0 , '0' , 1200000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
38:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-21' , '5번' , '자선호' , '19:43:00' , '인천스마트' , 3622.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 입급' , '롯데백화점 사거리' , '0' , 800000.0 , 800000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
39:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-21' , '5번' , '김요섭' , '21:00:00' , '인천스마트' , 3632.0 , '자차,대인' , '쌍피' , '측면충돌' , 40.0 , 60.0 , '종결' , '차량 각 처리, 승객 상대처리' , '선수촌아파트 입구 회전교차로' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
40:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-23' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
41:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-23' , '27번' , '김용문' , '15:50:00' , '인천스마트' , 3641.0 , '대인' , '가해' , ' 문 끼임사고' , 100.0 , '0' , '종결' , '합의금(박순예)60지급' , '인하대역 1번출구' , '0' , '0' , '0' , 600000.0 , '0' , '0' , 600000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
42:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '인호덕' , '10:45:00' , '인천스마트' , 3676.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리완료' , '도림동고개' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
43:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '이용재' , '16:06:00' , '인천스마트' , 3637.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB / 수리비 70입금' , '논현역사거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
44:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '삼성접수/신고예정' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
45:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '이용일' , '14:31:00' , '인천스마트' , 3634.0 , '대인' , '가해' , '개문발차' , 100.0 , '0' , '종결' , '공제접수' , '한신휴아파트 정류장' , '0' , '0' , '0' , 2710000.0 , '0' , '0' , 2710000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
46:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-28' , '21번' , '조성훈' , '23:05:00' , '인천스마트' , 3563.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '종결' , '대인X, 대물 90회사합의' , '롯데백화점 사거리' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
47:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-31' , '21번' , '유병수' , '07:30:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '한화 / 수리비 60입금' , '서창중 정류장' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
48:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-04' , '20번' , '이형규' , '20:05:00' , '인천스마트' , 3505.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25만 입금' , '인평고 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
49:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '27번' , '윤병진' , '09:31:00' , '인천스마트' , 7122.0 , '자차' , '피해' , '측면충돌' , '무과실 주장' , 80.0 , '진행' , 'DB접수 / 과실협의중' , '토지금고시장 입구 삼거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
50:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '20번' , '임재준' , '12:05:00' , '인천스마트' , 3574.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '공제접수' , '남촌동입구 정류장' , '0' , '0' , '0' , 1700000.0 , '0' , '0' , 1700000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
51:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '27번' , '이승수' , '13:06:00' , '인천스마트' , 3640.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 60입금' , '주적골 삼거리' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
52:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-06' , '27번' , '이용일' , '10:44:00' , '인천스마트' , 3634.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , 'KB / 수리비입금예정' , '용현고가교' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
53:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-10' , '20번' , '김동회' , '10:30:00' , '인천스마트' , 3504.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '50 합의' , '모래내시장전 사거리' , '0' , '0' , '0' , 500000.0 , '0' , '0' , 500000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
54:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-10' , '38번' , '박정훈' , '16:30:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금 ' , '경인식약청 앞' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
55:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-11' , '38번' , '김승배' , '14:02:00' , '인천스마트' , 3550.0 , '인,물피' , '쌍피' , '측면충돌' , 60.0 , 40.0 , '진행' , '현대접수 / 공제접수' , '신기사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
56:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-13' , '38번' , '장명근' , '14:57:00' , '인천스마트' , 3553.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금' , '소래포구역 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
57:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-14' , '5번' , '임충환' , '15:42:00' , '인천스마트' , 3632.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '공제접수' , '서창119안전센터 앞' , '0' , '0' , '0' , '0' , 1152880.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
58:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-16' , '5-1번' , '이택선' , '16:40:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '명보주유소 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
59:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-18' , '20번' , '손신영' , '16:52:00' , '인천스마트' , 3565.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '진행' , '공제접수' , '태화아파트 정류장 전' , '0' , '0' , '0' , 818000.0 , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
60:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-19' , '5-1번' , '이덕길' , '15:33:00' , '인천스마트' , 3648.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사 접수 / 수리완료' , '신기시장 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
61:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-22' , '5번' , '장남균' , '23:42:00' , '인천스마트' , 3631.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB / 수리완료' , '신선초교 사거리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
62:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2018-08-16' , '27번' , '정재철' , '20:00:00' , '인천스마트' , 3633.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '무과실 주장' , 100.0 , '진행' , '현대 선처리후 구상청구' , '논현동 소래풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
63:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-28' , '38번' , '이정성' , '07:03:00' , '인천스마트' , 3546.0 , '대인,대물,자차' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수' , '남동경찰서 사거리' , '0' , '0' , '0' , '0' , 660000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
64:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-04' , '38번' , '유종각' , '12:41:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '차내전도' , 50.0 , 50.0 , '종결' , '80 합의, 경찰신고' , '토지금고시장 사거리' , '0' , '0' , '0' , 800000.0 , '0' , '0' , 800000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
65:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-05' , '27번' , '이용재B' , '11:23:00' , '인천스마트' , 3639.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '빽밀러 파손 / 공제접수' , '신선초교 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
66:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-06' , '38번' , '이경환' , '13:53:00' , '인천스마트' , 3551.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수' , '관교동 풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , 212828.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
67:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '20번' , '박준용' , '11:32:00' , '인천스마트' , 3053.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '공제접수 / 수리완료' , '하늘마을3단지 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
68:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '5-1번' , '박덕환' , '11:48:00' , '인천스마트' , 3648.0 , '대믈' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수 / 대물' , '토지금고시장 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
69:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '21번' , '유종선' , '13:50:00' , '인천스마트' , 3626.0 , '대인' , '피해' , '비접촉' , '0' , 100.0 , '종결' , '승객 DB접수처리' , '석바위사거리 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
70:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-11' , '27번' , '이용재B' , '09:23:00' , '인천스마트' , 3639.0 , '자차' , '피해' , '접촉' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '롯데백화점 건너 정류장' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
71:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-12' , '5번' , '양광일 ' , '22:44:00' , '인천스마트' , 3629.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 / 수리예정' , '토지금고시장 사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
72:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-15' , '21번' , '노주성' , '10:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '진행' , 'KB접수 / 수리예정' , '서창도서관 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
73:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-16' , '5-1번' , '권태종' , '21:52:00' , '인천스마트' , 3647.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '공제접수 / 대물' , '주안역 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 15 msec}
2023-06-29 21:56:28.699 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:56:28.699 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:56:28.699 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:56:28.702 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:56:28.705 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 21:57:16.965 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:57:16.966 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:57:16.966 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:57:16.966 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:57:16.969 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:57:16.971 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:57:21.170 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:57:21.177 INFO  [http-nio-10010-exec-4] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , :acc_date , :route_nm , :emp_nm , :acc_time , :company_nm , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-06-29 21:57:21.179 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
25. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:57:21.195 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
25. batching 73 statements:
 1:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-06' , '20번' , '김종국' , '09:24:00' , '인천스마트' , 3573.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'DB / 수리비입금' , '논현주공 13단지 앞' , '0' , 908520.0 , 908520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 2:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-06' , '5-1번' , '이택선' , '18:28:00' , '인천스마트' , 3643.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '전세버스 / 수리완료' , '주안역 환승장' , '0' , 86820.0 , 86820.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 3:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-07' , '38번' , '채종두' , '12:45:00' , '인천스마트' , 3551.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '대물 90 / 회사처리' , '주안역 앞' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 4:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-08' , '38번' , '윤세호' , '14:41:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '서창캠핑장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 5:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-13' , '21번' , '심기섭' , '15:26:00' , '인천스마트' , 3625.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '예술회관 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 6:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-15' , '27번' , '임인복' , '22:32:00' , '인천스마트' , 3638.0 , '자차' , '자피' , '시설물 충격' , 100.0 , '0' , '종결' , '회사 자체 수리' , '남동중학교 정류장' , '0' , '0' , '0' , '0' , '0' , 172720.0 , 172720.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 7:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-18' , '38번' , '고상욱' , '13:59:00' , '인천스마트' , 3552.0 , '자차' , '피해' , '측면충돌' , '10(무과실주장)' , 90.0 , '종결' , '삼성접수 / 수리비 50입금' , '하늘마을앞 사거리' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 8:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-19' , '21번' , '이용진' , '06:57:00' , '인천스마트' , 3623.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 삼공수리' , '매소홀터널 앞' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 9:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-24' , '20번' , '서수찬' , '09:54:00' , '인천스마트' , 3506.0 , '대물,자차' , '가해' , '시설물 충격' , 100.0 , '0' , '종결' , '공제접수 / 가로등,가로수' , '선수촌5단지 앞' , '0' , '0' , '0' , '0' , 4892800.0 , 4609000.0 , 9501800.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
10:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-26' , '5--번' , '신경식' , '16:27:00' , '인천스마트' , 3646.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '미추홀서경찰관/각자수리' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
11:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-27' , '5-1번' , '남기선' , '20:25:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '수리비 40 입금' , '대림아파트 정류장' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
12:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-29' , '38번' , '박정훈' , '12:16:00' , '인천스마트' , 3575.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리비 50입금' , '독정이고개' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
13:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-02' , '27번' , '전정훈' , '07:11:00' , '인천스마트' , 7125.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 40 입금완료' , '신선초교 앞 공사장 입구' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
14:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-04' , '5-1번' , '남기선' , '07:00:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB접수/수리비 입금' , '소방본부 정류장' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
15:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2020-01-21' , '27번' , '홍성운' , '10:29:00' , '인천스마트' , 3676.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상 청구' , '주안1동성당 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
16:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-06' , '38번' , '최병국' , '09:46:00' , '인천스마트' , 3576.0 , '자차' , '피해' , '측면충돌' , '20 (무과실 주장)' , 80.0 , '종결' , 'KB접수 / 수리비 입금' , '새안의원 앞' , '0' , 900000.0 , 900000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
17:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-06' , '27번' , '권병묵' , '18:15:00' , '인천스마트' , 3638.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'DB접수 / 수리비 입금' , '논현사거리 정류장' , '0' , 398520.0 , 398520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
18:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-05' , '5-1번' , '남기선' , '13:50:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '기타' , 100.0 , '0' , '종결' , '피해자 김복순 30합의' , '주안7동행정복지센터 정류장' , '0' , '0' , '0' , 300000.0 , '0' , '0' , 300000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
19:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '20번' , '이종식' , '10:18:00' , '인천스마트' , 3556.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수(대인,대물)' , '논현주공14단지 앞' , '0' , '0' , '0' , 1339560.0 , 9717620.0 , 2863454.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
20:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '38번' , '박근호' , '08:35:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '롯데접수 / 수리완료' , '전재울사거리' , '0' , 108000.0 , 108000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
21:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '21번' , '허선균' , '13:37:00' , '인천스마트' , 3562.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '대인X, 대물 공제접수' , '도화고가 앞' , '0' , '0' , '0' , '0' , 1800000.0 , 103400.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
22:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-09' , '38번' , '박근호' , '13:38:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB접수/수리완료' , '세일빌라 입구' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
23:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-09' , '38번' , '장길영' , '12:44:00' , '인천스마트' , 3551.0 , '대인' , '가해' , '승차' , 100.0 , '0' , '진행' , '경찰신고 / 합의 조율중' , '하늘마을정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
24:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2022-11-04' , '5-1번' , '오정택' , '13:38:00' , '인천스마트' , 3645.0 , '자차,대인' , '피해' , '측면충돌 (현대구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상청구' , '학익2동 행정복지센터 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
25:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-17' , '21번' , '박인서' , '13:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리비 입금' , '현대시장 정류장' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
26:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-21' , '38번' , '윤세호' , '12:21:00' , '인천스마트' , 3549.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '빽밀러 파손 / 30입금' , '구월동 우리은행사거리' , '0' , 300000.0 , 300000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
27:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-22' , '21번' , '허선균' , '08:31:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '하나손해 / 수리예정' , '경인지방노동청 입구' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
28:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-06' , '5번' , '최정수' , '00:35:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '기타' , '0' , 100.0 , '종결' , '수리비 15 입금' , '연안부두 차고지' , '0' , 150000.0 , 150000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
29:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-06' , '27번' , '백종필' , '20:25:00' , '인천스마트' , 3659.0 , '자차, 승객' , '피해' , '측면충돌' , 10.0 , 90.0 , '종결' , '삼성접수/수리비 70입금' , '주적골삼거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
30:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-09' , '5번' , '김성취' , '19:19:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 35입금' , '임광그대로가 103동 앞' , '0' , 350000.0 , 350000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
31:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-10' , '5번' , '한태전' , '21:13:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '종결' , 'DB접수 / 수리비 70입금' , '문학 목우촌 앞' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
32:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-13' , '27번' , '임인복' , '20:31:00' , '인천스마트' , 7123.0 , '자차' , '피해' , '측면충돌' , 10.0 , 90.0 , '진행' , '렌트공제/ 과실 9:1확정' , '항동 SK주유소 앞' , '0' , 1599300.0 , 1599300.0 , 818000.0 , 500000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
33:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-15' , '5번' , '김도근' , '23:50:00' , '인천스마트' , 3621.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '연안부두 차고지' , '0' , 250000.0 , 250000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
34:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-16' , '5번' , '임충환' , '14:40:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 50입금' , '토지금고 굴다리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
35:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-18' , '5-1번' , '박정배' , '11:20:00' , '인천스마트' , 3644.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 /수리예정' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
36:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-19' , '20번' , '김동회' , '12:27:00' , '인천스마트' , 3504.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '현대 접수/수리비 50입금' , '동방중학교 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
37:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-15' , '38번' , '윤세호' , '19:51:00' , '인천스마트' , 3553.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '김명희(78세,여)/120 회사처리' , '윤성아파트 앞' , '0' , '0' , '0' , 1200000.0 , 1200000.0 , '0' , 1200000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
38:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-21' , '5번' , '자선호' , '19:43:00' , '인천스마트' , 3622.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 입급' , '롯데백화점 사거리' , '0' , 800000.0 , 800000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
39:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-21' , '5번' , '김요섭' , '21:00:00' , '인천스마트' , 3632.0 , '자차,대인' , '쌍피' , '측면충돌' , 40.0 , 60.0 , '종결' , '차량 각 처리, 승객 상대처리' , '선수촌아파트 입구 회전교차로' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
40:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-23' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
41:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-23' , '27번' , '김용문' , '15:50:00' , '인천스마트' , 3641.0 , '대인' , '가해' , ' 문 끼임사고' , 100.0 , '0' , '종결' , '합의금(박순예)60지급' , '인하대역 1번출구' , '0' , '0' , '0' , 600000.0 , '0' , '0' , 600000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
42:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '인호덕' , '10:45:00' , '인천스마트' , 3676.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리완료' , '도림동고개' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
43:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '이용재' , '16:06:00' , '인천스마트' , 3637.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB / 수리비 70입금' , '논현역사거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
44:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '삼성접수/신고예정' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
45:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '이용일' , '14:31:00' , '인천스마트' , 3634.0 , '대인' , '가해' , '개문발차' , 100.0 , '0' , '종결' , '공제접수' , '한신휴아파트 정류장' , '0' , '0' , '0' , 2710000.0 , '0' , '0' , 2710000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
46:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-28' , '21번' , '조성훈' , '23:05:00' , '인천스마트' , 3563.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '종결' , '대인X, 대물 90회사합의' , '롯데백화점 사거리' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
47:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-31' , '21번' , '유병수' , '07:30:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '한화 / 수리비 60입금' , '서창중 정류장' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
48:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-04' , '20번' , '이형규' , '20:05:00' , '인천스마트' , 3505.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25만 입금' , '인평고 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
49:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '27번' , '윤병진' , '09:31:00' , '인천스마트' , 7122.0 , '자차' , '피해' , '측면충돌' , '무과실 주장' , 80.0 , '진행' , 'DB접수 / 과실협의중' , '토지금고시장 입구 삼거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
50:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '20번' , '임재준' , '12:05:00' , '인천스마트' , 3574.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '공제접수' , '남촌동입구 정류장' , '0' , '0' , '0' , 1700000.0 , '0' , '0' , 1700000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
51:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '27번' , '이승수' , '13:06:00' , '인천스마트' , 3640.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 60입금' , '주적골 삼거리' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
52:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-06' , '27번' , '이용일' , '10:44:00' , '인천스마트' , 3634.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , 'KB / 수리비입금예정' , '용현고가교' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
53:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-10' , '20번' , '김동회' , '10:30:00' , '인천스마트' , 3504.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '50 합의' , '모래내시장전 사거리' , '0' , '0' , '0' , 500000.0 , '0' , '0' , 500000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
54:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-10' , '38번' , '박정훈' , '16:30:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금 ' , '경인식약청 앞' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
55:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-11' , '38번' , '김승배' , '14:02:00' , '인천스마트' , 3550.0 , '인,물피' , '쌍피' , '측면충돌' , 60.0 , 40.0 , '진행' , '현대접수 / 공제접수' , '신기사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
56:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-13' , '38번' , '장명근' , '14:57:00' , '인천스마트' , 3553.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금' , '소래포구역 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
57:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-14' , '5번' , '임충환' , '15:42:00' , '인천스마트' , 3632.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '공제접수' , '서창119안전센터 앞' , '0' , '0' , '0' , '0' , 1152880.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
58:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-16' , '5-1번' , '이택선' , '16:40:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '명보주유소 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
59:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-18' , '20번' , '손신영' , '16:52:00' , '인천스마트' , 3565.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '진행' , '공제접수' , '태화아파트 정류장 전' , '0' , '0' , '0' , 818000.0 , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
60:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-19' , '5-1번' , '이덕길' , '15:33:00' , '인천스마트' , 3648.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사 접수 / 수리완료' , '신기시장 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
61:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-22' , '5번' , '장남균' , '23:42:00' , '인천스마트' , 3631.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB / 수리완료' , '신선초교 사거리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
62:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2018-08-16' , '27번' , '정재철' , '20:00:00' , '인천스마트' , 3633.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '무과실 주장' , 100.0 , '진행' , '현대 선처리후 구상청구' , '논현동 소래풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
63:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-28' , '38번' , '이정성' , '07:03:00' , '인천스마트' , 3546.0 , '대인,대물,자차' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수' , '남동경찰서 사거리' , '0' , '0' , '0' , '0' , 660000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
64:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-04' , '38번' , '유종각' , '12:41:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '차내전도' , 50.0 , 50.0 , '종결' , '80 합의, 경찰신고' , '토지금고시장 사거리' , '0' , '0' , '0' , 800000.0 , '0' , '0' , 800000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
65:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-05' , '27번' , '이용재B' , '11:23:00' , '인천스마트' , 3639.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '빽밀러 파손 / 공제접수' , '신선초교 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
66:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-06' , '38번' , '이경환' , '13:53:00' , '인천스마트' , 3551.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수' , '관교동 풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , 212828.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
67:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '20번' , '박준용' , '11:32:00' , '인천스마트' , 3053.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '공제접수 / 수리완료' , '하늘마을3단지 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
68:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '5-1번' , '박덕환' , '11:48:00' , '인천스마트' , 3648.0 , '대믈' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수 / 대물' , '토지금고시장 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
69:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '21번' , '유종선' , '13:50:00' , '인천스마트' , 3626.0 , '대인' , '피해' , '비접촉' , '0' , 100.0 , '종결' , '승객 DB접수처리' , '석바위사거리 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
70:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-11' , '27번' , '이용재B' , '09:23:00' , '인천스마트' , 3639.0 , '자차' , '피해' , '접촉' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '롯데백화점 건너 정류장' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
71:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-12' , '5번' , '양광일 ' , '22:44:00' , '인천스마트' , 3629.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 / 수리예정' , '토지금고시장 사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
72:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-15' , '21번' , '노주성' , '10:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '진행' , 'KB접수 / 수리예정' , '서창도서관 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
73:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-16' , '5-1번' , '권태종' , '21:52:00' , '인천스마트' , 3647.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '공제접수 / 대물' , '주안역 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 12 msec}
2023-06-29 21:57:21.209 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:57:21.209 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:57:21.209 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:57:21.212 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
25. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:57:21.215 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
25. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:57:25.680 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:57:25.680 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:57:25.680 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:57:25.681 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
25. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:57:25.683 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
25. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:57:25.686 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
25. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:57:41.546 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:57:41.546 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:57:41.546 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:57:41.547 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
25. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:57:41.549 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
25. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:57:41.553 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
25. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:58:18.157 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:58:18.157 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:58:18.157 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:58:18.158 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
25. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:58:18.161 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
25. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:58:18.164 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
25. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:58:23.604 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
25. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:58:23.611 INFO  [http-nio-10010-exec-3] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , :acc_date , :route_nm , :emp_nm , :acc_time , :company_nm , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-06-29 21:58:23.612 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
26. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:58:23.629 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
26. batching 73 statements:
 1:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-06' , '20번' , '김종국' , '09:24:00' , '인천스마트' , 3573.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'DB / 수리비입금' , '논현주공 13단지 앞' , '0' , 908520.0 , 908520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 2:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-06' , '5-1번' , '이택선' , '18:28:00' , '인천스마트' , 3643.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '전세버스 / 수리완료' , '주안역 환승장' , '0' , 86820.0 , 86820.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 3:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-07' , '38번' , '채종두' , '12:45:00' , '인천스마트' , 3551.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '대물 90 / 회사처리' , '주안역 앞' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 4:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-08' , '38번' , '윤세호' , '14:41:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '서창캠핑장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 5:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-13' , '21번' , '심기섭' , '15:26:00' , '인천스마트' , 3625.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '예술회관 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 6:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-15' , '27번' , '임인복' , '22:32:00' , '인천스마트' , 3638.0 , '자차' , '자피' , '시설물 충격' , 100.0 , '0' , '종결' , '회사 자체 수리' , '남동중학교 정류장' , '0' , '0' , '0' , '0' , '0' , 172720.0 , 172720.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 7:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-18' , '38번' , '고상욱' , '13:59:00' , '인천스마트' , 3552.0 , '자차' , '피해' , '측면충돌' , '10(무과실주장)' , 90.0 , '종결' , '삼성접수 / 수리비 50입금' , '하늘마을앞 사거리' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 8:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-19' , '21번' , '이용진' , '06:57:00' , '인천스마트' , 3623.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 삼공수리' , '매소홀터널 앞' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 9:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-24' , '20번' , '서수찬' , '09:54:00' , '인천스마트' , 3506.0 , '대물,자차' , '가해' , '시설물 충격' , 100.0 , '0' , '종결' , '공제접수 / 가로등,가로수' , '선수촌5단지 앞' , '0' , '0' , '0' , '0' , 4892800.0 , 4609000.0 , 9501800.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
10:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-26' , '5--번' , '신경식' , '16:27:00' , '인천스마트' , 3646.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '미추홀서경찰관/각자수리' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
11:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-27' , '5-1번' , '남기선' , '20:25:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '수리비 40 입금' , '대림아파트 정류장' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
12:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-29' , '38번' , '박정훈' , '12:16:00' , '인천스마트' , 3575.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리비 50입금' , '독정이고개' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
13:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-02' , '27번' , '전정훈' , '07:11:00' , '인천스마트' , 7125.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 40 입금완료' , '신선초교 앞 공사장 입구' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
14:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-04' , '5-1번' , '남기선' , '07:00:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB접수/수리비 입금' , '소방본부 정류장' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
15:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2020-01-21' , '27번' , '홍성운' , '10:29:00' , '인천스마트' , 3676.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상 청구' , '주안1동성당 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
16:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-06' , '38번' , '최병국' , '09:46:00' , '인천스마트' , 3576.0 , '자차' , '피해' , '측면충돌' , '20 (무과실 주장)' , 80.0 , '종결' , 'KB접수 / 수리비 입금' , '새안의원 앞' , '0' , 900000.0 , 900000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
17:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-06' , '27번' , '권병묵' , '18:15:00' , '인천스마트' , 3638.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'DB접수 / 수리비 입금' , '논현사거리 정류장' , '0' , 398520.0 , 398520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
18:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-05' , '5-1번' , '남기선' , '13:50:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '기타' , 100.0 , '0' , '종결' , '피해자 김복순 30합의' , '주안7동행정복지센터 정류장' , '0' , '0' , '0' , 300000.0 , '0' , '0' , 300000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
19:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '20번' , '이종식' , '10:18:00' , '인천스마트' , 3556.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수(대인,대물)' , '논현주공14단지 앞' , '0' , '0' , '0' , 1339560.0 , 9717620.0 , 2863454.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
20:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '38번' , '박근호' , '08:35:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '롯데접수 / 수리완료' , '전재울사거리' , '0' , 108000.0 , 108000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
21:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '21번' , '허선균' , '13:37:00' , '인천스마트' , 3562.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '대인X, 대물 공제접수' , '도화고가 앞' , '0' , '0' , '0' , '0' , 1800000.0 , 103400.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
22:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-09' , '38번' , '박근호' , '13:38:00' , '인천스마트' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB접수/수리완료' , '세일빌라 입구' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
23:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-09' , '38번' , '장길영' , '12:44:00' , '인천스마트' , 3551.0 , '대인' , '가해' , '승차' , 100.0 , '0' , '진행' , '경찰신고 / 합의 조율중' , '하늘마을정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
24:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2022-11-04' , '5-1번' , '오정택' , '13:38:00' , '인천스마트' , 3645.0 , '자차,대인' , '피해' , '측면충돌 (현대구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상청구' , '학익2동 행정복지센터 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
25:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-17' , '21번' , '박인서' , '13:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리비 입금' , '현대시장 정류장' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
26:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-21' , '38번' , '윤세호' , '12:21:00' , '인천스마트' , 3549.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '빽밀러 파손 / 30입금' , '구월동 우리은행사거리' , '0' , 300000.0 , 300000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
27:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-22' , '21번' , '허선균' , '08:31:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '하나손해 / 수리예정' , '경인지방노동청 입구' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
28:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-06' , '5번' , '최정수' , '00:35:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '기타' , '0' , 100.0 , '종결' , '수리비 15 입금' , '연안부두 차고지' , '0' , 150000.0 , 150000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
29:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-06' , '27번' , '백종필' , '20:25:00' , '인천스마트' , 3659.0 , '자차, 승객' , '피해' , '측면충돌' , 10.0 , 90.0 , '종결' , '삼성접수/수리비 70입금' , '주적골삼거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
30:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-09' , '5번' , '김성취' , '19:19:00' , '인천스마트' , 3619.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 35입금' , '임광그대로가 103동 앞' , '0' , 350000.0 , 350000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
31:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-10' , '5번' , '한태전' , '21:13:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '종결' , 'DB접수 / 수리비 70입금' , '문학 목우촌 앞' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
32:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-13' , '27번' , '임인복' , '20:31:00' , '인천스마트' , 7123.0 , '자차' , '피해' , '측면충돌' , 10.0 , 90.0 , '진행' , '렌트공제/ 과실 9:1확정' , '항동 SK주유소 앞' , '0' , 1599300.0 , 1599300.0 , 818000.0 , 500000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
33:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-15' , '5번' , '김도근' , '23:50:00' , '인천스마트' , 3621.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '연안부두 차고지' , '0' , 250000.0 , 250000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
34:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-16' , '5번' , '임충환' , '14:40:00' , '인천스마트' , 3632.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 50입금' , '토지금고 굴다리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
35:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-18' , '5-1번' , '박정배' , '11:20:00' , '인천스마트' , 3644.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 /수리예정' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
36:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-19' , '20번' , '김동회' , '12:27:00' , '인천스마트' , 3504.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '현대 접수/수리비 50입금' , '동방중학교 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
37:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-15' , '38번' , '윤세호' , '19:51:00' , '인천스마트' , 3553.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '김명희(78세,여)/120 회사처리' , '윤성아파트 앞' , '0' , '0' , '0' , 1200000.0 , 1200000.0 , '0' , 1200000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
38:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-21' , '5번' , '자선호' , '19:43:00' , '인천스마트' , 3622.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 입급' , '롯데백화점 사거리' , '0' , 800000.0 , 800000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
39:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-21' , '5번' , '김요섭' , '21:00:00' , '인천스마트' , 3632.0 , '자차,대인' , '쌍피' , '측면충돌' , 40.0 , 60.0 , '종결' , '차량 각 처리, 승객 상대처리' , '선수촌아파트 입구 회전교차로' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
40:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-23' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
41:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-23' , '27번' , '김용문' , '15:50:00' , '인천스마트' , 3641.0 , '대인' , '가해' , ' 문 끼임사고' , 100.0 , '0' , '종결' , '합의금(박순예)60지급' , '인하대역 1번출구' , '0' , '0' , '0' , 600000.0 , '0' , '0' , 600000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
42:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '인호덕' , '10:45:00' , '인천스마트' , 3676.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리완료' , '도림동고개' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
43:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '이용재' , '16:06:00' , '인천스마트' , 3637.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB / 수리비 70입금' , '논현역사거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
44:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '20번' , '임재준' , '18:51:00' , '인천스마트' , 3574.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '삼성접수/신고예정' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
45:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-25' , '27번' , '이용일' , '14:31:00' , '인천스마트' , 3634.0 , '대인' , '가해' , '개문발차' , 100.0 , '0' , '종결' , '공제접수' , '한신휴아파트 정류장' , '0' , '0' , '0' , 2710000.0 , '0' , '0' , 2710000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
46:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-28' , '21번' , '조성훈' , '23:05:00' , '인천스마트' , 3563.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '종결' , '대인X, 대물 90회사합의' , '롯데백화점 사거리' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
47:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-03-31' , '21번' , '유병수' , '07:30:00' , '인천스마트' , 3628.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '한화 / 수리비 60입금' , '서창중 정류장' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
48:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-04' , '20번' , '이형규' , '20:05:00' , '인천스마트' , 3505.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25만 입금' , '인평고 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
49:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '27번' , '윤병진' , '09:31:00' , '인천스마트' , 7122.0 , '자차' , '피해' , '측면충돌' , '무과실 주장' , 80.0 , '진행' , 'DB접수 / 과실협의중' , '토지금고시장 입구 삼거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
50:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '20번' , '임재준' , '12:05:00' , '인천스마트' , 3574.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '공제접수' , '남촌동입구 정류장' , '0' , '0' , '0' , 1700000.0 , '0' , '0' , 1700000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
51:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-05' , '27번' , '이승수' , '13:06:00' , '인천스마트' , 3640.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 60입금' , '주적골 삼거리' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
52:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-06' , '27번' , '이용일' , '10:44:00' , '인천스마트' , 3634.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , 'KB / 수리비입금예정' , '용현고가교' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
53:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-10' , '20번' , '김동회' , '10:30:00' , '인천스마트' , 3504.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '50 합의' , '모래내시장전 사거리' , '0' , '0' , '0' , 500000.0 , '0' , '0' , 500000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
54:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-10' , '38번' , '박정훈' , '16:30:00' , '인천스마트' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금 ' , '경인식약청 앞' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
55:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-11' , '38번' , '김승배' , '14:02:00' , '인천스마트' , 3550.0 , '인,물피' , '쌍피' , '측면충돌' , 60.0 , 40.0 , '진행' , '현대접수 / 공제접수' , '신기사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
56:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-13' , '38번' , '장명근' , '14:57:00' , '인천스마트' , 3553.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금' , '소래포구역 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
57:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-14' , '5번' , '임충환' , '15:42:00' , '인천스마트' , 3632.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '공제접수' , '서창119안전센터 앞' , '0' , '0' , '0' , '0' , 1152880.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
58:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-16' , '5-1번' , '이택선' , '16:40:00' , '인천스마트' , 3645.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '명보주유소 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
59:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-18' , '20번' , '손신영' , '16:52:00' , '인천스마트' , 3565.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '진행' , '공제접수' , '태화아파트 정류장 전' , '0' , '0' , '0' , 818000.0 , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
60:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-19' , '5-1번' , '이덕길' , '15:33:00' , '인천스마트' , 3648.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사 접수 / 수리완료' , '신기시장 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
61:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-22' , '5번' , '장남균' , '23:42:00' , '인천스마트' , 3631.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB / 수리완료' , '신선초교 사거리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
62:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2018-08-16' , '27번' , '정재철' , '20:00:00' , '인천스마트' , 3633.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '무과실 주장' , 100.0 , '진행' , '현대 선처리후 구상청구' , '논현동 소래풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
63:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-04-28' , '38번' , '이정성' , '07:03:00' , '인천스마트' , 3546.0 , '대인,대물,자차' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수' , '남동경찰서 사거리' , '0' , '0' , '0' , '0' , 660000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
64:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-04' , '38번' , '유종각' , '12:41:00' , '인천스마트' , 3548.0 , '대인' , '가해' , '차내전도' , 50.0 , 50.0 , '종결' , '80 합의, 경찰신고' , '토지금고시장 사거리' , '0' , '0' , '0' , 800000.0 , '0' , '0' , 800000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
65:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-05' , '27번' , '이용재B' , '11:23:00' , '인천스마트' , 3639.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '빽밀러 파손 / 공제접수' , '신선초교 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
66:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-06' , '38번' , '이경환' , '13:53:00' , '인천스마트' , 3551.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수' , '관교동 풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , 212828.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
67:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '20번' , '박준용' , '11:32:00' , '인천스마트' , 3053.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '공제접수 / 수리완료' , '하늘마을3단지 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
68:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '5-1번' , '박덕환' , '11:48:00' , '인천스마트' , 3648.0 , '대믈' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수 / 대물' , '토지금고시장 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
69:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-07' , '21번' , '유종선' , '13:50:00' , '인천스마트' , 3626.0 , '대인' , '피해' , '비접촉' , '0' , 100.0 , '종결' , '승객 DB접수처리' , '석바위사거리 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
70:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-11' , '27번' , '이용재B' , '09:23:00' , '인천스마트' , 3639.0 , '자차' , '피해' , '접촉' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '롯데백화점 건너 정류장' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
71:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-12' , '5번' , '양광일 ' , '22:44:00' , '인천스마트' , 3629.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 / 수리예정' , '토지금고시장 사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
72:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-15' , '21번' , '노주성' , '10:40:00' , '인천스마트' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '진행' , 'KB접수 / 수리예정' , '서창도서관 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
73:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-05-16' , '5-1번' , '권태종' , '21:52:00' , '인천스마트' , 3647.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '공제접수 / 대물' , '주안역 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 14 msec}
2023-06-29 21:58:23.644 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:58:23.644 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:58:23.644 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:58:23.647 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
26. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:58:23.650 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
26. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 21:58:58.577 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
26. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 21:58:58.585 INFO  [http-nio-10010-exec-10] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , :acc_date , :route_nm , :emp_nm , :acc_time , :company_nm , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-06-29 21:58:58.586 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
27. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 21:58:58.588 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
27. batching 1 statements:
1:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-01-06' , '20번' , '김종국' , '09:24:00' , '인천스마트' , 3573.0 , '자차자차' , '피해' , '측면충돌' , '0' , '100.0' , '종결' , 'DB / 수리비입금' , '논현주공 13단지 앞' , 0.0 , 908520.0 , 908520.0 , 0.0 , 0.0 , 0.0 , 0.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 1 msec}
2023-06-29 21:58:58.599 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 21:58:58.599 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 21:58:58.599 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 21:58:58.602 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
27. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 21:58:58.605 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
27. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 22:06:49.011 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 22:06:49.011 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 22:06:49.011 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 22:06:49.012 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
27. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 22:06:49.015 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
27. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 22:06:49.018 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
27. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 22:08:17.611 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 22:08:17.611 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 22:08:17.611 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 22:08:17.612 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
27. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 22:08:17.615 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
27. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 22:08:17.618 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
27. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 22:10:03.606 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 22:10:03.606 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 22:10:03.606 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 22:10:03.607 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
27. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 22:10:03.610 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
27. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 22:10:03.612 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
27. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 22:12:02.903 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
27. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 22:12:02.910 INFO  [http-nio-10010-exec-5] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , :acc_date , :route_nm , :emp_nm , :acc_time , :company_nm , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-06-29 22:12:02.911 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
28. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 22:12:02.914 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
28. batching 3 statements:
1:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '20번' , '이종식' , '10:18:00' , '인천스마트' , 3556.0 , '대인,대물,자차' , '가해' , '추돌' , '100.0' , '0' , '진행' , '공제접수(대인,대물)' , '논현주공14단지 앞' , 1.0 , 0.0 , 0.0 , 1339560.0 , 9717620.0 , 2863454.0 , 0.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-08' , '21번' , '허선균' , '13:37:00' , '인천스마트' , 3562.0 , '대물' , '가해' , '측면충돌' , '100.0' , '0' , '진행' , '대인X, 대물 공제접수' , '도화고가 앞' , 2.0 , 0.0 , 0.0 , 0.0 , 1800000.0 , 103400.0 , 0.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
3:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,base_year,company_no,emp_nm,route_nm) select  '100' , '2023' , '2023-02-09' , '38번' , '장길영' , '12:44:00' , '인천스마트' , 3551.0 , '대인' , '가해' , '승차' , '100.0' , '0' , '진행' , '경찰신고 / 합의 조율중' , '하늘마을정류장' , 3.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 0.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 1 msec}
2023-06-29 22:12:02.926 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 22:12:02.926 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 22:12:02.926 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 22:12:02.930 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
28. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 22:12:02.934 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
28. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 22:52:04.219 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5165f00
2023-06-29 22:52:04.220 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 22:52:04.220 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
2023-06-29 22:52:04.221 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 22:52:04.225 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 4 msec}
2023-06-29 22:52:04.228 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.base_year = '2023' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:00:40.308 ERROR [http-nio-10010-exec-9] [c.p.d.core.error.GlobalExceptionHandler] - handleEntityNotFoundException
java.lang.NullPointerException: Cannot invoke "com.pjy.dashboard.domain.CommonCodeVo.init()" because "vo" is null
	at com.pjy.dashboard.controller.TestController.dynamicSqlFilter(TestController.java:198)
	at jdk.internal.reflect.GeneratedMethodAccessor155.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$eb3a9ebf.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-29 23:00:40.318 WARN  [http-nio-10010-exec-9] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [java.lang.NullPointerException: Cannot invoke "com.pjy.dashboard.domain.CommonCodeVo.init()" because "vo" is null]
2023-06-29 23:01:49.658 ERROR [http-nio-10010-exec-3] [c.p.d.core.error.GlobalExceptionHandler] - handleEntityNotFoundException
java.lang.NullPointerException: Cannot invoke "com.pjy.dashboard.domain.CommonCodeVo.init()" because "vo" is null
	at com.pjy.dashboard.controller.TestController.dynamicSqlFilter(TestController.java:198)
	at jdk.internal.reflect.GeneratedMethodAccessor155.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$eb3a9ebf.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-29 23:01:49.660 WARN  [http-nio-10010-exec-3] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [java.lang.NullPointerException: Cannot invoke "com.pjy.dashboard.domain.CommonCodeVo.init()" because "vo" is null]
2023-06-29 23:02:16.868 ERROR [http-nio-10010-exec-2] [c.p.d.core.error.GlobalExceptionHandler] - handleEntityNotFoundException
java.lang.NullPointerException: Cannot invoke "com.pjy.dashboard.domain.CommonCodeVo.init()" because "vo" is null
	at com.pjy.dashboard.controller.TestController.dynamicSqlFilter(TestController.java:198)
	at jdk.internal.reflect.GeneratedMethodAccessor155.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$eb3a9ebf.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-29 23:02:16.869 WARN  [http-nio-10010-exec-2] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [java.lang.NullPointerException: Cannot invoke "com.pjy.dashboard.domain.CommonCodeVo.init()" because "vo" is null]
2023-06-29 23:06:33.749 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8cddc33c
2023-06-29 23:06:33.750 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:06:33.756 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-01-01' order by a.acc_date,acc_time
2023-06-29 23:06:33.757 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
57. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:06:33.759 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
57. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-01-01' order by a.acc_date,acc_time
 {executed in 0 msec}
2023-06-29 23:06:33.760 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
57. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-01-01' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 23:07:01.778 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8cddc33c
2023-06-29 23:07:01.778 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:07:01.779 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-01-01' order by a.acc_date,acc_time
2023-06-29 23:07:01.779 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
57. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:07:01.779 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
57. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-01-01' order by a.acc_date,acc_time
 {executed in 0 msec}
2023-06-29 23:07:01.780 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
57. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-01-01' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 23:07:07.750 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
57. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:07:07.756 INFO  [http-nio-10010-exec-10] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , :acc_date , :route_nm , :emp_nm , :acc_time , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-06-29 23:07:07.758 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
58. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:07:07.773 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
58. batching 73 statements:
 1:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-06' , '20번' , '김종국' , '09:24:00' , 3573.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'DB / 수리비입금' , '논현주공 13단지 앞' , '0' , 908520.0 , 908520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 2:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-06' , '5-1번' , '이택선' , '18:28:00' , 3643.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '전세버스 / 수리완료' , '주안역 환승장' , '0' , 86820.0 , 86820.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 3:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-07' , '38번' , '채종두' , '12:45:00' , 3551.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '대물 90 / 회사처리' , '주안역 앞' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 4:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-08' , '38번' , '윤세호' , '14:41:00' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '서창캠핑장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 5:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-13' , '21번' , '심기섭' , '15:26:00' , 3625.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '예술회관 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 6:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-15' , '27번' , '임인복' , '22:32:00' , 3638.0 , '자차' , '자피' , '시설물 충격' , 100.0 , '0' , '종결' , '회사 자체 수리' , '남동중학교 정류장' , '0' , '0' , '0' , '0' , '0' , 172720.0 , 172720.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 7:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-18' , '38번' , '고상욱' , '13:59:00' , 3552.0 , '자차' , '피해' , '측면충돌' , '10(무과실주장)' , 90.0 , '종결' , '삼성접수 / 수리비 50입금' , '하늘마을앞 사거리' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 8:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-19' , '21번' , '이용진' , '06:57:00' , 3623.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 삼공수리' , '매소홀터널 앞' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 9:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-24' , '20번' , '서수찬' , '09:54:00' , 3506.0 , '대물,자차' , '가해' , '시설물 충격' , 100.0 , '0' , '종결' , '공제접수 / 가로등,가로수' , '선수촌5단지 앞' , '0' , '0' , '0' , '0' , 4892800.0 , 4609000.0 , 9501800.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
10:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-26' , '5--번' , '신경식' , '16:27:00' , 3646.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '미추홀서경찰관/각자수리' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
11:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-27' , '5-1번' , '남기선' , '20:25:00' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '수리비 40 입금' , '대림아파트 정류장' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
12:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-29' , '38번' , '박정훈' , '12:16:00' , 3575.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리비 50입금' , '독정이고개' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
13:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-02' , '27번' , '전정훈' , '07:11:00' , 7125.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 40 입금완료' , '신선초교 앞 공사장 입구' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
14:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-04' , '5-1번' , '남기선' , '07:00:00' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB접수/수리비 입금' , '소방본부 정류장' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
15:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2020-01-21' , '27번' , '홍성운' , '10:29:00' , 3676.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상 청구' , '주안1동성당 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
16:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-06' , '38번' , '최병국' , '09:46:00' , 3576.0 , '자차' , '피해' , '측면충돌' , '20 (무과실 주장)' , 80.0 , '종결' , 'KB접수 / 수리비 입금' , '새안의원 앞' , '0' , 900000.0 , 900000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
17:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-06' , '27번' , '권병묵' , '18:15:00' , 3638.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'DB접수 / 수리비 입금' , '논현사거리 정류장' , '0' , 398520.0 , 398520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
18:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-05' , '5-1번' , '남기선' , '13:50:00' , 3548.0 , '대인' , '가해' , '기타' , 100.0 , '0' , '종결' , '피해자 김복순 30합의' , '주안7동행정복지센터 정류장' , '0' , '0' , '0' , 300000.0 , '0' , '0' , 300000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
19:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-08' , '20번' , '이종식' , '10:18:00' , 3556.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수(대인,대물)' , '논현주공14단지 앞' , '0' , '0' , '0' , 1339560.0 , 9717620.0 , 2863454.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
20:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-08' , '38번' , '박근호' , '08:35:00' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '롯데접수 / 수리완료' , '전재울사거리' , '0' , 108000.0 , 108000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
21:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-08' , '21번' , '허선균' , '13:37:00' , 3562.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '대인X, 대물 공제접수' , '도화고가 앞' , '0' , '0' , '0' , '0' , 1800000.0 , 103400.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
22:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-09' , '38번' , '박근호' , '13:38:00' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB접수/수리완료' , '세일빌라 입구' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
23:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-09' , '38번' , '장길영' , '12:44:00' , 3551.0 , '대인' , '가해' , '승차' , 100.0 , '0' , '진행' , '경찰신고 / 합의 조율중' , '하늘마을정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
24:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2022-11-04' , '5-1번' , '오정택' , '13:38:00' , 3645.0 , '자차,대인' , '피해' , '측면충돌 (현대구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상청구' , '학익2동 행정복지센터 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
25:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-17' , '21번' , '박인서' , '13:40:00' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리비 입금' , '현대시장 정류장' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
26:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-21' , '38번' , '윤세호' , '12:21:00' , 3549.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '빽밀러 파손 / 30입금' , '구월동 우리은행사거리' , '0' , 300000.0 , 300000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
27:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-22' , '21번' , '허선균' , '08:31:00' , 3628.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '하나손해 / 수리예정' , '경인지방노동청 입구' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
28:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-06' , '5번' , '최정수' , '00:35:00' , 3619.0 , '자차' , '피해' , '기타' , '0' , 100.0 , '종결' , '수리비 15 입금' , '연안부두 차고지' , '0' , 150000.0 , 150000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
29:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-06' , '27번' , '백종필' , '20:25:00' , 3659.0 , '자차, 승객' , '피해' , '측면충돌' , 10.0 , 90.0 , '종결' , '삼성접수/수리비 70입금' , '주적골삼거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
30:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-09' , '5번' , '김성취' , '19:19:00' , 3619.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 35입금' , '임광그대로가 103동 앞' , '0' , 350000.0 , 350000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
31:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-10' , '5번' , '한태전' , '21:13:00' , 3632.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '종결' , 'DB접수 / 수리비 70입금' , '문학 목우촌 앞' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
32:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-13' , '27번' , '임인복' , '20:31:00' , 7123.0 , '자차' , '피해' , '측면충돌' , 10.0 , 90.0 , '진행' , '렌트공제/ 과실 9:1확정' , '항동 SK주유소 앞' , '0' , 1599300.0 , 1599300.0 , 818000.0 , 500000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
33:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-15' , '5번' , '김도근' , '23:50:00' , 3621.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '연안부두 차고지' , '0' , 250000.0 , 250000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
34:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-16' , '5번' , '임충환' , '14:40:00' , 3632.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 50입금' , '토지금고 굴다리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
35:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-18' , '5-1번' , '박정배' , '11:20:00' , 3644.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 /수리예정' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
36:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-19' , '20번' , '김동회' , '12:27:00' , 3504.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '현대 접수/수리비 50입금' , '동방중학교 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
37:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-15' , '38번' , '윤세호' , '19:51:00' , 3553.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '김명희(78세,여)/120 회사처리' , '윤성아파트 앞' , '0' , '0' , '0' , 1200000.0 , 1200000.0 , '0' , 1200000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
38:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-21' , '5번' , '자선호' , '19:43:00' , 3622.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 입급' , '롯데백화점 사거리' , '0' , 800000.0 , 800000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
39:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-21' , '5번' , '김요섭' , '21:00:00' , 3632.0 , '자차,대인' , '쌍피' , '측면충돌' , 40.0 , 60.0 , '종결' , '차량 각 처리, 승객 상대처리' , '선수촌아파트 입구 회전교차로' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
40:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-23' , '20번' , '임재준' , '18:51:00' , 3574.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
41:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-23' , '27번' , '김용문' , '15:50:00' , 3641.0 , '대인' , '가해' , ' 문 끼임사고' , 100.0 , '0' , '종결' , '합의금(박순예)60지급' , '인하대역 1번출구' , '0' , '0' , '0' , 600000.0 , '0' , '0' , 600000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
42:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-25' , '27번' , '인호덕' , '10:45:00' , 3676.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리완료' , '도림동고개' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
43:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-25' , '27번' , '이용재' , '16:06:00' , 3637.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB / 수리비 70입금' , '논현역사거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
44:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-25' , '20번' , '임재준' , '18:51:00' , 3574.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '삼성접수/신고예정' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
45:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-25' , '27번' , '이용일' , '14:31:00' , 3634.0 , '대인' , '가해' , '개문발차' , 100.0 , '0' , '종결' , '공제접수' , '한신휴아파트 정류장' , '0' , '0' , '0' , 2710000.0 , '0' , '0' , 2710000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
46:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-28' , '21번' , '조성훈' , '23:05:00' , 3563.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '종결' , '대인X, 대물 90회사합의' , '롯데백화점 사거리' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
47:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-31' , '21번' , '유병수' , '07:30:00' , 3628.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '한화 / 수리비 60입금' , '서창중 정류장' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
48:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-04' , '20번' , '이형규' , '20:05:00' , 3505.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25만 입금' , '인평고 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
49:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-05' , '27번' , '윤병진' , '09:31:00' , 7122.0 , '자차' , '피해' , '측면충돌' , '무과실 주장' , 80.0 , '진행' , 'DB접수 / 과실협의중' , '토지금고시장 입구 삼거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
50:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-05' , '20번' , '임재준' , '12:05:00' , 3574.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '공제접수' , '남촌동입구 정류장' , '0' , '0' , '0' , 1700000.0 , '0' , '0' , 1700000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
51:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-05' , '27번' , '이승수' , '13:06:00' , 3640.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 60입금' , '주적골 삼거리' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
52:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-06' , '27번' , '이용일' , '10:44:00' , 3634.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , 'KB / 수리비입금예정' , '용현고가교' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
53:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-10' , '20번' , '김동회' , '10:30:00' , 3504.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '50 합의' , '모래내시장전 사거리' , '0' , '0' , '0' , 500000.0 , '0' , '0' , 500000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
54:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-10' , '38번' , '박정훈' , '16:30:00' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금 ' , '경인식약청 앞' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
55:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-11' , '38번' , '김승배' , '14:02:00' , 3550.0 , '인,물피' , '쌍피' , '측면충돌' , 60.0 , 40.0 , '진행' , '현대접수 / 공제접수' , '신기사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
56:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-13' , '38번' , '장명근' , '14:57:00' , 3553.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금' , '소래포구역 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
57:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-14' , '5번' , '임충환' , '15:42:00' , 3632.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '공제접수' , '서창119안전센터 앞' , '0' , '0' , '0' , '0' , 1152880.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
58:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-16' , '5-1번' , '이택선' , '16:40:00' , 3645.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '명보주유소 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
59:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-18' , '20번' , '손신영' , '16:52:00' , 3565.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '진행' , '공제접수' , '태화아파트 정류장 전' , '0' , '0' , '0' , 818000.0 , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
60:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-19' , '5-1번' , '이덕길' , '15:33:00' , 3648.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사 접수 / 수리완료' , '신기시장 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
61:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-22' , '5번' , '장남균' , '23:42:00' , 3631.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB / 수리완료' , '신선초교 사거리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
62:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2018-08-16' , '27번' , '정재철' , '20:00:00' , 3633.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '무과실 주장' , 100.0 , '진행' , '현대 선처리후 구상청구' , '논현동 소래풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
63:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-28' , '38번' , '이정성' , '07:03:00' , 3546.0 , '대인,대물,자차' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수' , '남동경찰서 사거리' , '0' , '0' , '0' , '0' , 660000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
64:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-05-04' , '38번' , '유종각' , '12:41:00' , 3548.0 , '대인' , '가해' , '차내전도' , 50.0 , 50.0 , '종결' , '80 합의, 경찰신고' , '토지금고시장 사거리' , '0' , '0' , '0' , 800000.0 , '0' , '0' , 800000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
65:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-05-05' , '27번' , '이용재B' , '11:23:00' , 3639.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '빽밀러 파손 / 공제접수' , '신선초교 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
66:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-05-06' , '38번' , '이경환' , '13:53:00' , 3551.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수' , '관교동 풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , 212828.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
67:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-05-07' , '20번' , '박준용' , '11:32:00' , 3053.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '공제접수 / 수리완료' , '하늘마을3단지 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
68:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-05-07' , '5-1번' , '박덕환' , '11:48:00' , 3648.0 , '대믈' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수 / 대물' , '토지금고시장 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
69:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-05-07' , '21번' , '유종선' , '13:50:00' , 3626.0 , '대인' , '피해' , '비접촉' , '0' , 100.0 , '종결' , '승객 DB접수처리' , '석바위사거리 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
70:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-05-11' , '27번' , '이용재B' , '09:23:00' , 3639.0 , '자차' , '피해' , '접촉' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '롯데백화점 건너 정류장' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
71:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-05-12' , '5번' , '양광일 ' , '22:44:00' , 3629.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 / 수리예정' , '토지금고시장 사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
72:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-05-15' , '21번' , '노주성' , '10:40:00' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '진행' , 'KB접수 / 수리예정' , '서창도서관 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
73:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-05-16' , '5-1번' , '권태종' , '21:52:00' , 3647.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '공제접수 / 대물' , '주안역 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 11 msec}
2023-06-29 23:07:07.787 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8cddc33c
2023-06-29 23:07:07.787 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:07:07.787 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-01-01' order by a.acc_date,acc_time
2023-06-29 23:07:07.788 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
58. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-01-01' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 23:07:07.790 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
58. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-01-01' order by a.acc_date,acc_time
 {executed in 0 msec}
2023-06-29 23:07:31.172 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e9e7eb83
2023-06-29 23:07:31.172 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:07:31.172 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2022-01-01' and '2023-01-01' order by a.acc_date,acc_time
2023-06-29 23:07:31.173 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
58. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:07:31.173 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
58. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2022-01-01' and '2023-01-01' order by a.acc_date,acc_time
 {executed in 0 msec}
2023-06-29 23:07:31.174 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
58. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2022-01-01' and '2023-01-01' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 23:07:41.638 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@46f213ca
2023-06-29 23:07:41.638 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:07:41.638 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2021-01-01' and '2023-01-01' order by a.acc_date,acc_time
2023-06-29 23:07:41.639 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
58. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:07:41.640 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
58. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2021-01-01' and '2023-01-01' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 23:07:41.641 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
58. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2021-01-01' and '2023-01-01' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 23:07:58.090 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8cddc33c
2023-06-29 23:07:58.091 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:07:58.091 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-01-01' order by a.acc_date,acc_time
2023-06-29 23:07:58.092 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
58. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:07:58.093 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
58. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-01-01' order by a.acc_date,acc_time
 {executed in 0 msec}
2023-06-29 23:07:58.094 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
58. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-01-01' order by a.acc_date,acc_time
 {executed in 0 msec}
2023-06-29 23:08:18.908 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
58. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:08:18.914 INFO  [http-nio-10010-exec-9] [com.pjy.dashboard.dao.DynamicSqlDao] - merge sql : MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , :acc_date , :route_nm , :emp_nm , :acc_time , :car_no , :acc_gb , :gapi_gb , :acc_kind , :jacha_rate , :sangdae_rate , :proc_result , :proc_memo , :acc_place , :daein_in_amt , :daemul_in_amt , :in_tot_amt , :daein_out_amt , :daemul_out_amt , :jacha_amt , :out_tot_amt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
2023-06-29 23:08:18.915 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
59. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:08:18.935 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:128)
59. batching 73 statements:
 1:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-06' , '20번' , '김종국' , '09:24:00' , 3573.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'DB / 수리비입금' , '논현주공 13단지 앞' , '0' , 908520.0 , 908520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 2:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-06' , '5-1번' , '이택선' , '18:28:00' , 3643.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '전세버스 / 수리완료' , '주안역 환승장' , '0' , 86820.0 , 86820.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 3:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-07' , '38번' , '채종두' , '12:45:00' , 3551.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '대물 90 / 회사처리' , '주안역 앞' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 4:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-08' , '38번' , '윤세호' , '14:41:00' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '서창캠핑장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 5:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-13' , '21번' , '심기섭' , '15:26:00' , 3625.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리완료' , '예술회관 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 6:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-15' , '27번' , '임인복' , '22:32:00' , 3638.0 , '자차' , '자피' , '시설물 충격' , 100.0 , '0' , '종결' , '회사 자체 수리' , '남동중학교 정류장' , '0' , '0' , '0' , '0' , '0' , 172720.0 , 172720.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 7:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-18' , '38번' , '고상욱' , '13:59:00' , 3552.0 , '자차' , '피해' , '측면충돌' , '10(무과실주장)' , 90.0 , '종결' , '삼성접수 / 수리비 50입금' , '하늘마을앞 사거리' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 8:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-19' , '21번' , '이용진' , '06:57:00' , 3623.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 삼공수리' , '매소홀터널 앞' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 9:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-24' , '20번' , '서수찬' , '09:54:00' , 3506.0 , '대물,자차' , '가해' , '시설물 충격' , 100.0 , '0' , '종결' , '공제접수 / 가로등,가로수' , '선수촌5단지 앞' , '0' , '0' , '0' , '0' , 4892800.0 , 4609000.0 , 9501800.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
10:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-26' , '5--번' , '신경식' , '16:27:00' , 3646.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '미추홀서경찰관/각자수리' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
11:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-27' , '5-1번' , '남기선' , '20:25:00' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '수리비 40 입금' , '대림아파트 정류장' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
12:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-01-29' , '38번' , '박정훈' , '12:16:00' , 3575.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '삼성접수 / 수리비 50입금' , '독정이고개' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
13:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-02' , '27번' , '전정훈' , '07:11:00' , 7125.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 40 입금완료' , '신선초교 앞 공사장 입구' , '0' , 400000.0 , 400000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
14:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-04' , '5-1번' , '남기선' , '07:00:00' , 3645.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB접수/수리비 입금' , '소방본부 정류장' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
15:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2020-01-21' , '27번' , '홍성운' , '10:29:00' , 3676.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상 청구' , '주안1동성당 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
16:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-06' , '38번' , '최병국' , '09:46:00' , 3576.0 , '자차' , '피해' , '측면충돌' , '20 (무과실 주장)' , 80.0 , '종결' , 'KB접수 / 수리비 입금' , '새안의원 앞' , '0' , 900000.0 , 900000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
17:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-06' , '27번' , '권병묵' , '18:15:00' , 3638.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'DB접수 / 수리비 입금' , '논현사거리 정류장' , '0' , 398520.0 , 398520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
18:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-05' , '5-1번' , '남기선' , '13:50:00' , 3548.0 , '대인' , '가해' , '기타' , 100.0 , '0' , '종결' , '피해자 김복순 30합의' , '주안7동행정복지센터 정류장' , '0' , '0' , '0' , 300000.0 , '0' , '0' , 300000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
19:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-08' , '20번' , '이종식' , '10:18:00' , 3556.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수(대인,대물)' , '논현주공14단지 앞' , '0' , '0' , '0' , 1339560.0 , 9717620.0 , 2863454.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
20:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-08' , '38번' , '박근호' , '08:35:00' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '롯데접수 / 수리완료' , '전재울사거리' , '0' , 108000.0 , 108000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
21:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-08' , '21번' , '허선균' , '13:37:00' , 3562.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '대인X, 대물 공제접수' , '도화고가 앞' , '0' , '0' , '0' , '0' , 1800000.0 , 103400.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
22:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-09' , '38번' , '박근호' , '13:38:00' , 3547.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB접수/수리완료' , '세일빌라 입구' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
23:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-09' , '38번' , '장길영' , '12:44:00' , 3551.0 , '대인' , '가해' , '승차' , 100.0 , '0' , '진행' , '경찰신고 / 합의 조율중' , '하늘마을정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
24:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2022-11-04' , '5-1번' , '오정택' , '13:38:00' , 3645.0 , '자차,대인' , '피해' , '측면충돌 (현대구상금)' , '0 (무과실 주장)' , 100.0 , '진행' , '현대 선처리후 구상청구' , '학익2동 행정복지센터 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
25:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-17' , '21번' , '박인서' , '13:40:00' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리비 입금' , '현대시장 정류장' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
26:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-21' , '38번' , '윤세호' , '12:21:00' , 3549.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '빽밀러 파손 / 30입금' , '구월동 우리은행사거리' , '0' , 300000.0 , 300000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
27:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-02-22' , '21번' , '허선균' , '08:31:00' , 3628.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '하나손해 / 수리예정' , '경인지방노동청 입구' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
28:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-06' , '5번' , '최정수' , '00:35:00' , 3619.0 , '자차' , '피해' , '기타' , '0' , 100.0 , '종결' , '수리비 15 입금' , '연안부두 차고지' , '0' , 150000.0 , 150000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
29:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-06' , '27번' , '백종필' , '20:25:00' , 3659.0 , '자차, 승객' , '피해' , '측면충돌' , 10.0 , 90.0 , '종결' , '삼성접수/수리비 70입금' , '주적골삼거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
30:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-09' , '5번' , '김성취' , '19:19:00' , 3619.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 35입금' , '임광그대로가 103동 앞' , '0' , 350000.0 , 350000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
31:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-10' , '5번' , '한태전' , '21:13:00' , 3632.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '종결' , 'DB접수 / 수리비 70입금' , '문학 목우촌 앞' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
32:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-13' , '27번' , '임인복' , '20:31:00' , 7123.0 , '자차' , '피해' , '측면충돌' , 10.0 , 90.0 , '진행' , '렌트공제/ 과실 9:1확정' , '항동 SK주유소 앞' , '0' , 1599300.0 , 1599300.0 , 818000.0 , 500000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
33:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-15' , '5번' , '김도근' , '23:50:00' , 3621.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '연안부두 차고지' , '0' , 250000.0 , 250000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
34:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-16' , '5번' , '임충환' , '14:40:00' , 3632.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 50입금' , '토지금고 굴다리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
35:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-18' , '5-1번' , '박정배' , '11:20:00' , 3644.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 /수리예정' , '굴다리 종점' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
36:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-19' , '20번' , '김동회' , '12:27:00' , 3504.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '현대 접수/수리비 50입금' , '동방중학교 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
37:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-15' , '38번' , '윤세호' , '19:51:00' , 3553.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '김명희(78세,여)/120 회사처리' , '윤성아파트 앞' , '0' , '0' , '0' , 1200000.0 , 1200000.0 , '0' , 1200000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
38:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-21' , '5번' , '자선호' , '19:43:00' , 3622.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사접수/ 수리비 입급' , '롯데백화점 사거리' , '0' , 800000.0 , 800000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
39:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-21' , '5번' , '김요섭' , '21:00:00' , 3632.0 , '자차,대인' , '쌍피' , '측면충돌' , 40.0 , 60.0 , '종결' , '차량 각 처리, 승객 상대처리' , '선수촌아파트 입구 회전교차로' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
40:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-23' , '20번' , '임재준' , '18:51:00' , 3574.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25입금' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
41:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-23' , '27번' , '김용문' , '15:50:00' , 3641.0 , '대인' , '가해' , ' 문 끼임사고' , 100.0 , '0' , '종결' , '합의금(박순예)60지급' , '인하대역 1번출구' , '0' , '0' , '0' , 600000.0 , '0' , '0' , 600000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
42:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-25' , '27번' , '인호덕' , '10:45:00' , 3676.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '삼성 / 수리완료' , '도림동고개' , '0' , 217040.0 , 217040.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
43:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-25' , '27번' , '이용재' , '16:06:00' , 3637.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , 'KB / 수리비 70입금' , '논현역사거리' , '0' , 700000.0 , 700000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
44:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-25' , '20번' , '임재준' , '18:51:00' , 3574.0 , '자차' , '피해' , '측면충돌' , 20.0 , 80.0 , '진행' , '삼성접수/신고예정' , '소래풍림사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
45:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-25' , '27번' , '이용일' , '14:31:00' , 3634.0 , '대인' , '가해' , '개문발차' , 100.0 , '0' , '종결' , '공제접수' , '한신휴아파트 정류장' , '0' , '0' , '0' , 2710000.0 , '0' , '0' , 2710000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
46:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-28' , '21번' , '조성훈' , '23:05:00' , 3563.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '종결' , '대인X, 대물 90회사합의' , '롯데백화점 사거리' , '0' , '0' , '0' , '0' , 900000.0 , '0' , 900000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
47:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-03-31' , '21번' , '유병수' , '07:30:00' , 3628.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '한화 / 수리비 60입금' , '서창중 정류장' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
48:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-04' , '20번' , '이형규' , '20:05:00' , 3505.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 25만 입금' , '인평고 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
49:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-05' , '27번' , '윤병진' , '09:31:00' , 7122.0 , '자차' , '피해' , '측면충돌' , '무과실 주장' , 80.0 , '진행' , 'DB접수 / 과실협의중' , '토지금고시장 입구 삼거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
50:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-05' , '20번' , '임재준' , '12:05:00' , 3574.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '공제접수' , '남촌동입구 정류장' , '0' , '0' , '0' , 1700000.0 , '0' , '0' , 1700000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
51:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-05' , '27번' , '이승수' , '13:06:00' , 3640.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '메리츠 / 수리비 60입금' , '주적골 삼거리' , '0' , 600000.0 , 600000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
52:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-06' , '27번' , '이용일' , '10:44:00' , 3634.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , 'KB / 수리비입금예정' , '용현고가교' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
53:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-10' , '20번' , '김동회' , '10:30:00' , 3504.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '종결' , '50 합의' , '모래내시장전 사거리' , '0' , '0' , '0' , 500000.0 , '0' , '0' , 500000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
54:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-10' , '38번' , '박정훈' , '16:30:00' , 3546.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금 ' , '경인식약청 앞' , '0' , 200000.0 , 200000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
55:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-11' , '38번' , '김승배' , '14:02:00' , 3550.0 , '인,물피' , '쌍피' , '측면충돌' , 60.0 , 40.0 , '진행' , '현대접수 / 공제접수' , '신기사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
56:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-13' , '38번' , '장명근' , '14:57:00' , 3553.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '수리비 20 입금' , '소래포구역 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
57:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-14' , '5번' , '임충환' , '15:42:00' , 3632.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '종결' , '공제접수' , '서창119안전센터 앞' , '0' , '0' , '0' , '0' , 1152880.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
58:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-16' , '5-1번' , '이택선' , '16:40:00' , 3645.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '명보주유소 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
59:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-18' , '20번' , '손신영' , '16:52:00' , 3565.0 , '대인' , '가해' , '차내전도' , 100.0 , '0' , '진행' , '공제접수' , '태화아파트 정류장 전' , '0' , '0' , '0' , 818000.0 , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
60:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-19' , '5-1번' , '이덕길' , '15:33:00' , 3648.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '종결' , '악사 접수 / 수리완료' , '신기시장 앞' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
61:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-22' , '5번' , '장남균' , '23:42:00' , 3631.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , 'KB / 수리완료' , '신선초교 사거리 앞' , '0' , 500000.0 , 500000.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
62:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2018-08-16' , '27번' , '정재철' , '20:00:00' , 3633.0 , '대인' , '피해' , '비접촉(현대 구상금)' , '무과실 주장' , 100.0 , '진행' , '현대 선처리후 구상청구' , '논현동 소래풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
63:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-04-28' , '38번' , '이정성' , '07:03:00' , 3546.0 , '대인,대물,자차' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수' , '남동경찰서 사거리' , '0' , '0' , '0' , '0' , 660000.0 , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
64:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-05-04' , '38번' , '유종각' , '12:41:00' , 3548.0 , '대인' , '가해' , '차내전도' , 50.0 , 50.0 , '종결' , '80 합의, 경찰신고' , '토지금고시장 사거리' , '0' , '0' , '0' , 800000.0 , '0' , '0' , 800000.0 , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
65:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-05-05' , '27번' , '이용재B' , '11:23:00' , 3639.0 , '대물' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '빽밀러 파손 / 공제접수' , '신선초교 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
66:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-05-06' , '38번' , '이경환' , '13:53:00' , 3551.0 , '대인,대물,자차' , '가해' , '추돌' , 100.0 , '0' , '진행' , '공제접수' , '관교동 풍림아파트 앞' , '0' , '0' , '0' , '0' , '0' , 212828.0 , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
67:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-05-07' , '20번' , '박준용' , '11:32:00' , 3053.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '종결' , '공제접수 / 수리완료' , '하늘마을3단지 정류장' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
68:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-05-07' , '5-1번' , '박덕환' , '11:48:00' , 3648.0 , '대믈' , '가해' , '측면충돌' , 80.0 , 20.0 , '진행' , '공제접수 / 대물' , '토지금고시장 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
69:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-05-07' , '21번' , '유종선' , '13:50:00' , 3626.0 , '대인' , '피해' , '비접촉' , '0' , 100.0 , '종결' , '승객 DB접수처리' , '석바위사거리 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
70:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-05-11' , '27번' , '이용재B' , '09:23:00' , 3639.0 , '자차' , '피해' , '접촉' , '0' , 100.0 , '종결' , '현대접수 / 수리완료' , '롯데백화점 건너 정류장' , '0' , 108520.0 , 108520.0 , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
71:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-05-12' , '5번' , '양광일 ' , '22:44:00' , 3629.0 , '자차' , '피해' , '측면충돌' , '0' , 100.0 , '진행' , '삼성접수 / 수리예정' , '토지금고시장 사거리' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
72:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-05-15' , '21번' , '노주성' , '10:40:00' , 3649.0 , '자차' , '피해' , '추돌' , '0' , 100.0 , '진행' , 'KB접수 / 수리예정' , '서창도서관 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
73:  MERGE INTO TBM_ACCIDENT_INFO KEY (acc_date,company_no,emp_nm,route_nm) select  '100' , '2023-05-16' , '5-1번' , '권태종' , '21:52:00' , 3647.0 , '대물' , '가해' , '측면충돌' , 100.0 , '0' , '진행' , '공제접수 / 대물' , '주안역 정류장 앞' , '0' , '0' , '0' , '0' , '0' , '0' , '0' , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
 {executed in 18 msec}
2023-06-29 23:08:18.949 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8cddc33c
2023-06-29 23:08:18.949 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:08:18.949 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-01-01' order by a.acc_date,acc_time
2023-06-29 23:08:18.950 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
59. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-01-01' order by a.acc_date,acc_time
 {executed in 0 msec}
2023-06-29 23:08:18.952 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
59. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-01-01' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 23:08:50.753 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1188376b
2023-06-29 23:08:50.754 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:08:50.754 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
2023-06-29 23:08:50.754 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
59. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:08:50.757 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
59. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 23:08:50.759 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
59. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:09:42.736 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1188376b
2023-06-29 23:09:42.736 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:09:42.736 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
2023-06-29 23:09:42.737 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
59. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:09:42.739 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
59. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:09:42.741 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
59. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 23:09:45.461 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1188376b
2023-06-29 23:09:45.461 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:09:45.461 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
2023-06-29 23:09:45.462 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
59. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:09:45.464 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
59. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:09:45.466 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
59. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:11:18.943 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1188376b
2023-06-29 23:11:18.944 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:11:18.944 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
2023-06-29 23:11:18.945 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
59. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:11:18.948 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
59. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:11:18.950 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
59. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:11:26.087 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1188376b
2023-06-29 23:11:26.087 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:11:26.087 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
2023-06-29 23:11:26.088 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
60. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:11:26.091 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
60. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:11:26.094 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
60. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:20:15.888 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1188376b
2023-06-29 23:20:15.888 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:20:15.888 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
2023-06-29 23:20:15.889 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
67. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:20:15.891 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
67. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:20:15.895 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
67. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:21:23.294 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1188376b
2023-06-29 23:21:23.294 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:21:23.294 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
2023-06-29 23:21:23.294 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
67. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:21:23.297 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
67. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:21:23.299 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
67. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:23:25.772 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1188376b
2023-06-29 23:23:25.772 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:23:25.772 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
2023-06-29 23:23:25.773 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
67. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:23:25.775 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
67. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:23:25.777 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
67. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:25:09.456 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1188376b
2023-06-29 23:25:09.456 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:25:09.456 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
2023-06-29 23:25:09.457 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
67. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:25:09.459 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
67. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:25:09.462 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
67. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:26:56.242 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1188376b
2023-06-29 23:26:56.243 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:26:56.243 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
2023-06-29 23:26:56.244 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
67. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:26:56.247 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
67. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 23:26:56.250 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
67. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:27:38.637 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1188376b
2023-06-29 23:27:38.637 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:27:38.637 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
2023-06-29 23:27:38.638 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
68. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:27:38.640 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
68. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-06-29 23:27:38.642 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
68. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:29:16.411 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7756fabc
2023-06-29 23:29:16.411 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-29 23:29:16.411 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-29 23:29:16.413 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
69. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:29:16.428 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
69. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 15 msec}
2023-06-29 23:29:16.439 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
69. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 10 msec}
2023-06-29 23:29:17.917 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3afba261
2023-06-29 23:29:17.917 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-29 23:29:17.918 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
2023-06-29 23:29:17.918 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
69. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:29:17.919 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
69. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-29 23:29:17.920 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
69. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-29 23:29:17.935 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6de4b249
2023-06-29 23:29:17.936 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-06-29 23:29:17.936 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
2023-06-29 23:29:17.937 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
69. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
 {executed in 1 msec}
2023-06-29 23:29:17.939 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
69. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
 {executed in 1 msec}
2023-06-29 23:29:22.741 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@30edd8a4
2023-06-29 23:29:22.741 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ROUTE_COMMON_INFO} 
2023-06-29 23:29:22.742 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '배차정시성대상회차' order by a.route_nm
2023-06-29 23:29:22.743 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
69. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:29:22.744 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
69. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '배차정시성대상회차' order by a.route_nm
 {executed in 1 msec}
2023-06-29 23:29:22.746 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
69. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '배차정시성대상회차' order by a.route_nm
 {executed in 0 msec}
2023-06-29 23:29:43.433 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
69. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:29:43.434 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
69. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-29 23:29:45.378 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
2023-06-29 23:29:45.379 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
69. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:29:45.380 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
69. select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
 {executed in 1 msec}
2023-06-29 23:30:26.879 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
2023-06-29 23:30:26.881 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
69. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:30:26.882 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
69. select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
 {executed in 1 msec}
2023-06-29 23:32:12.268 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1188376b
2023-06-29 23:32:12.268 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:32:12.268 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
2023-06-29 23:32:12.269 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:32:12.272 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 23:32:12.275 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:32:25.061 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7756fabc
2023-06-29 23:32:25.061 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-29 23:32:25.061 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-29 23:32:25.062 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:32:25.071 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 9 msec}
2023-06-29 23:32:25.083 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 12 msec}
2023-06-29 23:32:28.307 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3afba261
2023-06-29 23:32:28.307 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-29 23:32:28.307 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
2023-06-29 23:32:28.308 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:32:28.309 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-29 23:32:28.310 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-29 23:32:28.323 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@831c5585
2023-06-29 23:32:28.323 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-06-29 23:32:28.323 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-01' order by a.col002
2023-06-29 23:32:28.325 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-01' order by a.col002
 {executed in 1 msec}
2023-06-29 23:32:28.326 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-01' order by a.col002
 {executed in 1 msec}
2023-06-29 23:32:33.485 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@30edd8a4
2023-06-29 23:32:33.485 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ROUTE_COMMON_INFO} 
2023-06-29 23:32:33.485 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '배차정시성대상회차' order by a.route_nm
2023-06-29 23:32:33.486 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:32:33.487 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '배차정시성대상회차' order by a.route_nm
 {executed in 0 msec}
2023-06-29 23:32:33.488 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '배차정시성대상회차' order by a.route_nm
 {executed in 0 msec}
2023-06-29 23:32:42.572 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:32:42.573 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-29 23:32:43.915 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
2023-06-29 23:32:43.916 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:32:43.917 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
 {executed in 0 msec}
2023-06-29 23:33:25.374 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
2023-06-29 23:33:25.375 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:33:25.376 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
 {executed in 1 msec}
2023-06-29 23:33:50.260 INFO  [RMI TCP Connection(153)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-06-29 23:33:50.290 INFO  [RMI TCP Connection(153)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-06-29 23:33:50.292 INFO  [RMI TCP Connection(153)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-06-29 23:33:50.299 INFO  [RMI TCP Connection(153)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-06-29 23:33:50.342 INFO  [RMI TCP Connection(153)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-06-29 23:33:54.112 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 27388 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-29 23:33:54.118 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-29 23:33:54.171 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-29 23:33:54.172 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-29 23:33:55.372 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-29 23:33:55.372 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-29 23:33:55.516 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 136ms. Found 3 JPA repository interfaces.
2023-06-29 23:33:55.863 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-29 23:33:55.864 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-29 23:33:55.910 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-29 23:33:55.911 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-29 23:33:55.911 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-29 23:33:55.912 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 47ms. Found 0 JDBC repository interfaces.
2023-06-29 23:33:56.346 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-29 23:33:56.416 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-29 23:33:56.416 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-29 23:33:56.416 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-29 23:33:56.416 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-29 23:33:56.416 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-29 23:33:56.417 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-29 23:33:56.417 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-29 23:33:56.417 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-29 23:33:56.417 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-29 23:33:56.417 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-29 23:33:56.417 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-29 23:33:56.418 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-29 23:33:56.480 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$c1634c2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 23:33:56.537 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-29 23:33:56.624 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$f60c98ef] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 23:33:56.705 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 23:33:56.707 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@32918747' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 23:33:56.712 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$1ae13ba1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 23:33:56.722 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$403653b7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 23:33:56.726 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 23:33:56.728 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 23:33:56.748 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$5d5ed0b5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 23:33:56.780 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$dcdf1de7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-29 23:33:56.914 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-29 23:33:56.919 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-29 23:33:57.355 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-29 23:33:57.371 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-29 23:33:57.382 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-29 23:33:57.382 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-29 23:33:57.756 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-29 23:33:57.769 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-29 23:33:57.769 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3597 ms
2023-06-29 23:33:58.619 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@1df8fd77 with name: jasyptStringEncryptor
2023-06-29 23:33:58.663 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-29 23:33:58.749 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 8 msec}
2023-06-29 23:33:58.754 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-29 23:33:59.537 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-29 23:33:59.853 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-29 23:33:59.933 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-29 23:33:59.935 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-29 23:34:00.091 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-29 23:34:00.353 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:34:00.371 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-29 23:34:01.118 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:34:01.121 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-29 23:34:01.170 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-29 23:34:01.426 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-29 23:34:02.501 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-29 23:34:02.511 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-29 23:34:02.692 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-29 23:34:02.692 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-29 23:34:02.692 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-29 23:34:02.692 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-29 23:34:02.692 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-29 23:34:02.693 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-29 23:34:02.693 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-29 23:34:02.693 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-29 23:34:02.693 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-29 23:34:02.850 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@152803dd, org.springframework.security.web.context.SecurityContextPersistenceFilter@7da3672, org.springframework.security.web.header.HeaderWriterFilter@29de5140, org.springframework.web.filter.CorsFilter@695f7d63, org.springframework.security.web.authentication.logout.LogoutFilter@7e57a516, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@5a1af0d6, org.springframework.security.web.session.ConcurrentSessionFilter@103b212a, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@45d8cbb, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@78e5075d, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@77106126, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@66a20887, org.springframework.security.web.session.SessionManagementFilter@579e4cd7, org.springframework.security.web.access.ExceptionTranslationFilter@2ab99f98, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1377de80]
2023-06-29 23:34:02.872 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-29 23:34:03.233 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-29 23:34:03.307 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-29 23:34:03.718 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:34:04.529 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-29 23:34:04.557 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-29 23:34:04.697 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-29 23:34:04.701 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-29 23:34:04.772 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-29 23:34:04.776 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.123 seconds (JVM running for 12.432)
2023-06-29 23:34:04.777 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-29 23:34:04.777 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-29 23:34:04.777 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-29 23:34:05.928 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-29 23:34:05.928 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-29 23:34:05.949 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 21 ms
2023-06-29 23:34:10.367 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:34:10.368 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-29 23:34:12.201 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
2023-06-29 23:34:12.202 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:34:12.203 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
 {executed in 1 msec}
2023-06-29 23:36:05.393 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
2023-06-29 23:36:05.394 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:36:05.395 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
 {executed in 1 msec}
2023-06-29 23:38:43.018 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
2023-06-29 23:38:43.019 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:38:43.020 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
 {executed in 1 msec}
2023-06-29 23:38:48.740 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:38:48.741 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-29 23:38:51.379 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
2023-06-29 23:38:51.380 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:38:51.382 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.*,'' as excelFile,'N' as bit from    TBL_FILE_INFO a where   a.company_no = '100' and     a.orgnm like 'templete%' order by a.file_gb,a.file_id
 {executed in 0 msec}
2023-06-29 23:38:58.026 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@30edd8a4
2023-06-29 23:38:58.026 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ROUTE_COMMON_INFO} 
2023-06-29 23:38:58.027 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '배차정시성대상회차' order by a.route_nm
2023-06-29 23:38:58.029 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:38:58.030 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '배차정시성대상회차' order by a.route_nm
 {executed in 1 msec}
2023-06-29 23:38:58.031 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '배차정시성대상회차' order by a.route_nm
 {executed in 0 msec}
2023-06-29 23:39:03.506 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7756fabc
2023-06-29 23:39:03.506 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-29 23:39:03.506 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-29 23:39:03.507 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:39:03.518 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 10 msec}
2023-06-29 23:39:03.528 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 10 msec}
2023-06-29 23:39:04.703 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3afba261
2023-06-29 23:39:04.703 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-29 23:39:04.703 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
2023-06-29 23:39:04.704 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:39:04.705 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-29 23:39:04.707 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-29 23:39:04.722 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6de4b249
2023-06-29 23:39:04.722 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-06-29 23:39:04.722 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
2023-06-29 23:39:04.724 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
 {executed in 1 msec}
2023-06-29 23:39:04.726 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
 {executed in 1 msec}
2023-06-29 23:39:07.109 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@30edd8a4
2023-06-29 23:39:07.109 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ROUTE_COMMON_INFO} 
2023-06-29 23:39:07.110 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '배차정시성대상회차' order by a.route_nm
2023-06-29 23:39:07.111 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:39:07.112 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '배차정시성대상회차' order by a.route_nm
 {executed in 0 msec}
2023-06-29 23:39:07.113 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '배차정시성대상회차' order by a.route_nm
 {executed in 0 msec}
2023-06-29 23:39:12.658 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6e1be03c
2023-06-29 23:39:12.658 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ROUTEINFO} 
2023-06-29 23:39:12.658 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBL_ROUTEINFO a where   a.company_no = '100' order by a.lno
2023-06-29 23:39:12.659 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:39:12.660 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBL_ROUTEINFO a where   a.company_no = '100' order by a.lno
 {executed in 1 msec}
2023-06-29 23:39:12.662 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBL_ROUTEINFO a where   a.company_no = '100' order by a.lno
 {executed in 1 msec}
2023-06-29 23:39:15.162 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1188376b
2023-06-29 23:39:15.162 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:39:15.162 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
2023-06-29 23:39:15.163 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:39:15.167 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 4 msec}
2023-06-29 23:39:15.170 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:42:20.465 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1188376b
2023-06-29 23:42:20.465 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:42:20.465 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
2023-06-29 23:42:20.466 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:42:20.469 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:42:20.471 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:42:29.017 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1188376b
2023-06-29 23:42:29.017 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:42:29.017 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
2023-06-29 23:42:29.018 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:42:29.021 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 23:42:29.024 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:51:27.564 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1188376b
2023-06-29 23:51:27.565 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:51:27.565 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
2023-06-29 23:51:27.566 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:51:27.568 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:51:27.571 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:51:53.243 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1188376b
2023-06-29 23:51:53.243 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:51:53.244 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
2023-06-29 23:51:53.244 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:51:53.247 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:51:53.250 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 23:53:19.073 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1188376b
2023-06-29 23:53:19.074 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:53:19.074 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
2023-06-29 23:53:19.075 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-29 23:53:19.077 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:53:19.080 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-06-29 23:57:36.741 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1188376b
2023-06-29 23:57:36.741 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-06-29 23:57:36.741 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
2023-06-29 23:57:36.742 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-29 23:57:36.745 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 3 msec}
2023-06-29 23:57:36.747 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01-01' and '2023-12-31' order by a.acc_date,acc_time
 {executed in 1 msec}
