2023-06-28 00:03:40.022 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 00:03:40.024 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:03:40.026 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:03:41.483 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 00:03:41.484 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:03:41.486 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:03:42.517 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@62350d5a
2023-06-28 00:03:42.518 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:03:42.519 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:06:22.034 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 00:06:22.036 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:06:22.038 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 2 msec}
2023-06-28 00:06:23.350 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 00:06:23.351 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:06:23.352 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:10:20.439 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 00:10:20.440 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:10:20.443 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:10:21.500 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 00:10:21.501 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:10:21.504 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:11:31.591 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 00:11:31.592 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:11:31.594 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:11:32.772 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 00:11:32.773 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:11:32.774 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:13:13.611 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 00:13:13.612 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:13:13.614 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:13:15.340 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 00:13:15.341 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:13:15.342 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:13:33.110 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e52d869f
2023-06-28 00:13:33.111 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:13:33.112 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'21번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:15:12.574 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 00:15:12.575 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:15:12.578 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:15:13.809 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 00:15:13.811 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:15:13.812 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:15:15.014 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 00:15:15.015 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:15:15.016 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:15:17.009 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6dc9dde0
2023-06-28 00:15:17.010 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:15:17.012 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:15:18.910 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1da13791
2023-06-28 00:15:18.912 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:15:18.913 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:15:49.455 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e22ef770
2023-06-28 00:15:49.456 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:15:49.459 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:15:51.214 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d1ebd41d
2023-06-28 00:15:51.215 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:15:51.216 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:16:07.343 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1da13791
2023-06-28 00:16:07.344 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:16:07.345 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:16:17.257 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 00:16:17.258 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:16:17.260 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:16:20.329 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6dc9dde0
2023-06-28 00:16:20.330 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:16:20.331 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:20:21.561 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 00:20:21.562 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:20:21.564 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:20:22.924 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 00:20:22.925 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:20:22.926 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:20:24.097 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 00:20:24.098 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:20:24.100 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:20:25.259 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1da13791
2023-06-28 00:20:25.260 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:20:25.261 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:20:26.339 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6dc9dde0
2023-06-28 00:20:26.341 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:20:26.342 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:20:32.580 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6dc9dde0
2023-06-28 00:20:32.581 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:20:32.583 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:20:33.615 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1da13791
2023-06-28 00:20:33.616 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:20:33.617 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:20:34.860 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 00:20:34.861 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:20:34.863 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:20:39.244 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d78c334c
2023-06-28 00:20:39.245 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:20:39.247 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:20:40.341 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c392e35e
2023-06-28 00:20:40.342 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:20:40.344 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'20번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:20:42.272 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fad5f92f
2023-06-28 00:20:42.273 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:20:42.274 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'21번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:20:45.142 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@468b5ca3
2023-06-28 00:20:45.143 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:20:45.145 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'21번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:20:48.798 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1da13791
2023-06-28 00:20:48.799 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:20:48.799 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:20:50.740 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 00:20:50.741 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:20:50.742 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:20:52.907 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6dc9dde0
2023-06-28 00:20:52.908 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:20:52.910 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:20:55.603 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a499e7d
2023-06-28 00:20:55.604 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:20:55.605 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:20:57.217 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5adb553
2023-06-28 00:20:57.218 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:20:57.220 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'5번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:20:59.815 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@93aaacd3
2023-06-28 00:20:59.815 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:20:59.817 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5-1번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 2 msec}
2023-06-28 00:21:01.341 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2f88b696
2023-06-28 00:21:01.342 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:21:01.344 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'5-1번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:21:02.247 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@df601047
2023-06-28 00:21:02.248 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:21:02.250 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'5-1번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:21:09.063 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c392e35e
2023-06-28 00:21:09.064 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:21:09.066 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'20번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:21:30.183 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@33fbf971
2023-06-28 00:21:30.184 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:21:30.185 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5-1번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:21:30.998 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2f88b696
2023-06-28 00:21:30.999 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:21:31.000 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'5-1번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:21:32.779 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@df601047
2023-06-28 00:21:32.780 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:21:32.781 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'5-1번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:23:20.307 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 00:23:20.308 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:23:20.311 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:23:21.952 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 00:23:21.953 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:23:21.954 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:23:23.982 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 00:23:23.983 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:23:23.984 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:23:28.232 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@69f851df
2023-06-28 00:23:28.233 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:23:28.234 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:23:29.914 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5adb553
2023-06-28 00:23:29.915 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:23:29.916 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'5번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:24:31.316 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 00:24:31.317 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:24:31.318 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:24:32.538 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 00:24:32.539 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:24:32.540 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:24:35.650 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 00:24:35.652 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:24:35.653 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:24:52.038 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@69f851df
2023-06-28 00:24:52.039 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:24:52.040 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:24:56.315 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@93aaacd3
2023-06-28 00:24:56.316 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:24:56.317 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5-1번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:25:38.622 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 00:25:38.623 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:25:38.624 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:25:40.037 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 00:25:40.038 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:25:40.039 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:25:42.246 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f4a12bed
2023-06-28 00:25:42.248 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:25:42.249 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:25:43.634 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5adb553
2023-06-28 00:25:43.635 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:25:43.636 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'5번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:25:45.258 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5a84ac91
2023-06-28 00:25:45.259 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:25:45.261 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'21번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:26:30.993 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 00:26:30.994 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:26:30.997 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:26:32.675 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 00:26:32.676 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:26:32.677 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:26:34.975 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 00:26:34.975 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:26:34.976 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:26:37.368 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@69f851df
2023-06-28 00:26:37.369 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:26:37.370 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:26:38.566 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5adb553
2023-06-28 00:26:38.567 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:26:38.569 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'5번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:27:36.746 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 00:27:36.747 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:27:36.749 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 2 msec}
2023-06-28 00:27:39.247 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 00:27:39.248 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:27:39.249 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:27:40.793 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 00:27:40.794 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:27:40.796 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:27:47.838 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@69f851df
2023-06-28 00:27:47.839 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:27:47.840 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:27:49.851 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5adb553
2023-06-28 00:27:49.852 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:27:49.854 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'5번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:27:59.531 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1da13791
2023-06-28 00:27:59.532 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:27:59.534 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:28:00.715 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6dc9dde0
2023-06-28 00:28:00.716 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:28:00.718 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:28:25.779 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77dd7fea
2023-06-28 00:28:25.781 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
34. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:28:25.783 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
34. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:28:27.619 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fad5f92f
2023-06-28 00:28:27.621 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
34. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:28:27.622 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
34. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'21번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:28:29.558 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@22147a6c
2023-06-28 00:28:29.559 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
34. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:28:29.561 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
34. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:28:46.159 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 00:28:46.160 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
38. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:28:46.162 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
38. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:29:58.804 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 00:29:58.805 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:29:58.807 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:30:02.891 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 00:30:02.892 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:30:02.894 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:30:04.853 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 00:30:04.854 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:30:04.855 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:30:07.865 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1da13791
2023-06-28 00:30:07.866 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:30:07.867 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:30:09.221 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6dc9dde0
2023-06-28 00:30:09.222 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:30:09.225 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:31:08.181 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 00:31:08.182 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:31:08.184 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:31:11.064 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 00:31:11.065 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:31:11.066 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:31:13.046 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 00:31:13.047 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:31:13.048 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:31:16.073 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1da13791
2023-06-28 00:31:16.074 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:31:16.076 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:31:17.393 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6dc9dde0
2023-06-28 00:31:17.394 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:31:17.395 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 00:32:07.623 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 00:32:07.625 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:32:07.627 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:32:09.317 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 00:32:09.319 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 00:32:09.320 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:32:11.466 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 00:32:11.467 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:32:11.469 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 00:32:31.135 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 00:32:31.136 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 00:32:31.138 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 04:04:27.666 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-28 04:04:28.310 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=3h15s116ms880µs600ns).
2023-06-28 08:46:25.643 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-28 08:46:25.643 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-28 08:46:25.643 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-28 08:46:55.630 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=4h42m45s816ms700µs800ns).
2023-06-28 08:50:11.884 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-28 08:50:11.884 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-28 08:50:11.884 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-06-28 08:50:11.884 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-28 08:50:11.884 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-06-28 08:50:12.652 ERROR [http-nio-10010-exec-8] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$8b024c06.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 08:50:12.657 ERROR [http-nio-10010-exec-8] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$8b024c06.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 08:50:12.661 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-28 08:50:12.662 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-28 08:50:12.662 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-28 08:50:12.662 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-28 08:50:12.662 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-28 08:50:12.857 ERROR [http-nio-10010-exec-8] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$8b024c06.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 08:50:12.858 ERROR [http-nio-10010-exec-8] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$8b024c06.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 08:50:12.859 ERROR [http-nio-10010-exec-8] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$8b024c06.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 97 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 100 common frames omitted
2023-06-28 08:50:13.169 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-28 08:50:13.169 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-28 08:50:13.169 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-28 08:50:13.169 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-28 08:50:13.169 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-28 08:50:15.127 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 08:50:15.131 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
61. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-06-28 08:50:15.165 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-28 08:50:15.253 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$kPtG7OctFBr4j/1r5qUOrO167orLfDs2N.eLJqGJRrSjeAMHrDksK
2023-06-28 08:50:15.343 INFO  [http-nio-10010-exec-10] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-28 08:50:22.785 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 08:50:22.786 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 08:50:22.793 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 5 msec}
2023-06-28 08:50:28.294 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 08:50:28.295 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 08:50:28.297 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 08:50:52.536 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 08:50:52.537 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 08:50:52.538 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 08:52:39.284 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 08:52:39.285 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 08:52:39.286 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 08:52:41.114 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 08:52:41.115 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 08:52:41.116 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 08:52:47.668 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 08:52:47.669 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 08:52:47.670 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 08:53:33.147 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 08:53:33.149 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 08:53:33.151 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 08:53:34.602 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 08:53:34.603 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 08:53:34.605 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 08:53:36.192 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 08:53:36.194 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 08:53:36.195 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 08:54:33.850 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 08:54:33.851 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 08:54:33.853 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 08:54:35.186 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 08:54:35.187 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 08:54:35.188 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 08:54:36.942 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 08:54:36.943 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 08:54:36.944 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 08:55:39.061 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 08:55:39.062 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 08:55:39.064 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 08:55:40.244 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 08:55:40.245 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 08:55:40.246 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 08:55:41.168 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 08:55:41.168 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 08:55:41.170 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 08:56:18.469 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d78c334c
2023-06-28 08:56:18.471 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 08:56:18.473 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 08:56:19.315 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c392e35e
2023-06-28 08:56:19.316 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 08:56:19.318 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'20번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 08:56:20.674 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6dc9dde0
2023-06-28 08:56:20.675 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 08:56:20.676 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 08:56:22.157 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1da13791
2023-06-28 08:56:22.158 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 08:56:22.160 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 08:56:26.139 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1da13791
2023-06-28 08:56:26.140 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 08:56:26.141 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 08:58:37.845 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 08:58:37.845 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 08:58:37.848 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 2 msec}
2023-06-28 08:58:39.489 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f4a12bed
2023-06-28 08:58:39.490 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 08:58:39.491 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 08:58:40.762 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e52d869f
2023-06-28 08:58:40.763 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 08:58:40.764 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'21번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 08:58:41.568 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@62350d5a
2023-06-28 08:58:41.569 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 08:58:41.570 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 08:58:42.575 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 08:58:42.576 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 08:58:42.578 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 08:59:08.024 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 08:59:08.025 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 08:59:08.027 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 08:59:14.037 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 08:59:14.038 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 08:59:14.039 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 08:59:17.389 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6dc9dde0
2023-06-28 08:59:17.390 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 08:59:17.391 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:00:37.735 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:00:37.736 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:00:37.737 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:00:39.259 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 09:00:39.260 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:00:39.261 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:00:40.453 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 09:00:40.454 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:00:40.455 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:00:44.116 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1da13791
2023-06-28 09:00:44.118 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:00:44.119 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:00:45.810 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6dc9dde0
2023-06-28 09:00:45.811 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:00:45.812 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:01:34.018 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@22147a6c
2023-06-28 09:01:34.019 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:01:34.020 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:01:36.491 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 09:01:36.492 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:01:36.493 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:02:02.292 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@69f851df
2023-06-28 09:02:02.293 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:02:02.294 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:02:03.552 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@93aaacd3
2023-06-28 09:02:03.553 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:02:03.555 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5-1번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:04:16.011 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:04:16.011 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:04:16.013 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:04:17.706 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@62350d5a
2023-06-28 09:04:17.707 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:04:17.708 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:04:18.560 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f4a12bed
2023-06-28 09:04:18.561 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:04:18.561 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:04:19.194 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1e5386e1
2023-06-28 09:04:19.195 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:04:19.196 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5-1번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:04:20.229 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e52d869f
2023-06-28 09:04:20.230 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:04:20.232 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'21번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:05:38.144 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:05:38.145 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:05:38.147 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:05:39.822 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 09:05:39.823 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:05:39.824 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:05:44.263 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f4a12bed
2023-06-28 09:05:44.264 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:05:44.265 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:05:45.141 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e52d869f
2023-06-28 09:05:45.142 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:05:45.143 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'21번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:05:45.851 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@62350d5a
2023-06-28 09:05:45.852 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:05:45.853 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:07:29.934 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:07:29.935 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:07:29.937 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:07:31.990 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f4a12bed
2023-06-28 09:07:31.991 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:07:31.993 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:07:32.622 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 09:07:32.623 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:07:32.624 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:07:33.961 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1e5386e1
2023-06-28 09:07:33.962 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:07:33.963 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5-1번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:07:35.000 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e52d869f
2023-06-28 09:07:35.001 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:07:35.002 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'21번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:07:36.865 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@62350d5a
2023-06-28 09:07:36.866 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:07:36.867 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:08:58.353 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:08:58.354 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:08:58.356 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:09:00.624 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 09:09:00.625 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:09:00.626 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:09:02.527 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 09:09:02.528 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:09:02.529 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:09:03.573 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1da13791
2023-06-28 09:09:03.574 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:09:03.575 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:09:04.467 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@27b4d99b
2023-06-28 09:09:04.467 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:09:04.468 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:09:38.191 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:09:38.192 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:09:38.194 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:09:39.857 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 09:09:39.858 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:09:39.859 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:09:41.731 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f4a12bed
2023-06-28 09:09:41.732 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:09:41.733 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:09:42.546 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1e5386e1
2023-06-28 09:09:42.547 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:09:42.548 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5-1번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:09:44.549 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@62350d5a
2023-06-28 09:09:44.550 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:09:44.551 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:10:23.859 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:10:23.860 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:10:23.861 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:10:25.454 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 09:10:25.455 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:10:25.455 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:10:26.411 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e52d869f
2023-06-28 09:10:26.412 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:10:26.413 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'21번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:10:27.732 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f4a12bed
2023-06-28 09:10:27.733 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:10:27.733 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:10:29.193 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5adb553
2023-06-28 09:10:29.194 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:10:29.195 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'5번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:10:43.400 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:10:43.401 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:10:43.403 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:10:44.616 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 09:10:44.617 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:10:44.618 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:10:45.538 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 09:10:45.539 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:10:45.541 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:10:47.418 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@69f851df
2023-06-28 09:10:47.419 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:10:47.420 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:10:48.832 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@93aaacd3
2023-06-28 09:10:48.833 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:10:48.834 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5-1번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:11:23.968 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:11:23.969 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:11:23.971 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:11:25.468 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 09:11:25.469 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:11:25.470 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:11:27.396 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 09:11:27.397 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:11:27.398 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:11:28.150 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@69f851df
2023-06-28 09:11:28.151 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:11:28.152 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:11:28.997 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5a84ac91
2023-06-28 09:11:28.998 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:11:28.999 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'21번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:12:27.955 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:12:27.956 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:12:27.957 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:12:29.774 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 09:12:29.775 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:12:29.775 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:12:31.884 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 09:12:31.885 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:12:31.886 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:12:35.098 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@69f851df
2023-06-28 09:12:35.099 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:12:35.100 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:12:36.232 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5a84ac91
2023-06-28 09:12:36.233 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:12:36.234 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'21번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:12:37.168 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d78c334c
2023-06-28 09:12:37.169 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:12:37.170 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:13:45.287 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:13:45.288 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:13:45.290 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:13:46.937 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 09:13:46.938 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:13:46.939 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:13:49.422 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 09:13:49.423 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:13:49.424 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:13:51.862 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d78c334c
2023-06-28 09:13:51.863 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:13:51.864 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:13:52.649 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5a84ac91
2023-06-28 09:13:52.649 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:13:52.650 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'21번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:14:13.607 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:14:13.607 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:14:13.609 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:14:15.414 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 09:14:15.415 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:14:15.416 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:14:17.194 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 09:14:17.195 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:14:17.196 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:14:23.872 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d78c334c
2023-06-28 09:14:23.873 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:14:23.874 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:14:24.869 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5a84ac91
2023-06-28 09:14:24.870 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:14:24.870 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'21번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:16:00.285 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:16:00.285 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:16:00.287 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:16:01.635 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 09:16:01.635 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:16:01.636 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:16:03.182 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 09:16:03.183 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:16:03.184 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:16:05.050 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@69f851df
2023-06-28 09:16:05.050 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:16:05.051 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:16:05.888 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@93aaacd3
2023-06-28 09:16:05.889 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:16:05.889 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5-1번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:16:09.940 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d78c334c
2023-06-28 09:16:09.941 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:16:09.942 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:16:10.822 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6dc9dde0
2023-06-28 09:16:10.823 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:16:10.824 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:17:05.894 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:17:05.895 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:17:05.897 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:17:07.652 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 09:17:07.653 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:17:07.654 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:17:09.569 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f4a12bed
2023-06-28 09:17:09.570 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:17:09.571 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:17:10.236 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1e5386e1
2023-06-28 09:17:10.237 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:17:10.238 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5-1번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:17:10.988 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e52d869f
2023-06-28 09:17:10.989 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:17:10.990 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'21번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:17:57.190 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:17:57.191 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:17:57.193 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:18:03.145 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 09:18:03.146 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:18:03.146 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:18:06.686 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@62350d5a
2023-06-28 09:18:06.687 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:18:06.687 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:18:07.775 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f4a12bed
2023-06-28 09:18:07.776 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:18:07.777 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:18:08.406 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1e5386e1
2023-06-28 09:18:08.407 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:18:08.408 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5-1번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:18:11.511 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c392e35e
2023-06-28 09:18:11.512 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:18:11.513 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'20번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:19:03.474 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:19:03.475 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:19:03.477 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:19:07.132 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 09:19:07.133 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:19:07.134 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:19:09.118 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 09:19:09.119 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:19:09.120 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:19:12.661 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1da13791
2023-06-28 09:19:12.662 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:19:12.664 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 2 msec}
2023-06-28 09:19:15.815 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6dc9dde0
2023-06-28 09:19:15.816 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:19:15.817 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:19:33.379 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@22147a6c
2023-06-28 09:19:33.380 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:19:33.381 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:19:39.046 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 09:19:39.047 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:19:39.048 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:24:55.194 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:24:55.195 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:24:55.197 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:24:56.567 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 09:24:56.568 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:24:56.569 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:24:57.731 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 09:24:57.733 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:24:57.734 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:26:01.193 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:26:01.195 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:26:01.197 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:26:03.348 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 09:26:03.350 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:26:03.352 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:26:05.905 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 09:26:05.907 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
79. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:26:05.908 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
79. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:26:56.784 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:26:56.785 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:26:56.787 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:26:58.195 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 09:26:58.197 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:26:58.199 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:26:59.485 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 09:26:59.486 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:26:59.487 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:29:26.017 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:29:26.018 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:29:26.020 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:29:27.441 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 09:29:27.442 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:29:27.443 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:29:28.383 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 09:29:28.384 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:29:28.385 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:30:15.781 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:30:15.782 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:30:15.785 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:30:17.172 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 09:30:17.173 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:30:17.174 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:30:18.281 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 09:30:18.282 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:30:18.283 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:30:19.150 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 09:30:19.151 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:30:19.154 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.col002,a.col003
 {executed in 2 msec}
2023-06-28 09:30:25.918 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@deab8c97
2023-06-28 09:30:25.919 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:30:25.921 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:30:26.826 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cab23ca9
2023-06-28 09:30:26.827 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:30:26.829 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'20번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:30:27.764 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@36ac85ec
2023-06-28 09:30:27.765 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:30:27.766 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	ORDER BY a.col002,a.col003
 {executed in 1 msec}
2023-06-28 09:30:41.577 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:30:41.578 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:30:41.579 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:30:43.160 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 09:30:43.161 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:30:43.162 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:30:44.154 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 09:30:44.155 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:30:44.157 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:30:45.966 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 09:30:45.967 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:30:45.968 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.col002,a.col003
 {executed in 1 msec}
2023-06-28 09:33:27.398 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 09:33:27.399 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:33:27.401 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:33:29.279 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 09:33:29.280 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:33:29.281 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:33:30.064 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 09:33:30.065 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:33:30.066 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:33:30.967 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@69f851df
2023-06-28 09:33:30.968 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:33:30.969 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:33:32.043 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@93aaacd3
2023-06-28 09:33:32.044 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:33:32.046 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5-1번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:33:46.316 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6dc9dde0
2023-06-28 09:33:46.318 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:33:46.320 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:33:57.871 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a499e7d
2023-06-28 09:33:57.872 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:33:57.873 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:33:58.937 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5adb553
2023-06-28 09:33:58.938 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:33:58.940 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'5번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 09:33:59.698 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6c7c1645
2023-06-28 09:33:59.699 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:33:59.700 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.col002,a.col003
 {executed in 1 msec}
2023-06-28 09:44:17.917 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9aca061e
2023-06-28 09:44:17.918 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:44:17.919 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5-1번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:44:19.811 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e67f6992
2023-06-28 09:44:19.812 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:44:19.813 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'5-1번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:44:20.964 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@36a80fe1
2023-06-28 09:44:20.965 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:44:20.966 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'5-1번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 09:47:24.011 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d705ae1e
2023-06-28 09:47:24.011 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-28 09:47:24.089 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-28 09:47:24.122 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:47:24.135 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 13 msec}
2023-06-28 09:47:24.159 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 9 msec}
2023-06-28 09:47:25.345 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d705ae1e
2023-06-28 09:47:25.345 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-28 09:47:25.346 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-28 09:47:25.347 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:47:25.356 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 8 msec}
2023-06-28 09:47:25.363 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 7 msec}
2023-06-28 09:47:27.446 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56c8cf4a
2023-06-28 09:47:27.446 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 09:47:27.447 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 09:47:27.448 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:47:27.448 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-28 09:47:27.449 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-28 09:47:27.461 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e6becbc8
2023-06-28 09:47:27.461 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-06-28 09:47:27.461 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
2023-06-28 09:47:27.463 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 09:47:27.464 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 09:47:47.362 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b73b1e1
2023-06-28 09:47:47.362 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 09:47:47.362 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 09:47:47.363 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:47:47.364 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 09:47:47.365 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 09:47:47.377 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@15c2ca8f
2023-06-28 09:47:47.377 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_BEFORE} 
2023-06-28 09:47:47.377 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
2023-06-28 09:47:47.391 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 13 msec}
2023-06-28 09:47:47.398 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 7 msec}
2023-06-28 09:47:49.667 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b2ea7774
2023-06-28 09:47:49.667 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 09:47:49.667 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 09:47:49.668 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:47:49.669 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 09:47:49.670 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-28 09:52:38.790 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d705ae1e
2023-06-28 09:52:38.790 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-28 09:52:38.791 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-28 09:52:38.792 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:52:38.800 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 8 msec}
2023-06-28 09:52:38.808 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 8 msec}
2023-06-28 09:52:40.773 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56c8cf4a
2023-06-28 09:52:40.773 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 09:52:40.773 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 09:52:40.774 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:52:40.775 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 09:52:40.776 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 09:52:40.787 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e6becbc8
2023-06-28 09:52:40.787 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-06-28 09:52:40.787 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
2023-06-28 09:52:40.789 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 09:52:40.790 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 09:52:57.121 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b73b1e1
2023-06-28 09:52:57.121 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 09:52:57.121 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 09:52:57.121 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:52:57.122 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-28 09:52:57.123 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 09:52:57.136 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@15c2ca8f
2023-06-28 09:52:57.136 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_BEFORE} 
2023-06-28 09:52:57.136 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
2023-06-28 09:52:57.144 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 8 msec}
2023-06-28 09:52:57.152 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 7 msec}
2023-06-28 09:52:58.863 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b2ea7774
2023-06-28 09:52:58.863 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 09:52:58.863 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 09:52:58.864 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:52:58.865 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 09:52:58.866 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 09:54:05.667 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d705ae1e
2023-06-28 09:54:05.667 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-28 09:54:05.668 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-28 09:54:05.668 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:54:05.677 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 9 msec}
2023-06-28 09:54:05.692 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 15 msec}
2023-06-28 09:54:06.571 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56c8cf4a
2023-06-28 09:54:06.571 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 09:54:06.571 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 09:54:06.572 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:54:06.573 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 09:54:06.573 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-28 09:54:06.587 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e6becbc8
2023-06-28 09:54:06.587 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-06-28 09:54:06.587 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
2023-06-28 09:54:06.589 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 09:54:06.591 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 09:54:09.635 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b73b1e1
2023-06-28 09:54:09.635 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 09:54:09.635 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 09:54:09.636 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:54:09.637 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 09:54:09.638 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-28 09:54:09.654 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@15c2ca8f
2023-06-28 09:54:09.655 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_BEFORE} 
2023-06-28 09:54:09.655 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
2023-06-28 09:54:09.664 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 9 msec}
2023-06-28 09:54:09.671 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 7 msec}
2023-06-28 09:54:15.003 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b2ea7774
2023-06-28 09:54:15.003 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 09:54:15.003 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 09:54:15.004 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:54:15.005 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 09:54:15.006 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 09:56:03.375 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d705ae1e
2023-06-28 09:56:03.375 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-28 09:56:03.375 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-28 09:56:03.376 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:56:03.384 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 8 msec}
2023-06-28 09:56:03.391 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 7 msec}
2023-06-28 09:56:04.738 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56c8cf4a
2023-06-28 09:56:04.738 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 09:56:04.738 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 09:56:04.739 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:56:04.740 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 09:56:04.741 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 09:56:04.752 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e6becbc8
2023-06-28 09:56:04.752 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-06-28 09:56:04.752 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
2023-06-28 09:56:04.754 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 09:56:04.755 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 09:56:07.086 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b73b1e1
2023-06-28 09:56:07.086 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 09:56:07.086 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 09:56:07.087 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:56:07.088 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 09:56:07.089 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 09:56:07.100 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@15c2ca8f
2023-06-28 09:56:07.100 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_BEFORE} 
2023-06-28 09:56:07.100 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
2023-06-28 09:56:07.107 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 7 msec}
2023-06-28 09:56:07.114 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 6 msec}
2023-06-28 09:56:12.753 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b2ea7774
2023-06-28 09:56:12.753 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 09:56:12.753 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 09:56:12.754 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:56:12.755 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 09:56:12.755 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-28 09:59:45.470 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d705ae1e
2023-06-28 09:59:45.471 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-28 09:59:45.471 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-28 09:59:45.472 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:59:45.483 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 10 msec}
2023-06-28 09:59:45.490 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 7 msec}
2023-06-28 09:59:46.640 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56c8cf4a
2023-06-28 09:59:46.640 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 09:59:46.640 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 09:59:46.641 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 09:59:46.642 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 09:59:46.643 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 09:59:46.654 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e6becbc8
2023-06-28 09:59:46.654 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-06-28 09:59:46.654 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
2023-06-28 09:59:46.655 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 09:59:46.656 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 09:59:49.167 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b73b1e1
2023-06-28 09:59:49.167 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 09:59:49.168 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 09:59:49.168 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:59:49.169 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 09:59:49.170 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 09:59:49.183 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@15c2ca8f
2023-06-28 09:59:49.183 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_BEFORE} 
2023-06-28 09:59:49.183 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
2023-06-28 09:59:49.191 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 8 msec}
2023-06-28 09:59:49.199 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 7 msec}
2023-06-28 09:59:56.453 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b2ea7774
2023-06-28 09:59:56.453 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 09:59:56.453 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 09:59:56.454 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 09:59:56.455 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 09:59:56.456 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 10:00:43.700 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d705ae1e
2023-06-28 10:00:43.700 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-28 10:00:43.700 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-28 10:00:43.701 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 10:00:43.708 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 7 msec}
2023-06-28 10:00:43.717 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 9 msec}
2023-06-28 10:00:44.699 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56c8cf4a
2023-06-28 10:00:44.699 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 10:00:44.699 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 10:00:44.700 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 10:00:44.701 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 10:00:44.702 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 10:00:44.714 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e6becbc8
2023-06-28 10:00:44.714 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-06-28 10:00:44.714 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
2023-06-28 10:00:44.716 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 2 msec}
2023-06-28 10:00:44.717 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 10:00:47.512 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b73b1e1
2023-06-28 10:00:47.512 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 10:00:47.513 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 10:00:47.513 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 10:00:47.514 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 10:00:47.515 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 10:00:47.526 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@15c2ca8f
2023-06-28 10:00:47.526 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_BEFORE} 
2023-06-28 10:00:47.526 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
2023-06-28 10:00:47.534 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 7 msec}
2023-06-28 10:00:47.541 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 7 msec}
2023-06-28 10:01:09.685 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d705ae1e
2023-06-28 10:01:09.685 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-28 10:01:09.686 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-28 10:01:09.686 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 10:01:09.695 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 7 msec}
2023-06-28 10:01:09.703 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 8 msec}
2023-06-28 10:01:11.031 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56c8cf4a
2023-06-28 10:01:11.031 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 10:01:11.031 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 10:01:11.032 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 10:01:11.033 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 10:01:11.034 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 10:01:11.048 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e6becbc8
2023-06-28 10:01:11.048 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-06-28 10:01:11.048 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
2023-06-28 10:01:11.049 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 10:01:11.052 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 10:01:13.346 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b73b1e1
2023-06-28 10:01:13.346 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 10:01:13.346 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 10:01:13.347 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 10:01:13.348 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 10:01:13.349 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 10:01:13.363 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@15c2ca8f
2023-06-28 10:01:13.363 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_BEFORE} 
2023-06-28 10:01:13.363 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
2023-06-28 10:01:13.373 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 9 msec}
2023-06-28 10:01:13.380 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 7 msec}
2023-06-28 10:01:14.863 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b2ea7774
2023-06-28 10:01:14.863 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 10:01:14.863 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 10:01:14.864 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 10:01:14.865 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-28 10:01:14.865 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-28 10:03:15.652 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d705ae1e
2023-06-28 10:03:15.652 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-28 10:03:15.652 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-28 10:03:15.653 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 10:03:15.662 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 8 msec}
2023-06-28 10:03:15.668 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 5 msec}
2023-06-28 10:03:17.041 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56c8cf4a
2023-06-28 10:03:17.041 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 10:03:17.041 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 10:03:17.042 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 10:03:17.043 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 10:03:17.044 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 10:03:17.055 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e6becbc8
2023-06-28 10:03:17.055 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-06-28 10:03:17.055 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
2023-06-28 10:03:17.056 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 10:03:17.058 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 0 msec}
2023-06-28 10:03:20.236 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b73b1e1
2023-06-28 10:03:20.236 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 10:03:20.237 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 10:03:20.237 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 10:03:20.238 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 10:03:20.238 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-28 10:03:20.251 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@15c2ca8f
2023-06-28 10:03:20.251 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_BEFORE} 
2023-06-28 10:03:20.251 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
2023-06-28 10:03:20.259 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 8 msec}
2023-06-28 10:03:20.266 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,'-' as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 7 msec}
2023-06-28 10:03:22.059 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b2ea7774
2023-06-28 10:03:22.059 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 10:03:22.059 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 10:03:22.060 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 10:03:22.060 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-28 10:03:22.062 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 10:03:56.680 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5f4a7633
2023-06-28 10:03:56.680 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO} 
2023-06-28 10:03:56.680 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 seq, a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union select  2 seq, a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' order by seq,col003
2023-06-28 10:03:56.681 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 10:03:56.688 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 seq, a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union select  2 seq, a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' order by seq,col003
 {executed in 7 msec}
2023-06-28 10:03:56.695 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. select   1 seq, a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union select  2 seq, a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' order by seq,col003
 {executed in 7 msec}
2023-06-28 12:06:33.488 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 20336 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-28 12:06:33.494 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-28 12:06:33.550 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-28 12:06:33.550 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-28 12:06:34.899 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-28 12:06:34.899 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-28 12:06:35.042 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 134ms. Found 3 JPA repository interfaces.
2023-06-28 12:06:35.395 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-28 12:06:35.395 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-28 12:06:35.442 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 12:06:35.443 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 12:06:35.444 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 12:06:35.444 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 49ms. Found 0 JDBC repository interfaces.
2023-06-28 12:06:35.891 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-28 12:06:35.963 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-28 12:06:35.963 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-28 12:06:35.964 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-28 12:06:35.964 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-28 12:06:35.964 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 12:06:35.965 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-28 12:06:35.965 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-28 12:06:35.965 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 12:06:35.965 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 12:06:35.965 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 12:06:35.966 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-28 12:06:35.966 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 12:06:36.024 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$ebe3f065] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:06:36.079 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-28 12:06:36.166 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$d5da5492] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:06:36.250 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:06:36.253 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@2aa2a6e3' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:06:36.258 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$faaef744] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:06:36.268 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$20040f5a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:06:36.272 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:06:36.274 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:06:36.295 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$3d2c8c58] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:06:36.323 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$bcacd98a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:06:36.457 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-28 12:06:36.463 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-28 12:06:36.895 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-28 12:06:36.911 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-28 12:06:36.922 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-28 12:06:36.922 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-28 12:06:37.292 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-28 12:06:37.304 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-28 12:06:37.305 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3755 ms
2023-06-28 12:06:38.144 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@3c08da46 with name: jasyptStringEncryptor
2023-06-28 12:06:38.196 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-28 12:06:38.280 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 8 msec}
2023-06-28 12:06:38.285 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-28 12:06:39.036 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-28 12:06:39.360 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-28 12:06:39.433 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-28 12:06:39.435 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-28 12:06:39.591 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-28 12:06:39.834 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:06:39.850 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-28 12:06:40.564 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:06:40.566 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-28 12:06:40.621 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-28 12:06:40.881 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-28 12:06:41.971 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-28 12:06:41.982 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-28 12:06:42.163 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-28 12:06:42.163 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-28 12:06:42.163 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-28 12:06:42.163 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-28 12:06:42.164 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-28 12:06:42.164 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-28 12:06:42.164 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-28 12:06:42.164 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-28 12:06:42.164 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-28 12:06:42.330 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@316923e9, org.springframework.security.web.context.SecurityContextPersistenceFilter@4c805559, org.springframework.security.web.header.HeaderWriterFilter@34f1adea, org.springframework.web.filter.CorsFilter@4c927d1d, org.springframework.security.web.authentication.logout.LogoutFilter@8c922f3, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@63b9e214, org.springframework.security.web.session.ConcurrentSessionFilter@1bcd6b4c, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@546ebc5b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@75cbbbcc, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@44cd1a93, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2b55306, org.springframework.security.web.session.SessionManagementFilter@762273bf, org.springframework.security.web.access.ExceptionTranslationFilter@1a2cc2e7, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@7ccc7235]
2023-06-28 12:06:42.352 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-28 12:06:42.716 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-28 12:06:42.805 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-28 12:06:43.264 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:06:44.096 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-28 12:06:44.123 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-28 12:06:44.262 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-28 12:06:44.265 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-28 12:06:44.325 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-28 12:06:44.331 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.305 seconds (JVM running for 12.591)
2023-06-28 12:06:44.332 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-28 12:06:44.332 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-28 12:06:44.332 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-28 12:06:45.592 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-28 12:06:45.592 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-28 12:06:45.613 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 21 ms
2023-06-28 12:07:08.265 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-28 12:07:08.266 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-28 12:07:08.266 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-28 12:07:08.266 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-28 12:07:08.266 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-28 12:07:09.847 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:07:09.857 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-06-28 12:07:09.879 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-28 12:07:09.968 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$r6pQNSATfDj8YVCqreB3DOWZ6.hw6omMGVr/rDZ5xAlvMbWu4O47W
2023-06-28 12:07:10.060 INFO  [http-nio-10010-exec-5] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-28 12:07:15.332 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d705ae1e
2023-06-28 12:07:15.332 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-28 12:07:15.369 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-28 12:07:15.379 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:07:15.396 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 16 msec}
2023-06-28 12:07:15.416 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 13 msec}
2023-06-28 12:07:16.926 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56c8cf4a
2023-06-28 12:07:16.926 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 12:07:16.926 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 12:07:16.928 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:07:16.929 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 12:07:16.930 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 12:07:16.942 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e6becbc8
2023-06-28 12:07:16.942 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-06-28 12:07:16.943 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
2023-06-28 12:07:16.945 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 2 msec}
2023-06-28 12:07:16.947 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 12:07:31.479 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d705ae1e
2023-06-28 12:07:31.479 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-28 12:07:31.479 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-28 12:07:31.481 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-06-28 12:07:31.489 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 8 msec}
2023-06-28 12:07:31.498 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 8 msec}
2023-06-28 12:07:32.690 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2d167456
2023-06-28 12:07:32.691 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 12:07:32.691 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 12:07:32.692 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:07:32.693 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 12:07:32.695 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-28 12:07:32.708 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bd0c70d4
2023-06-28 12:07:32.709 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-06-28 12:07:32.709 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
2023-06-28 12:07:32.711 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 12:07:32.712 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 12:08:28.113 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@41c156ed
2023-06-28 12:08:28.113 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 12:08:28.113 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 12:08:28.114 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:08:28.115 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 12:08:28.116 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 12:08:28.131 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ec106f9b
2023-06-28 12:08:28.131 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_BEFORE} 
2023-06-28 12:08:28.131 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,k.col200 as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
2023-06-28 12:08:28.141 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,k.col200 as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 9 msec}
2023-06-28 12:08:28.149 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,k.col200 as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 8 msec}
2023-06-28 12:10:13.716 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d705ae1e
2023-06-28 12:10:13.716 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-28 12:10:13.722 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-28 12:10:13.723 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:10:13.741 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 18 msec}
2023-06-28 12:10:13.750 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 7 msec}
2023-06-28 12:10:16.033 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56c8cf4a
2023-06-28 12:10:16.033 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 12:10:16.033 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 12:10:16.034 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:10:16.035 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 12:10:16.036 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 12:10:16.049 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e6becbc8
2023-06-28 12:10:16.049 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-06-28 12:10:16.049 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
2023-06-28 12:10:16.052 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 12:10:16.054 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 12:10:18.473 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b73b1e1
2023-06-28 12:10:18.473 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 12:10:18.473 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 12:10:18.474 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:10:18.474 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-28 12:10:18.475 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 12:10:18.491 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@15c2ca8f
2023-06-28 12:10:18.491 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_BEFORE} 
2023-06-28 12:10:18.491 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,nvl(k.col200,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
2023-06-28 12:10:18.503 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,nvl(k.col200,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 10 msec}
2023-06-28 12:10:18.513 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,nvl(k.col200,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '5-1번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 10 msec}
2023-06-28 12:10:21.928 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b2ea7774
2023-06-28 12:10:21.928 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 12:10:21.928 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 12:10:21.929 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:10:21.930 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-28 12:10:21.931 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 12:10:24.060 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:10:24.065 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
1. DELETE FROM TBL_ARRANGE_PUNCTUALITY_ANALIZE WHERE company_no = '100'  AND base_ymd = '2023-04-03'  AND route_nm = '5-1번'
 {executed in 1 msec}
2023-06-28 12:10:24.072 INFO  [http-nio-10010-exec-8] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBL_ARRANGE_PUNCTUALITY_ANALIZE (company_no,base_ymd,route_nm,col,col000,col001,col002,col003,col004,emp_nm,term,term_85,term_125,term_past_cnt,term_late_cnt,term_wiban_cnt,total_station_cnt,last_chg_user,last_chg_date) values ( '100' , '2023-04-03' , '5-1번' , :col , :col000 , :col001 , :col002 , :col003 , :col004 , :emp_nm , :term , :term_85 , :term_125 , :term_past_cnt , :term_late_cnt , :term_wiban_cnt , :total_station_cnt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
2023-06-28 12:10:24.079 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:10:24.405 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH punctualityInfo AS (	
		select  a.*,dateadd(MINUTE ,1,a.BASE_YMD|| ' '||a.col003) AS start_time
		from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
		where   a.company_no = '100'
		AND 	a.BASE_YMD =  '2023-04-03'
		AND 	a.ROUTE_NM = '5-1번'
	)
	MERGE INTO 	TBL_ARRANGE_PUNCTUALITY_ANALIZE KEY (COMPANY_NO,BASE_YMD,ROUTE_NM,COL000,COL001,COL002)
		SELECT 
				a.COMPANY_NO
				, a.BASE_YMD
				, a.ROUTE_NM
				, a.COL
				, a.COL000
				, a.COL001
				, a.COL002
				, a.COL003
				, a.COL004
				, nvl(c.EMP_NM,to_char(b.DRIVER_ID) )   
				, a.TERM
				, a.TERM_85
				, a.TERM_125
				, a.TERM_PAST_CNT
				, a.TERM_LATE_CNT
				, a.TERM_WIBAN_CNT
				, a.TOTAL_STATION_CNT
				, a.LAST_CHG_USER
				, a.LAST_CHG_DATE		
		FROM punctualityInfo a 
			JOIN TBL_DRIVING_RECORD b ON b.COMPANY_NO = a.COMPANY_NO AND a.BASE_YMD = b.WORK_DATE AND a.ROUTE_NM = b.ROUTE_NM AND a.COL001 = b.CAR_REGNO AND a.start_time BETWEEN b.START_TIME  AND b.END_TIME 
			LEFT OUTER JOIN TBL_ISC_DRIVER_INFO c ON c.COMPANY_NO = b.COMPANY_NO AND c.DRIVER_ID = b.DRIVER_ID
 {executed in 233 msec}
2023-06-28 12:10:24.419 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2821fedd
2023-06-28 12:10:24.419 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-28 12:10:24.420 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-28 12:10:24.428 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 7 msec}
2023-06-28 12:10:24.444 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 15 msec}
2023-06-28 12:10:46.735 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b2ea7774
2023-06-28 12:10:46.735 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 12:10:46.736 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 12:10:46.736 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:10:46.737 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-28 12:10:46.738 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-28 12:10:46.752 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2e35915b
2023-06-28 12:10:46.752 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-06-28 12:10:46.752 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
2023-06-28 12:10:46.754 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 12:10:46.756 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 12:12:11.192 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:12:11.193 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
2. DELETE FROM TBL_ARRANGE_PUNCTUALITY_INFO WHERE company_no = '100'  AND base_ymd = '2023-04-03'  AND route_nm = '38번'
 {executed in 1 msec}
2023-06-28 12:12:11.209 INFO  [http-nio-10010-exec-8] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBL_ARRANGE_PUNCTUALITY_INFO (company_no,base_ymd,route_nm,col,col000,col001,col002,col003,col004,col005,col006,col007,col008,col009,col010,col011,col012,col013,col014,col015,col016,col017,col018,col019,col020,col021,col022,col023,col024,col025,col026,col027,col028,col029,col030,col031,col032,col033,col034,col035,col036,col037,col038,col039,col040,col041,col042,col043,col044,col045,col046,col047,col048,col049,col050,col051,col052,col053,col054,col055,col056,col057,col058,col059,col060,col061,col062,col063,col064,col065,col066,col067,col068,col069,col070,col071,col072,col073,col074,col075,col076,col077,col078,col079,col080,col081,col082,col083,col084,col085,col086,col087,col088,col089,col090,col091,col092,col093,col094,col095,col096,col097,col098,col099,col100,col101,col102,col103,col104,col105,col106,col107,col108,col109,col110,col111,col112,col113,col114,col115,col116,col117,col118,col119,col120,col121,col122,col123,col124,col125,col126,col127,col128,col129,col130,col131,col132,col133,col134,col135,col136,col137,col138,col139,col140,col141,col142,col143,col144,col145,col146,col147,col148,col149,col150,col151,col152,col153,col154,col155,col156,col157,col158,col159,col160,col161,col162,col163) values ( '100' , '2023-04-03' , '38번' , :col , :col000 , :col001 , :col002 , :col003 , :col004 , :col005 , :col006 , :col007 , :col008 , :col009 , :col010 , :col011 , :col012 , :col013 , :col014 , :col015 , :col016 , :col017 , :col018 , :col019 , :col020 , :col021 , :col022 , :col023 , :col024 , :col025 , :col026 , :col027 , :col028 , :col029 , :col030 , :col031 , :col032 , :col033 , :col034 , :col035 , :col036 , :col037 , :col038 , :col039 , :col040 , :col041 , :col042 , :col043 , :col044 , :col045 , :col046 , :col047 , :col048 , :col049 , :col050 , :col051 , :col052 , :col053 , :col054 , :col055 , :col056 , :col057 , :col058 , :col059 , :col060 , :col061 , :col062 , :col063 , :col064 , :col065 , :col066 , :col067 , :col068 , :col069 , :col070 , :col071 , :col072 , :col073 , :col074 , :col075 , :col076 , :col077 , :col078 , :col079 , :col080 , :col081 , :col082 , :col083 , :col084 , :col085 , :col086 , :col087 , :col088 , :col089 , :col090 , :col091 , :col092 , :col093 , :col094 , :col095 , :col096 , :col097 , :col098 , :col099 , :col100 , :col101 , :col102 , :col103 , :col104 , :col105 , :col106 , :col107 , :col108 , :col109 , :col110 , :col111 , :col112 , :col113 , :col114 , :col115 , :col116 , :col117 , :col118 , :col119 , :col120 , :col121 , :col122 , :col123 , :col124 , :col125 , :col126 , :col127 , :col128 , :col129 , :col130 , :col131 , :col132 , :col133 , :col134 , :col135 , :col136 , :col137 , :col138 , :col139 , :col140 , :col141 , :col142 , :col143 , :col144 , :col145 , :col146 , :col147 , :col148 , :col149 , :col150 , :col151 , :col152 , :col153 , :col154 , :col155 , :col156 , :col157 , :col158 , :col159 , :col160 , :col161 , :col162 , :col163 )
2023-06-28 12:12:11.215 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:12:11.901 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. UPDATE TBL_ARRANGE_PUNCTUALITY_INFO a 
		SET	col200 = (	SELECT 	nvl(c.EMP_NM, to_char(b.DRIVER_ID))   
						FROM 	TBL_DRIVING_RECORD b ,TBL_ISC_DRIVER_INFO c where c.COMPANY_NO = b.COMPANY_NO AND c.DRIVER_ID = b.DRIVER_ID 
						AND  	b.COMPANY_NO = a.COMPANY_NO AND a.BASE_YMD = b.WORK_DATE AND a.ROUTE_NM = b.ROUTE_NM AND a.COL001 = b.CAR_REGNO AND dateadd(MINUTE ,2,a.BASE_YMD|| ' '||a.col003) BETWEEN b.START_TIME  AND b.END_TIME 
					)	
		where   a.company_no = '100' 
		AND 	a.BASE_YMD = '2023-04-03'
		AND 	a.ROUTE_NM = '38번'
		AND 	a.col = 'false'
 {executed in 550 msec}
2023-06-28 12:12:11.919 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@153a6699
2023-06-28 12:12:11.919 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-28 12:12:11.919 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-28 12:12:11.920 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:12:11.927 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 7 msec}
2023-06-28 12:12:11.935 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 7 msec}
2023-06-28 12:12:18.275 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a002df30
2023-06-28 12:12:18.276 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 12:12:18.276 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 12:12:18.277 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:12:18.278 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-28 12:12:18.279 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-28 12:12:18.293 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a51f7de
2023-06-28 12:12:18.293 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_BEFORE} 
2023-06-28 12:12:18.293 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '38번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,nvl(k.col200,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '38번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
2023-06-28 12:12:18.302 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '38번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,nvl(k.col200,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '38번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 8 msec}
2023-06-28 12:12:18.309 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '38번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,nvl(k.col200,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '38번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 7 msec}
2023-06-28 12:12:27.783 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a002df30
2023-06-28 12:12:27.783 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 12:12:27.783 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 12:12:27.784 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:12:27.785 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 12:12:27.786 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 12:12:27.801 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a51f7de
2023-06-28 12:12:27.801 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_BEFORE} 
2023-06-28 12:12:27.801 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '38번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,nvl(k.col200,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '38번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
2023-06-28 12:12:27.810 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '38번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,nvl(k.col200,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '38번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 9 msec}
2023-06-28 12:12:27.818 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '38번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,nvl(k.col200,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '38번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 7 msec}
2023-06-28 12:12:39.320 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a002df30
2023-06-28 12:12:39.320 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 12:12:39.320 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 12:12:39.321 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:12:39.322 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 12:12:39.323 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 12:12:39.337 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a51f7de
2023-06-28 12:12:39.337 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_BEFORE} 
2023-06-28 12:12:39.337 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '38번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,nvl(k.col200,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '38번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
2023-06-28 12:12:39.347 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '38번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,nvl(k.col200,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '38번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 10 msec}
2023-06-28 12:12:39.354 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '38번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,nvl(k.col200,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '38번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 7 msec}
2023-06-28 12:13:45.291 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a002df30
2023-06-28 12:13:45.291 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 12:13:45.291 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 12:13:45.292 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:13:45.293 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 12:13:45.294 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 12:13:45.308 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a51f7de
2023-06-28 12:13:45.308 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_BEFORE} 
2023-06-28 12:13:45.308 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '38번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,nvl(k.col200,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '38번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
2023-06-28 12:13:45.315 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '38번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,nvl(k.col200,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '38번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 7 msec}
2023-06-28 12:13:45.324 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '38번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,nvl(k.col200,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '38번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 7 msec}
2023-06-28 12:14:00.945 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a002df30
2023-06-28 12:14:00.945 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 12:14:00.946 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 12:14:00.946 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:14:00.947 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 12:14:00.948 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-28 12:14:00.965 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a51f7de
2023-06-28 12:14:00.965 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_BEFORE} 
2023-06-28 12:14:00.965 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '38번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,nvl(k.col200,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '38번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
2023-06-28 12:14:00.972 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '38번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,nvl(k.col200,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '38번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 6 msec}
2023-06-28 12:14:00.980 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '38번' AND     BASE_YMD = '2023-04-03' and		col000 = '버스ID' union SELECT 2 seq ,nvl(k.col200,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='배차정시성대상회차' where   a.company_no = '100' AND 	a.route_nm = '38번' AND     a.BASE_YMD = '2023-04-03' and		a.col000 <> '버스ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k order by seq,col003
 {executed in 7 msec}
2023-06-28 12:15:09.531 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a002df30
2023-06-28 12:15:09.531 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 12:15:09.531 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 12:15:09.532 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:15:09.533 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 0 msec}
2023-06-28 12:15:09.534 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 12:16:35.504 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:16:35.505 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
3. DELETE FROM TBL_ARRANGE_PUNCTUALITY_ANALIZE WHERE company_no = '100'  AND base_ymd = '2023-04-03'  AND route_nm = '38번'
 {executed in 0 msec}
2023-06-28 12:16:35.513 INFO  [http-nio-10010-exec-10] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBL_ARRANGE_PUNCTUALITY_ANALIZE (company_no,base_ymd,route_nm,col,col000,col001,col002,col003,col004,emp_nm,term,term_85,term_125,term_past_cnt,term_late_cnt,term_wiban_cnt,total_station_cnt,last_chg_user,last_chg_date) values ( '100' , '2023-04-03' , '38번' , :col , :col000 , :col001 , :col002 , :col003 , :col004 , :emp_nm , :term , :term_85 , :term_125 , :term_past_cnt , :term_late_cnt , :term_wiban_cnt , :total_station_cnt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
2023-06-28 12:16:35.514 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:16:35.653 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. WITH punctualityInfo AS (	
		select  a.*,dateadd(MINUTE ,1,a.BASE_YMD|| ' '||a.col003) AS start_time
		from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
		where   a.company_no = '100'
		AND 	a.BASE_YMD =  '2023-04-03'
		AND 	a.ROUTE_NM = '38번'
	)
	MERGE INTO 	TBL_ARRANGE_PUNCTUALITY_ANALIZE KEY (COMPANY_NO,BASE_YMD,ROUTE_NM,COL000,COL001,COL002)
		SELECT 
				a.COMPANY_NO
				, a.BASE_YMD
				, a.ROUTE_NM
				, a.COL
				, a.COL000
				, a.COL001
				, a.COL002
				, a.COL003
				, a.COL004
				, nvl(c.EMP_NM,to_char(b.DRIVER_ID) )   
				, a.TERM
				, a.TERM_85
				, a.TERM_125
				, a.TERM_PAST_CNT
				, a.TERM_LATE_CNT
				, a.TERM_WIBAN_CNT
				, a.TOTAL_STATION_CNT
				, a.LAST_CHG_USER
				, a.LAST_CHG_DATE		
		FROM punctualityInfo a 
			JOIN TBL_DRIVING_RECORD b ON b.COMPANY_NO = a.COMPANY_NO AND a.BASE_YMD = b.WORK_DATE AND a.ROUTE_NM = b.ROUTE_NM AND a.COL001 = b.CAR_REGNO AND a.start_time BETWEEN b.START_TIME  AND b.END_TIME 
			LEFT OUTER JOIN TBL_ISC_DRIVER_INFO c ON c.COMPANY_NO = b.COMPANY_NO AND c.DRIVER_ID = b.DRIVER_ID
 {executed in 131 msec}
2023-06-28 12:16:35.669 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@153a6699
2023-06-28 12:16:35.669 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-28 12:16:35.669 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-28 12:16:35.678 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 8 msec}
2023-06-28 12:16:35.685 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 7 msec}
2023-06-28 12:16:40.917 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a002df30
2023-06-28 12:16:40.917 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 12:16:40.917 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 12:16:40.918 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:16:40.919 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 12:16:40.920 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 12:16:40.936 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1b4df917
2023-06-28 12:16:40.936 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-06-28 12:16:40.936 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
2023-06-28 12:16:40.938 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 12:16:40.940 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '38번' AND		a.BASE_YMD   = '2023-04-03' order by a.col002
 {executed in 1 msec}
2023-06-28 12:17:34.467 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 12:17:34.471 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:17:34.474 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 2 msec}
2023-06-28 12:17:41.748 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 12:17:41.749 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:17:41.750 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 12:17:44.726 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@62350d5a
2023-06-28 12:17:44.727 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:17:44.728 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:17:51.255 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e52d869f
2023-06-28 12:17:51.256 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:17:51.257 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'21번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:18:30.182 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6dc9dde0
2023-06-28 12:18:30.184 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:18:30.186 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 12:18:30.943 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e0e3806e
2023-06-28 12:18:30.945 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:18:30.947 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.col002,a.col003
 {executed in 0 msec}
2023-06-28 12:18:41.073 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2f229454
2023-06-28 12:18:41.074 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:18:41.075 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'38번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('38번','-전체-',a.ROUTE_NM,'38번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:19:44.547 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e57f1553
2023-06-28 12:19:44.548 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:19:44.549 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:20:59.683 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e57f1553
2023-06-28 12:20:59.685 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:20:59.686 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:21:01.441 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@90e32c29
2023-06-28 12:21:01.443 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:21:01.444 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:21:04.626 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 12:21:04.627 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:21:04.628 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
4. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.col002,a.col003
 {executed in 1 msec}
2023-06-28 12:23:42.508 INFO  [RMI TCP Connection(27)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-06-28 12:23:42.535 INFO  [RMI TCP Connection(27)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-06-28 12:23:42.537 INFO  [RMI TCP Connection(27)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-06-28 12:23:42.546 INFO  [RMI TCP Connection(27)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-06-28 12:23:42.588 INFO  [RMI TCP Connection(27)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-06-28 12:23:49.694 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 21612 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-28 12:23:49.699 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-28 12:23:49.754 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-28 12:23:49.754 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-28 12:23:50.933 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-28 12:23:50.934 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-28 12:23:51.085 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 142ms. Found 3 JPA repository interfaces.
2023-06-28 12:23:51.428 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-28 12:23:51.428 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-28 12:23:51.472 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 12:23:51.473 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 12:23:51.473 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 12:23:51.474 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 46ms. Found 0 JDBC repository interfaces.
2023-06-28 12:23:51.919 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-28 12:23:51.986 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-28 12:23:51.986 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-28 12:23:51.986 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-28 12:23:51.986 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-28 12:23:51.987 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 12:23:51.987 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-28 12:23:51.987 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-28 12:23:51.987 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 12:23:51.987 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 12:23:51.987 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 12:23:51.987 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-28 12:23:51.987 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 12:23:52.048 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$ef233c78] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:23:52.101 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-28 12:23:52.191 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$d919a0a5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:23:52.273 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:23:52.276 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@423fb61c' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:23:52.277 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$fdee4357] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:23:52.287 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$23435b6d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:23:52.292 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:23:52.293 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:23:52.315 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$406bd86b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:23:52.343 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$bfec259d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:23:52.485 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-28 12:23:52.490 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-28 12:23:52.921 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-28 12:23:52.938 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-28 12:23:52.949 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-28 12:23:52.949 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-28 12:23:53.327 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-28 12:23:53.338 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-28 12:23:53.338 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3584 ms
2023-06-28 12:23:54.170 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@574bc6ba with name: jasyptStringEncryptor
2023-06-28 12:23:54.226 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-28 12:23:54.312 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-06-28 12:23:54.316 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-28 12:23:55.097 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-28 12:23:55.427 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-28 12:23:55.502 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-28 12:23:55.503 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-28 12:23:55.655 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-28 12:23:55.888 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:23:55.903 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-28 12:23:56.602 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:23:56.605 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-28 12:23:56.654 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-28 12:23:56.908 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-28 12:23:57.968 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-28 12:23:57.979 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-28 12:23:58.160 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-28 12:23:58.161 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-28 12:23:58.161 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-28 12:23:58.161 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-28 12:23:58.161 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-28 12:23:58.161 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-28 12:23:58.161 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-28 12:23:58.161 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-28 12:23:58.161 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-28 12:23:58.321 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7bac6ae3, org.springframework.security.web.context.SecurityContextPersistenceFilter@5bf94016, org.springframework.security.web.header.HeaderWriterFilter@225df4c0, org.springframework.web.filter.CorsFilter@46ec4aa5, org.springframework.security.web.authentication.logout.LogoutFilter@2225e34d, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@61d1b697, org.springframework.security.web.session.ConcurrentSessionFilter@35540183, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@6e002525, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3166169f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@25f38880, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3cb8b98, org.springframework.security.web.session.SessionManagementFilter@72ec8b5d, org.springframework.security.web.access.ExceptionTranslationFilter@7455edf6, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5c6b24a2]
2023-06-28 12:23:58.342 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-28 12:23:58.702 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-28 12:23:58.776 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-28 12:23:59.200 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:23:59.983 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-28 12:24:00.015 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-28 12:24:00.157 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-28 12:24:00.161 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-28 12:24:00.209 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-28 12:24:00.215 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 10.978 seconds (JVM running for 12.292)
2023-06-28 12:24:00.215 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-28 12:24:00.215 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-28 12:24:00.215 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-28 12:24:01.442 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-28 12:24:01.443 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-28 12:24:01.466 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 23 ms
2023-06-28 12:24:12.661 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 12:24:12.729 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:24:12.738 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:24:15.466 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 12:24:15.468 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:24:15.470 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:24:16.382 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 12:24:16.384 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:24:16.386 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 12:24:17.654 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 12:24:17.655 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:24:17.658 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 2 msec}
2023-06-28 12:24:53.000 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@24c090dc
2023-06-28 12:24:53.001 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:24:53.003 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 12:24:53.981 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@837b68b5
2023-06-28 12:24:53.982 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:24:53.984 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-05-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 12:26:05.449 INFO  [RMI TCP Connection(15)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-06-28 12:26:05.477 INFO  [RMI TCP Connection(15)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-06-28 12:26:05.479 INFO  [RMI TCP Connection(15)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-06-28 12:26:05.487 INFO  [RMI TCP Connection(15)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-06-28 12:26:05.516 INFO  [RMI TCP Connection(15)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-06-28 12:26:09.159 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 6528 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-28 12:26:09.163 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-28 12:26:09.216 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-28 12:26:09.216 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-28 12:26:10.417 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-28 12:26:10.418 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-28 12:26:10.564 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 137ms. Found 3 JPA repository interfaces.
2023-06-28 12:26:10.911 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-28 12:26:10.911 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-28 12:26:10.956 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 12:26:10.957 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 12:26:10.958 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 12:26:10.958 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 47ms. Found 0 JDBC repository interfaces.
2023-06-28 12:26:11.403 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-28 12:26:11.469 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-28 12:26:11.469 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-28 12:26:11.469 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-28 12:26:11.470 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-28 12:26:11.470 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 12:26:11.470 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-28 12:26:11.470 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-28 12:26:11.470 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 12:26:11.470 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 12:26:11.471 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 12:26:11.471 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-28 12:26:11.471 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 12:26:11.530 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$f38c9c65] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:26:11.581 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-28 12:26:11.666 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$dd830092] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:26:11.751 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:26:11.753 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@3e4b0e4c' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:26:11.758 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$257a344] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:26:11.768 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$27acbb5a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:26:11.771 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:26:11.772 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:26:11.798 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$44d53858] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:26:11.827 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$c455858a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 12:26:11.985 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-28 12:26:11.991 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-28 12:26:12.405 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-28 12:26:12.423 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-28 12:26:12.433 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-28 12:26:12.433 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-28 12:26:12.835 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-28 12:26:12.846 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-28 12:26:12.847 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3631 ms
2023-06-28 12:26:13.683 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@5f514ffa with name: jasyptStringEncryptor
2023-06-28 12:26:13.730 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-28 12:26:13.813 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-06-28 12:26:13.818 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-28 12:26:14.589 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-28 12:26:14.921 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-28 12:26:14.995 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-28 12:26:14.997 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-28 12:26:15.151 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-28 12:26:15.387 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:26:15.405 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-28 12:26:16.110 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:26:16.113 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 0 msec}
2023-06-28 12:26:16.161 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-28 12:26:16.407 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-28 12:26:17.535 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-28 12:26:17.546 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-28 12:26:17.731 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-28 12:26:17.731 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-28 12:26:17.731 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-28 12:26:17.731 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-28 12:26:17.731 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-28 12:26:17.731 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-28 12:26:17.731 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-28 12:26:17.731 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-28 12:26:17.731 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-28 12:26:17.899 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@55f490cd, org.springframework.security.web.context.SecurityContextPersistenceFilter@5a1db60f, org.springframework.security.web.header.HeaderWriterFilter@ebcbcd0, org.springframework.web.filter.CorsFilter@5fa03884, org.springframework.security.web.authentication.logout.LogoutFilter@11ebacc0, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@7ad21379, org.springframework.security.web.session.ConcurrentSessionFilter@3c164002, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@1ef15ec1, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@23fa60f9, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@442745d7, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@67c6840f, org.springframework.security.web.session.SessionManagementFilter@5f8a3a62, org.springframework.security.web.access.ExceptionTranslationFilter@503ababa, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@23a2d8ac]
2023-06-28 12:26:17.922 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-28 12:26:18.294 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-28 12:26:18.371 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-28 12:26:18.790 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:26:19.578 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-28 12:26:19.606 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-28 12:26:19.746 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-28 12:26:19.749 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-28 12:26:19.808 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-28 12:26:19.813 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.109 seconds (JVM running for 12.453)
2023-06-28 12:26:19.814 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-28 12:26:19.814 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-28 12:26:19.814 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-28 12:26:20.942 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-28 12:26:20.942 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-28 12:26:20.963 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 20 ms
2023-06-28 12:44:46.705 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-28 12:44:46.706 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-28 12:44:46.706 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-28 12:44:46.706 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-28 12:44:46.706 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-28 12:44:48.012 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:44:48.020 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-06-28 12:44:48.041 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-28 12:44:48.130 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$jdhbjJ9lazOScmpm5xKreu4qZlr3xK2IAgZ6O7zz1qe7ssZCclYyy
2023-06-28 12:44:48.221 INFO  [http-nio-10010-exec-1] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-28 12:45:47.649 INFO  [http-nio-10010-exec-9] [c.p.d.configuration.SecurityConfig] - addLogoutHandler:logout: 
2023-06-28 12:45:47.650 INFO  [http-nio-10010-exec-9] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-28 12:45:47.650 INFO  [http-nio-10010-exec-9] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-28 12:45:47.651 INFO  [http-nio-10010-exec-9] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-28 12:45:47.651 INFO  [http-nio-10010-exec-9] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-28 12:45:47.651 INFO  [http-nio-10010-exec-9] [c.p.d.configuration.SecurityConfig] - logoutSuccessHandler:onLogoutSuccess: 
2023-06-28 12:45:47.688 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-28 12:45:47.688 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-28 12:45:47.688 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-28 12:45:47.688 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-28 12:45:47.688 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-28 12:45:49.817 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:45:49.819 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-06-28 12:45:49.821 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-28 12:45:49.913 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$zyojDVlN6yo.P/MNYDvUBOe4ONXZblOebkxgavLlSAW0ykU48epzy
2023-06-28 12:45:50.006 INFO  [http-nio-10010-exec-6] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-28 12:46:43.084 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 12:46:43.169 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:46:43.172 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 2 msec}
2023-06-28 12:46:44.823 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 12:46:44.825 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:46:44.827 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 12:46:46.343 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 12:46:46.345 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:46:46.348 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 2 msec}
2023-06-28 12:46:47.203 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 12:46:47.204 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:46:47.207 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 2 msec}
2023-06-28 12:47:08.677 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 12:47:08.678 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:47:08.681 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:47:10.229 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 12:47:10.230 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:47:10.231 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 12:47:11.519 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6dc9dde0
2023-06-28 12:47:11.521 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:47:11.522 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 12:47:12.389 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e0e3806e
2023-06-28 12:47:12.390 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:47:12.393 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 12:47:21.696 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@90e32c29
2023-06-28 12:47:21.698 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:47:21.699 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:47:22.635 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 12:47:22.636 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:47:22.638 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 2 msec}
2023-06-28 12:48:18.135 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 12:48:18.137 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:48:18.139 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:48:19.756 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 12:48:19.757 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:48:19.758 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 12:48:20.994 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1e5386e1
2023-06-28 12:48:20.995 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:48:20.997 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5-1번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:48:22.147 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e52d869f
2023-06-28 12:48:22.148 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:48:22.150 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'21번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 12:49:27.657 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 12:49:27.659 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:49:27.661 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:49:31.091 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@62350d5a
2023-06-28 12:49:31.093 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:49:31.094 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:49:32.513 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 12:49:32.514 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:49:32.515 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:49:34.532 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6dc9dde0
2023-06-28 12:49:34.533 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:49:34.535 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:50:12.283 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 12:50:12.284 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:50:12.286 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:50:13.811 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 12:50:13.812 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:50:13.813 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:50:15.448 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f4a12bed
2023-06-28 12:50:15.449 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:50:15.450 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 12:50:16.946 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1e5386e1
2023-06-28 12:50:16.948 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:50:16.949 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5-1번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 12:50:25.384 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6dc9dde0
2023-06-28 12:50:25.385 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:50:25.387 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:50:48.105 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 12:50:48.106 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:50:48.108 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:50:49.500 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 12:50:49.501 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:50:49.503 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 12:50:50.827 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 12:50:50.828 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:50:50.830 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:50:54.252 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6dc9dde0
2023-06-28 12:50:54.253 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:50:54.255 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:50:55.234 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1da13791
2023-06-28 12:50:55.235 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:50:55.237 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 12:53:21.767 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 12:53:21.768 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:53:21.770 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 2 msec}
2023-06-28 12:53:23.105 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 12:53:23.106 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:53:23.107 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 12:53:23.990 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 12:53:23.992 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:53:23.993 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:53:34.030 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@81c32dce
2023-06-28 12:53:34.031 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:53:34.032 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:53:34.983 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@81c32dce
2023-06-28 12:53:34.984 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:53:34.985 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 12:58:58.206 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 12:58:58.207 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:58:58.209 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:58:59.501 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 12:58:59.502 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:58:59.503 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 12:59:00.369 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 12:59:00.370 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:59:00.372 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 12:59:04.641 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 12:59:04.642 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:59:04.643 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 12:59:06.066 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1da13791
2023-06-28 12:59:06.067 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:59:06.069 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 12:59:07.684 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6dc9dde0
2023-06-28 12:59:07.685 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 12:59:07.687 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 12:59:42.125 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 12:59:42.126 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 12:59:42.128 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:18:50.739 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 21364 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-28 13:18:50.749 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-28 13:18:50.802 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-28 13:18:50.802 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-28 13:18:52.032 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-28 13:18:52.032 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-28 13:18:52.181 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 138ms. Found 3 JPA repository interfaces.
2023-06-28 13:18:52.540 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-28 13:18:52.541 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-28 13:18:52.585 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 13:18:52.587 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 13:18:52.588 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 13:18:52.588 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 47ms. Found 0 JDBC repository interfaces.
2023-06-28 13:18:53.033 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-28 13:18:53.099 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-28 13:18:53.099 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-28 13:18:53.101 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-28 13:18:53.101 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-28 13:18:53.101 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:18:53.101 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-28 13:18:53.101 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-28 13:18:53.101 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:18:53.101 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:18:53.101 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:18:53.101 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-28 13:18:53.101 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:18:53.162 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$cc4f079a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:18:53.213 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-28 13:18:53.304 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$b6456bc7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:18:53.395 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:18:53.397 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@30d9dfbd' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:18:53.402 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$db1a0e79] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:18:53.413 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$6f268f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:18:53.416 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:18:53.417 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:18:53.445 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$1d97a38d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:18:53.478 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$9d17f0bf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:18:53.621 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-28 13:18:53.626 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-28 13:18:54.059 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-28 13:18:54.076 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-28 13:18:54.086 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-28 13:18:54.086 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-28 13:18:54.471 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-28 13:18:54.482 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-28 13:18:54.482 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3680 ms
2023-06-28 13:18:55.388 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@5f3b160c with name: jasyptStringEncryptor
2023-06-28 13:18:55.443 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-28 13:18:55.529 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-06-28 13:18:55.534 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-28 13:18:56.298 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-28 13:18:56.640 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-28 13:18:56.717 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-28 13:18:56.720 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-28 13:18:56.876 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-28 13:18:57.112 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:18:57.128 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-28 13:18:57.853 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:18:57.855 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-28 13:18:57.902 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-28 13:18:58.161 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-28 13:18:59.292 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-28 13:18:59.303 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-28 13:18:59.487 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-28 13:18:59.487 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-28 13:18:59.487 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-28 13:18:59.487 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-28 13:18:59.487 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-28 13:18:59.487 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-28 13:18:59.487 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-28 13:18:59.488 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-28 13:18:59.488 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-28 13:18:59.652 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3825adfe, org.springframework.security.web.context.SecurityContextPersistenceFilter@248801e2, org.springframework.security.web.header.HeaderWriterFilter@74903a05, org.springframework.web.filter.CorsFilter@1c22a764, org.springframework.security.web.authentication.logout.LogoutFilter@436ccbc8, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@2b55306, org.springframework.security.web.session.ConcurrentSessionFilter@2e4aacfb, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@350dd19a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2c053586, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5f414e09, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@ac85d1c, org.springframework.security.web.session.SessionManagementFilter@47cc4814, org.springframework.security.web.access.ExceptionTranslationFilter@5f0d1745, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4f3287e3]
2023-06-28 13:18:59.675 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-28 13:19:00.031 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-28 13:19:00.116 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-28 13:19:00.545 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:19:01.359 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-28 13:19:01.389 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-28 13:19:01.543 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-28 13:19:01.544 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-28 13:19:01.594 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-28 13:19:01.600 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.331 seconds (JVM running for 12.616)
2023-06-28 13:19:01.601 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-28 13:19:01.601 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-28 13:19:01.601 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-28 13:19:02.623 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-28 13:19:02.623 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-28 13:19:02.644 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 21 ms
2023-06-28 13:19:29.520 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-28 13:19:29.521 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-28 13:19:29.522 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-28 13:19:29.523 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-28 13:19:29.523 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-28 13:19:31.489 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:19:31.498 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-06-28 13:19:31.519 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-28 13:19:31.610 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$CRSiwoUp3EpSkSt/oUBkfuqA.mgk2bEfNtMSNtFp8yGECUaDVkGT6
2023-06-28 13:19:31.703 INFO  [http-nio-10010-exec-8] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-28 13:22:16.192 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 13:22:16.257 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:22:16.262 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 2 msec}
2023-06-28 13:22:17.794 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 13:22:17.795 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:22:17.797 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:22:18.876 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6dc9dde0
2023-06-28 13:22:18.878 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:22:18.879 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:22:20.052 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e0e3806e
2023-06-28 13:22:20.053 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:22:20.056 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 13:22:20.165 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3135a9eb
2023-06-28 13:22:20.167 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:22:39.881 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@90e32c29
2023-06-28 13:22:39.882 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:22:39.884 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 13:22:40.720 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 13:22:40.721 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:22:40.724 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 13:22:40.854 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d4991bb1
2023-06-28 13:22:40.857 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 13:23:38.319 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 13:23:38.320 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:23:38.322 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:23:40.583 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 13:23:40.585 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:23:40.586 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 13:23:41.892 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 13:23:41.893 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:23:41.895 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:23:42.780 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 13:23:42.781 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:23:42.783 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 2 msec}
2023-06-28 13:23:42.918 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d4991bb1
2023-06-28 13:23:42.921 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:24:33.232 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@24c090dc
2023-06-28 13:24:33.233 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:24:33.235 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:24:34.019 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@837b68b5
2023-06-28 13:24:34.021 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:24:34.023 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-05-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 13:24:34.106 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d3cd9232
2023-06-28 13:24:34.108 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:26:26.585 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 13:26:26.587 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:26:26.589 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 2 msec}
2023-06-28 13:27:42.049 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 13:27:42.050 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:27:42.052 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 13:27:44.094 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 13:27:44.096 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:27:44.097 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 13:27:45.537 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 13:27:45.538 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:27:45.539 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:27:46.457 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 13:27:46.459 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:27:46.461 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 13:27:46.474 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d4991bb1
2023-06-28 13:27:46.477 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:28:18.083 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 13:28:18.084 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:28:18.086 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:28:21.248 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 13:28:21.249 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:28:21.250 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 13:28:22.091 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 13:28:22.093 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:28:22.094 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:28:22.959 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 13:28:22.960 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:28:22.961 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 13:28:23.087 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d4991bb1
2023-06-28 13:28:23.089 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:28:57.133 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 13:28:57.134 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:28:57.136 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 13:28:58.897 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 13:28:58.898 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:28:58.899 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 13:28:59.605 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 13:28:59.606 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:28:59.607 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:29:00.297 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 13:29:00.299 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:29:00.301 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 13:29:00.425 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d4991bb1
2023-06-28 13:29:00.428 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:29:45.871 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 13:29:45.872 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:29:45.875 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:29:47.366 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 13:29:47.367 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:29:47.368 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 13:29:48.222 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 13:29:48.223 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:29:48.224 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:29:49.687 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@69f851df
2023-06-28 13:29:49.688 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:29:49.688 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 13:29:51.177 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@93aaacd3
2023-06-28 13:29:51.178 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:29:51.179 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5-1번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:30:32.637 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 13:30:32.639 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:30:32.647 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 7 msec}
2023-06-28 13:30:34.153 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 13:30:34.154 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:30:34.155 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 13:30:34.836 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 13:30:34.837 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:30:34.838 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:30:36.167 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 13:30:36.168 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:30:36.170 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 13:30:36.287 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d4991bb1
2023-06-28 13:30:36.288 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:32:01.087 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 13:32:01.088 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:32:01.090 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:32:03.266 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 13:32:03.267 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:32:03.268 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 13:32:04.614 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd789142
2023-06-28 13:32:04.615 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:32:04.617 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:32:05.619 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 13:32:05.620 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:32:05.622 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 13:32:05.747 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d4991bb1
2023-06-28 13:32:05.749 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:32:20.314 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 13:32:20.315 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:32:20.317 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 13:32:20.436 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d4991bb1
2023-06-28 13:32:20.438 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 13:32:25.359 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@74e9372b
2023-06-28 13:32:25.360 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:32:25.362 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:32:26.286 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e0e3806e
2023-06-28 13:32:26.287 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:32:26.289 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 13:32:26.386 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3135a9eb
2023-06-28 13:32:26.387 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:32:33.080 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c99b97b7
2023-06-28 13:32:33.081 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:32:33.083 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-02' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 13:32:33.161 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@19edc134
2023-06-28 13:32:33.163 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 13:32:35.141 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e0e3806e
2023-06-28 13:32:35.142 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:32:35.144 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 13:32:35.259 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3135a9eb
2023-06-28 13:32:35.261 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:38:07.389 INFO  [RMI TCP Connection(32)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-06-28 13:38:07.420 INFO  [RMI TCP Connection(32)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-06-28 13:38:07.422 INFO  [RMI TCP Connection(32)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-06-28 13:38:07.431 INFO  [RMI TCP Connection(32)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-06-28 13:38:07.477 INFO  [RMI TCP Connection(32)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-06-28 13:38:11.201 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 10396 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-28 13:38:11.205 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-28 13:38:11.259 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-28 13:38:11.260 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-28 13:38:12.461 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-28 13:38:12.461 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-28 13:38:12.607 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 135ms. Found 3 JPA repository interfaces.
2023-06-28 13:38:12.955 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-28 13:38:12.955 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-28 13:38:12.999 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 13:38:13.000 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 13:38:13.000 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 13:38:13.000 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 45ms. Found 0 JDBC repository interfaces.
2023-06-28 13:38:13.445 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-28 13:38:13.512 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-28 13:38:13.512 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-28 13:38:13.512 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-28 13:38:13.513 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-28 13:38:13.513 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:38:13.513 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-28 13:38:13.514 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-28 13:38:13.514 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:38:13.514 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:38:13.514 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:38:13.514 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-28 13:38:13.514 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:38:13.575 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$175bfcea] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:38:13.628 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-28 13:38:13.716 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$1526117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:38:13.795 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:38:13.797 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@3b7c6e06' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:38:13.802 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$262703c9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:38:13.817 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$4b7c1bdf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:38:13.821 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:38:13.822 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:38:13.848 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$68a498dd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:38:13.879 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$e824e60f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:38:14.015 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-28 13:38:14.019 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-28 13:38:14.441 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-28 13:38:14.457 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-28 13:38:14.474 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-28 13:38:14.474 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-28 13:38:14.856 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-28 13:38:14.868 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-28 13:38:14.868 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3608 ms
2023-06-28 13:38:15.721 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@7fcfcc34 with name: jasyptStringEncryptor
2023-06-28 13:38:15.778 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-28 13:38:15.872 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-06-28 13:38:15.877 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-28 13:38:16.656 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-28 13:38:16.983 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-28 13:38:17.056 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-28 13:38:17.058 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-28 13:38:17.210 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-28 13:38:17.447 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:38:17.463 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-28 13:38:18.194 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:38:18.197 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-28 13:38:18.249 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-28 13:38:18.509 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-28 13:38:19.624 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-28 13:38:19.635 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-28 13:38:19.826 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-28 13:38:19.826 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-28 13:38:19.826 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-28 13:38:19.826 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-28 13:38:19.827 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-28 13:38:19.827 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-28 13:38:19.827 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-28 13:38:19.827 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-28 13:38:19.827 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-28 13:38:19.996 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2ef9531e, org.springframework.security.web.context.SecurityContextPersistenceFilter@21600bf7, org.springframework.security.web.header.HeaderWriterFilter@2225e34d, org.springframework.web.filter.CorsFilter@6f5339d8, org.springframework.security.web.authentication.logout.LogoutFilter@7b8807b9, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@336b5efb, org.springframework.security.web.session.ConcurrentSessionFilter@242d729f, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@1390e1aa, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@189dbb97, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1c894ea8, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4bb4a9aa, org.springframework.security.web.session.SessionManagementFilter@3c7b39af, org.springframework.security.web.access.ExceptionTranslationFilter@3b5dc639, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@41c9ee24]
2023-06-28 13:38:20.017 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-28 13:38:20.380 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-28 13:38:20.461 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-28 13:38:20.897 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:38:21.720 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-28 13:38:21.751 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-28 13:38:21.920 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-28 13:38:21.923 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-28 13:38:21.978 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-28 13:38:21.983 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.244 seconds (JVM running for 12.591)
2023-06-28 13:38:21.984 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-28 13:38:21.984 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-28 13:38:21.984 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-28 13:38:22.989 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-28 13:38:22.990 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-28 13:38:23.013 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 23 ms
2023-06-28 13:42:58.034 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 13:42:58.103 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:42:58.110 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 2 msec}
2023-06-28 13:42:59.640 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 13:42:59.641 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:42:59.643 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:42:59.672 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@58229c74
2023-06-28 13:42:59.678 ERROR [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:311)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 

	<if test='baseYm != null'>
	AND 	a.BASE_YMD like  '' || '%'
	</if> 
	<if test='baseYmd != null'>
	AND 	a.BASE_YMD =  ''
	</if> 

	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {FAILED after -1 msec}
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT                                                   
			A.EMP_NM 
		,	SUM(A.TERM_PAST_CNT) AS SUM_PAST
		,	SUM(A.TERM_LATE_CNT) AS SUM_LATE
		,	SUM(A.TERM_WIBAN_CNT) AS SUM_WIBAN
		,	AVG(A.TERM_WIBAN_CNT) AS AVG_WIBAN
		,	SUM(A.TOTAL_STATION_CNT) AS SUM_STATION
		,	ROUND(SUM(A.TERM_WIBAN_CNT*1.0) / SUM(A.TOTAL_STATION_CNT) * 100.0,2) AS RATE_WIBAN
	FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE A 
	WHERE   A.COMPANY_NO = '100' 
	AND 	A.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	
	<IF[*] TEST='baseYm != null'>
	AND 	A.BASE_YMD LIKE  '' || '%'
	</IF> 
	<IF TEST='baseYmd != null'>
	AND 	A.BASE_YMD =  ''
	</IF> 
	
	AND 	A.ROUTE_NM = DECODE('-전체-','-전체-',A.ROUTE_NM,'-전체-')
	GROUP BY  A.EMP_NM 
	ORDER BY 7 DESC"; expected "ALL, ANY, SOME"; SQL statement:
select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	
	<if test='baseYm != null'>
	AND 	a.BASE_YMD like  '' || '%'
	</if> 
	<if test='baseYmd != null'>
	AND 	a.BASE_YMD =  ''
	</if> 
	
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.engine.SessionRemote.done(SessionRemote.java:611)
	at org.h2.command.CommandRemote.prepare(CommandRemote.java:85)
	at org.h2.command.CommandRemote.<init>(CommandRemote.java:51)
	at org.h2.engine.SessionRemote.prepareCommand(SessionRemote.java:481)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:76)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:352)
	at net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy.prepareStatement(ConnectionSpy.java:475)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:311)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.instantiateStatement(PreparedStatementHandler.java:87)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.prepare(BaseStatementHandler.java:88)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.prepare(RoutingStatementHandler.java:59)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:85)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at jdk.proxy2/jdk.proxy2.$Proxy117.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:53)
	at jdk.proxy3/jdk.proxy3.$Proxy118.select_PunctualityAnalize_emp(Unknown Source)
	at com.pjy.dashboard.service.DynamicSqlService.getSqlFilterMybatis(DynamicSqlService.java:161)
	at com.pjy.dashboard.controller.TestController.DynamicSqlFilterMybatis(TestController.java:190)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$5152bb8.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 13:42:59.736 ERROR [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - jdbcTemplate error: 
### Error querying database.  Cause: org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT                                                   
			A.EMP_NM 
		,	SUM(A.TERM_PAST_CNT) AS SUM_PAST
		,	SUM(A.TERM_LATE_CNT) AS SUM_LATE
		,	SUM(A.TERM_WIBAN_CNT) AS SUM_WIBAN
		,	AVG(A.TERM_WIBAN_CNT) AS AVG_WIBAN
		,	SUM(A.TOTAL_STATION_CNT) AS SUM_STATION
		,	ROUND(SUM(A.TERM_WIBAN_CNT*1.0) / SUM(A.TOTAL_STATION_CNT) * 100.0,2) AS RATE_WIBAN
	FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE A 
	WHERE   A.COMPANY_NO = '100' 
	AND 	A.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	
	<IF[*] TEST='baseYm != null'>
	AND 	A.BASE_YMD LIKE  '' || '%'
	</IF> 
	<IF TEST='baseYmd != null'>
	AND 	A.BASE_YMD =  ''
	</IF> 
	
	AND 	A.ROUTE_NM = DECODE('-전체-','-전체-',A.ROUTE_NM,'-전체-')
	GROUP BY  A.EMP_NM 
	ORDER BY 7 DESC"; expected "ALL, ANY, SOME"; SQL statement:
select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	
	<if test='baseYm != null'>
	AND 	a.BASE_YMD like  '' || '%'
	</if> 
	<if test='baseYmd != null'>
	AND 	a.BASE_YMD =  ''
	</if> 
	
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.getSyntaxError(Parser.java:1053)
	at org.h2.command.Parser.readTerm(Parser.java:4479)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3238)
	at org.h2.command.Parser.readExpressionWithGlobalConditions(Parser.java:3048)
	at org.h2.command.Parser.parseSelect(Parser.java:2962)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.parsePrepared(Parser.java:868)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:819)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:278)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)

### The error may exist in file [D:\BUS\dashboard\dashboard\target\classes\mapper\h2.xml]
### The error may involve com.pjy.dashboard.mapper.h2.h2Mapper.select_PunctualityAnalize_emp
### The error occurred while executing a query
### SQL: select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */    a.EMP_NM    , sum(a.TERM_PAST_CNT) AS sum_past   , sum(a.TERM_LATE_CNT) AS sum_late   , sum(a.TERM_WIBAN_CNT) AS sum_wiban   , avg(a.TERM_WIBAN_CNT) AS avg_wiban   , sum(a.TOTAL_STATION_CNT) AS sum_station   , round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban  from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a   where   a.company_no = '100'   AND  a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28'     <if test='baseYm != null'>  AND  a.BASE_YMD like  '' || '%'  </if>   <if test='baseYmd != null'>  AND  a.BASE_YMD =  ''  </if>     AND  a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')  GROUP BY  a.EMP_NM   ORDER BY 7 desc
### Cause: org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT                                                   
			A.EMP_NM 
		,	SUM(A.TERM_PAST_CNT) AS SUM_PAST
		,	SUM(A.TERM_LATE_CNT) AS SUM_LATE
		,	SUM(A.TERM_WIBAN_CNT) AS SUM_WIBAN
		,	AVG(A.TERM_WIBAN_CNT) AS AVG_WIBAN
		,	SUM(A.TOTAL_STATION_CNT) AS SUM_STATION
		,	ROUND(SUM(A.TERM_WIBAN_CNT*1.0) / SUM(A.TOTAL_STATION_CNT) * 100.0,2) AS RATE_WIBAN
	FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE A 
	WHERE   A.COMPANY_NO = '100' 
	AND 	A.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	
	<IF[*] TEST='baseYm != null'>
	AND 	A.BASE_YMD LIKE  '' || '%'
	</IF> 
	<IF TEST='baseYmd != null'>
	AND 	A.BASE_YMD =  ''
	</IF> 
	
	AND 	A.ROUTE_NM = DECODE('-전체-','-전체-',A.ROUTE_NM,'-전체-')
	GROUP BY  A.EMP_NM 
	ORDER BY 7 DESC"; expected "ALL, ANY, SOME"; SQL statement:
select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	
	<if test='baseYm != null'>
	AND 	a.BASE_YMD like  '' || '%'
	</if> 
	<if test='baseYmd != null'>
	AND 	a.BASE_YMD =  ''
	</if> 
	
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.getSyntaxError(Parser.java:1053)
	at org.h2.command.Parser.readTerm(Parser.java:4479)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3238)
	at org.h2.command.Parser.readExpressionWithGlobalConditions(Parser.java:3048)
	at org.h2.command.Parser.parseSelect(Parser.java:2962)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.parsePrepared(Parser.java:868)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:819)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:278)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)

; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT                                                   
			A.EMP_NM 
		,	SUM(A.TERM_PAST_CNT) AS SUM_PAST
		,	SUM(A.TERM_LATE_CNT) AS SUM_LATE
		,	SUM(A.TERM_WIBAN_CNT) AS SUM_WIBAN
		,	AVG(A.TERM_WIBAN_CNT) AS AVG_WIBAN
		,	SUM(A.TOTAL_STATION_CNT) AS SUM_STATION
		,	ROUND(SUM(A.TERM_WIBAN_CNT*1.0) / SUM(A.TOTAL_STATION_CNT) * 100.0,2) AS RATE_WIBAN
	FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE A 
	WHERE   A.COMPANY_NO = '100' 
	AND 	A.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	
	<IF[*] TEST='baseYm != null'>
	AND 	A.BASE_YMD LIKE  '' || '%'
	</IF> 
	<IF TEST='baseYmd != null'>
	AND 	A.BASE_YMD =  ''
	</IF> 
	
	AND 	A.ROUTE_NM = DECODE('-전체-','-전체-',A.ROUTE_NM,'-전체-')
	GROUP BY  A.EMP_NM 
	ORDER BY 7 DESC"; expected "ALL, ANY, SOME"; SQL statement:
select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	
	<if test='baseYm != null'>
	AND 	a.BASE_YMD like  '' || '%'
	</if> 
	<if test='baseYmd != null'>
	AND 	a.BASE_YMD =  ''
	</if> 
	
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.getSyntaxError(Parser.java:1053)
	at org.h2.command.Parser.readTerm(Parser.java:4479)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3238)
	at org.h2.command.Parser.readExpressionWithGlobalConditions(Parser.java:3048)
	at org.h2.command.Parser.parseSelect(Parser.java:2962)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.parsePrepared(Parser.java:868)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:819)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:278)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)

2023-06-28 13:42:59.752 WARN  [http-nio-10010-exec-3] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [com.pjy.dashboard.core.error.exception.BusinessException: jdbcTemplate query error]
2023-06-28 13:44:31.616 INFO  [RMI TCP Connection(19)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-06-28 13:44:31.646 INFO  [RMI TCP Connection(19)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-06-28 13:44:31.650 INFO  [RMI TCP Connection(19)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-06-28 13:44:31.659 INFO  [RMI TCP Connection(19)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-06-28 13:44:31.712 INFO  [RMI TCP Connection(19)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-06-28 13:44:35.383 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 11036 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-28 13:44:35.389 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-28 13:44:35.444 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-28 13:44:35.444 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-28 13:44:36.646 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-28 13:44:36.647 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-28 13:44:36.793 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 135ms. Found 3 JPA repository interfaces.
2023-06-28 13:44:37.146 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-28 13:44:37.146 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-28 13:44:37.191 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 13:44:37.192 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 13:44:37.192 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 13:44:37.192 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 46ms. Found 0 JDBC repository interfaces.
2023-06-28 13:44:37.628 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-28 13:44:37.695 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-28 13:44:37.695 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-28 13:44:37.695 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-28 13:44:37.695 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-28 13:44:37.695 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:44:37.695 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-28 13:44:37.696 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-28 13:44:37.696 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:44:37.696 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:44:37.696 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:44:37.696 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-28 13:44:37.697 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:44:37.757 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$c68f5aaa] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:44:37.810 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-28 13:44:37.894 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$b085bed7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:44:37.982 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:44:37.984 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@5fe835d4' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:44:37.989 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$d55a6189] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:44:37.999 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$faaf799f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:44:38.003 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:44:38.004 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:44:38.025 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$17d7f69d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:44:38.057 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$975843cf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:44:38.199 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-28 13:44:38.205 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-28 13:44:38.640 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-28 13:44:38.656 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-28 13:44:38.667 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-28 13:44:38.667 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-28 13:44:39.046 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-28 13:44:39.057 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-28 13:44:39.057 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3613 ms
2023-06-28 13:44:39.902 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@3e3656c2 with name: jasyptStringEncryptor
2023-06-28 13:44:39.967 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-28 13:44:40.055 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-06-28 13:44:40.060 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-28 13:44:40.857 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-28 13:44:41.185 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-28 13:44:41.265 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-28 13:44:41.267 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-28 13:44:41.436 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-28 13:44:41.687 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:44:41.705 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-28 13:44:42.590 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:44:42.593 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-28 13:44:42.645 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-28 13:44:42.903 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-28 13:44:44.058 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-28 13:44:44.070 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-28 13:44:44.294 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-28 13:44:44.295 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-28 13:44:44.295 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-28 13:44:44.295 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-28 13:44:44.295 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-28 13:44:44.295 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-28 13:44:44.295 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-28 13:44:44.295 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-28 13:44:44.295 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-28 13:44:44.468 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@28f6a1e5, org.springframework.security.web.context.SecurityContextPersistenceFilter@43f5c3ad, org.springframework.security.web.header.HeaderWriterFilter@2dd37ab5, org.springframework.web.filter.CorsFilter@3a2dbaf8, org.springframework.security.web.authentication.logout.LogoutFilter@2e5ad795, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@4209b234, org.springframework.security.web.session.ConcurrentSessionFilter@371f34c1, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@64a73894, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7d3e7d8b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7da3672, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5d95177f, org.springframework.security.web.session.SessionManagementFilter@abc0f2b, org.springframework.security.web.access.ExceptionTranslationFilter@6cde46f1, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5df50f85]
2023-06-28 13:44:44.492 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-28 13:44:44.869 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-28 13:44:44.948 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-28 13:44:45.396 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:44:46.248 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-28 13:44:46.280 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-28 13:44:46.442 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-28 13:44:46.446 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-28 13:44:46.505 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-28 13:44:46.510 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.599 seconds (JVM running for 12.949)
2023-06-28 13:44:46.511 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-28 13:44:46.511 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-28 13:44:46.511 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-28 13:44:47.767 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-28 13:44:47.768 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-28 13:44:47.790 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 22 ms
2023-06-28 13:44:59.830 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 13:44:59.901 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:44:59.916 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:45:01.775 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 13:45:01.777 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:45:01.778 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 13:45:01.807 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@58229c74
2023-06-28 13:45:01.813 ERROR [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:311)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 

	<if test="baseYm != null">
	AND 	a.BASE_YMD like  '' || '%'
	</if> 
	<if test="baseYmd != null">
	AND 	a.BASE_YMD =  ''
	</if> 

	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {FAILED after -1 msec}
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT                                                   
			A.EMP_NM 
		,	SUM(A.TERM_PAST_CNT) AS SUM_PAST
		,	SUM(A.TERM_LATE_CNT) AS SUM_LATE
		,	SUM(A.TERM_WIBAN_CNT) AS SUM_WIBAN
		,	AVG(A.TERM_WIBAN_CNT) AS AVG_WIBAN
		,	SUM(A.TOTAL_STATION_CNT) AS SUM_STATION
		,	ROUND(SUM(A.TERM_WIBAN_CNT*1.0) / SUM(A.TOTAL_STATION_CNT) * 100.0,2) AS RATE_WIBAN
	FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE A 
	WHERE   A.COMPANY_NO = '100' 
	AND 	A.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	
	<IF[*] TEST=""baseYm != null"">
	AND 	A.BASE_YMD LIKE  '' || '%'
	</IF> 
	<IF TEST=""baseYmd != null"">
	AND 	A.BASE_YMD =  ''
	</IF> 
	
	AND 	A.ROUTE_NM = DECODE('-전체-','-전체-',A.ROUTE_NM,'-전체-')
	GROUP BY  A.EMP_NM 
	ORDER BY 7 DESC"; expected "ALL, ANY, SOME"; SQL statement:
select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	
	<if test="baseYm != null">
	AND 	a.BASE_YMD like  '' || '%'
	</if> 
	<if test="baseYmd != null">
	AND 	a.BASE_YMD =  ''
	</if> 
	
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.engine.SessionRemote.done(SessionRemote.java:611)
	at org.h2.command.CommandRemote.prepare(CommandRemote.java:85)
	at org.h2.command.CommandRemote.<init>(CommandRemote.java:51)
	at org.h2.engine.SessionRemote.prepareCommand(SessionRemote.java:481)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:76)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:352)
	at net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy.prepareStatement(ConnectionSpy.java:475)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:311)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.instantiateStatement(PreparedStatementHandler.java:87)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.prepare(BaseStatementHandler.java:88)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.prepare(RoutingStatementHandler.java:59)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:85)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at jdk.proxy2/jdk.proxy2.$Proxy117.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:53)
	at jdk.proxy3/jdk.proxy3.$Proxy118.select_PunctualityAnalize_emp(Unknown Source)
	at com.pjy.dashboard.service.DynamicSqlService.getSqlFilterMybatis(DynamicSqlService.java:161)
	at com.pjy.dashboard.controller.TestController.DynamicSqlFilterMybatis(TestController.java:190)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$91c4435f.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 13:45:01.863 ERROR [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - jdbcTemplate error: 
### Error querying database.  Cause: org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT                                                   
			A.EMP_NM 
		,	SUM(A.TERM_PAST_CNT) AS SUM_PAST
		,	SUM(A.TERM_LATE_CNT) AS SUM_LATE
		,	SUM(A.TERM_WIBAN_CNT) AS SUM_WIBAN
		,	AVG(A.TERM_WIBAN_CNT) AS AVG_WIBAN
		,	SUM(A.TOTAL_STATION_CNT) AS SUM_STATION
		,	ROUND(SUM(A.TERM_WIBAN_CNT*1.0) / SUM(A.TOTAL_STATION_CNT) * 100.0,2) AS RATE_WIBAN
	FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE A 
	WHERE   A.COMPANY_NO = '100' 
	AND 	A.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	
	<IF[*] TEST=""baseYm != null"">
	AND 	A.BASE_YMD LIKE  '' || '%'
	</IF> 
	<IF TEST=""baseYmd != null"">
	AND 	A.BASE_YMD =  ''
	</IF> 
	
	AND 	A.ROUTE_NM = DECODE('-전체-','-전체-',A.ROUTE_NM,'-전체-')
	GROUP BY  A.EMP_NM 
	ORDER BY 7 DESC"; expected "ALL, ANY, SOME"; SQL statement:
select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	
	<if test="baseYm != null">
	AND 	a.BASE_YMD like  '' || '%'
	</if> 
	<if test="baseYmd != null">
	AND 	a.BASE_YMD =  ''
	</if> 
	
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.getSyntaxError(Parser.java:1053)
	at org.h2.command.Parser.readTerm(Parser.java:4479)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3238)
	at org.h2.command.Parser.readExpressionWithGlobalConditions(Parser.java:3048)
	at org.h2.command.Parser.parseSelect(Parser.java:2962)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.parsePrepared(Parser.java:868)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:819)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:278)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)

### The error may exist in file [D:\BUS\dashboard\dashboard\target\classes\mapper\h2.xml]
### The error may involve com.pjy.dashboard.mapper.h2.h2Mapper.select_PunctualityAnalize_emp
### The error occurred while executing a query
### SQL: select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */    a.EMP_NM    , sum(a.TERM_PAST_CNT) AS sum_past   , sum(a.TERM_LATE_CNT) AS sum_late   , sum(a.TERM_WIBAN_CNT) AS sum_wiban   , avg(a.TERM_WIBAN_CNT) AS avg_wiban   , sum(a.TOTAL_STATION_CNT) AS sum_station   , round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban  from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a   where   a.company_no = '100'   AND  a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28'     <if test="baseYm != null">  AND  a.BASE_YMD like  '' || '%'  </if>   <if test="baseYmd != null">  AND  a.BASE_YMD =  ''  </if>     AND  a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')  GROUP BY  a.EMP_NM   ORDER BY 7 desc
### Cause: org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT                                                   
			A.EMP_NM 
		,	SUM(A.TERM_PAST_CNT) AS SUM_PAST
		,	SUM(A.TERM_LATE_CNT) AS SUM_LATE
		,	SUM(A.TERM_WIBAN_CNT) AS SUM_WIBAN
		,	AVG(A.TERM_WIBAN_CNT) AS AVG_WIBAN
		,	SUM(A.TOTAL_STATION_CNT) AS SUM_STATION
		,	ROUND(SUM(A.TERM_WIBAN_CNT*1.0) / SUM(A.TOTAL_STATION_CNT) * 100.0,2) AS RATE_WIBAN
	FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE A 
	WHERE   A.COMPANY_NO = '100' 
	AND 	A.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	
	<IF[*] TEST=""baseYm != null"">
	AND 	A.BASE_YMD LIKE  '' || '%'
	</IF> 
	<IF TEST=""baseYmd != null"">
	AND 	A.BASE_YMD =  ''
	</IF> 
	
	AND 	A.ROUTE_NM = DECODE('-전체-','-전체-',A.ROUTE_NM,'-전체-')
	GROUP BY  A.EMP_NM 
	ORDER BY 7 DESC"; expected "ALL, ANY, SOME"; SQL statement:
select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	
	<if test="baseYm != null">
	AND 	a.BASE_YMD like  '' || '%'
	</if> 
	<if test="baseYmd != null">
	AND 	a.BASE_YMD =  ''
	</if> 
	
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.getSyntaxError(Parser.java:1053)
	at org.h2.command.Parser.readTerm(Parser.java:4479)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3238)
	at org.h2.command.Parser.readExpressionWithGlobalConditions(Parser.java:3048)
	at org.h2.command.Parser.parseSelect(Parser.java:2962)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.parsePrepared(Parser.java:868)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:819)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:278)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)

; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT                                                   
			A.EMP_NM 
		,	SUM(A.TERM_PAST_CNT) AS SUM_PAST
		,	SUM(A.TERM_LATE_CNT) AS SUM_LATE
		,	SUM(A.TERM_WIBAN_CNT) AS SUM_WIBAN
		,	AVG(A.TERM_WIBAN_CNT) AS AVG_WIBAN
		,	SUM(A.TOTAL_STATION_CNT) AS SUM_STATION
		,	ROUND(SUM(A.TERM_WIBAN_CNT*1.0) / SUM(A.TOTAL_STATION_CNT) * 100.0,2) AS RATE_WIBAN
	FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE A 
	WHERE   A.COMPANY_NO = '100' 
	AND 	A.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	
	<IF[*] TEST=""baseYm != null"">
	AND 	A.BASE_YMD LIKE  '' || '%'
	</IF> 
	<IF TEST=""baseYmd != null"">
	AND 	A.BASE_YMD =  ''
	</IF> 
	
	AND 	A.ROUTE_NM = DECODE('-전체-','-전체-',A.ROUTE_NM,'-전체-')
	GROUP BY  A.EMP_NM 
	ORDER BY 7 DESC"; expected "ALL, ANY, SOME"; SQL statement:
select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	
	<if test="baseYm != null">
	AND 	a.BASE_YMD like  '' || '%'
	</if> 
	<if test="baseYmd != null">
	AND 	a.BASE_YMD =  ''
	</if> 
	
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.getSyntaxError(Parser.java:1053)
	at org.h2.command.Parser.readTerm(Parser.java:4479)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3238)
	at org.h2.command.Parser.readExpressionWithGlobalConditions(Parser.java:3048)
	at org.h2.command.Parser.parseSelect(Parser.java:2962)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.parsePrepared(Parser.java:868)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:819)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:278)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)

2023-06-28 13:45:01.880 WARN  [http-nio-10010-exec-8] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [com.pjy.dashboard.core.error.exception.BusinessException: jdbcTemplate query error]
2023-06-28 13:51:03.278 INFO  [RMI TCP Connection(18)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-06-28 13:51:03.309 INFO  [RMI TCP Connection(18)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-06-28 13:51:03.312 INFO  [RMI TCP Connection(18)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-06-28 13:51:03.320 INFO  [RMI TCP Connection(18)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-06-28 13:51:03.355 INFO  [RMI TCP Connection(18)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-06-28 13:51:06.976 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 7260 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-28 13:51:06.981 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-28 13:51:07.033 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-28 13:51:07.034 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-28 13:51:08.212 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-28 13:51:08.213 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-28 13:51:08.359 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 136ms. Found 3 JPA repository interfaces.
2023-06-28 13:51:08.697 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-28 13:51:08.698 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-28 13:51:08.742 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 13:51:08.743 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 13:51:08.744 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 13:51:08.744 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 46ms. Found 0 JDBC repository interfaces.
2023-06-28 13:51:09.176 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-28 13:51:09.239 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-28 13:51:09.239 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-28 13:51:09.239 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-28 13:51:09.240 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-28 13:51:09.240 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:51:09.241 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-28 13:51:09.241 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-28 13:51:09.241 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:51:09.241 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:51:09.241 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:51:09.241 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-28 13:51:09.242 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:51:09.302 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$fd110fc3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:51:09.353 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-28 13:51:09.438 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$e70773f0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:51:09.516 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:51:09.518 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@20e3cc94' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:51:09.523 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$bdc16a2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:51:09.535 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$31312eb8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:51:09.540 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:51:09.541 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:51:09.570 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$4e59abb6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:51:09.601 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$cdd9f8e8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:51:09.738 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-28 13:51:09.743 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-28 13:51:10.166 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-28 13:51:10.182 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-28 13:51:10.200 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-28 13:51:10.200 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-28 13:51:10.574 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-28 13:51:10.585 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-28 13:51:10.585 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3551 ms
2023-06-28 13:51:11.404 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@7a8010f4 with name: jasyptStringEncryptor
2023-06-28 13:51:11.455 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-28 13:51:11.547 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-06-28 13:51:11.551 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-28 13:51:12.324 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-28 13:51:12.649 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-28 13:51:12.723 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-28 13:51:12.724 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-28 13:51:12.872 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-28 13:51:13.116 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:51:13.133 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-28 13:51:13.837 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:51:13.841 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-28 13:51:13.898 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-28 13:51:14.173 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-28 13:51:15.220 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-28 13:51:15.232 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-28 13:51:15.413 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-28 13:51:15.413 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-28 13:51:15.413 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-28 13:51:15.413 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-28 13:51:15.413 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-28 13:51:15.414 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-28 13:51:15.414 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-28 13:51:15.414 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-28 13:51:15.414 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-28 13:51:15.573 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3985ccce, org.springframework.security.web.context.SecurityContextPersistenceFilter@7924b5a4, org.springframework.security.web.header.HeaderWriterFilter@65de47cb, org.springframework.web.filter.CorsFilter@3752b8b6, org.springframework.security.web.authentication.logout.LogoutFilter@66ec169b, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@3d5c5da0, org.springframework.security.web.session.ConcurrentSessionFilter@51a202c4, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@7632ab5e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@70ee52f7, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@38909dfd, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7fa281dc, org.springframework.security.web.session.SessionManagementFilter@2c053586, org.springframework.security.web.access.ExceptionTranslationFilter@2e4aacfb, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@50117a48]
2023-06-28 13:51:15.596 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-28 13:51:15.960 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-28 13:51:16.031 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-28 13:51:16.450 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:51:17.235 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-28 13:51:17.271 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-28 13:51:17.416 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-28 13:51:17.419 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-28 13:51:17.477 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-28 13:51:17.483 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 10.971 seconds (JVM running for 12.29)
2023-06-28 13:51:17.484 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-28 13:51:17.484 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-28 13:51:17.484 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-28 13:51:18.328 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-28 13:51:18.328 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-28 13:51:18.347 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 19 ms
2023-06-28 13:51:46.953 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 13:51:47.023 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:51:47.038 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:51:48.588 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 13:51:48.590 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:51:48.594 ERROR [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:311)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  )
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {FAILED after -1 msec}
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT                                                   
			A.EMP_NM 
		,	SUM(A.TERM_PAST_CNT) AS SUM_PAST
		,	SUM(A.TERM_LATE_CNT) AS SUM_LATE
		,	SUM(A.TERM_WIBAN_CNT) AS SUM_WIBAN
		,	AVG(A.TERM_WIBAN_CNT) AS AVG_WIBAN
		,	SUM(A.TOTAL_STATION_CNT) AS SUM_STATION
		,	ROUND(SUM(A.TERM_WIBAN_CNT*1.0) / SUM(A.TOTAL_STATION_CNT) * 100.0,2) AS RATE_WIBAN
	FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE A 
	WHERE   A.COMPANY_NO = '100' 
	AND 	A.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	A.BASE_YMD LIKE  '' || '%'
	AND 	A.BASE_YMD = DECODE('','',A.BASE_YMD,  )[*]
	AND 	A.ROUTE_NM = DECODE('-전체-','-전체-',A.ROUTE_NM,'-전체-')
	GROUP BY  A.EMP_NM 
	ORDER BY 7 DESC"; expected "NOT, EXISTS, INTERSECTS, UNIQUE"; SQL statement:
select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  )
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.engine.SessionRemote.done(SessionRemote.java:611)
	at org.h2.command.CommandRemote.prepare(CommandRemote.java:85)
	at org.h2.command.CommandRemote.<init>(CommandRemote.java:51)
	at org.h2.engine.SessionRemote.prepareCommand(SessionRemote.java:481)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:76)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:352)
	at net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy.prepareStatement(ConnectionSpy.java:475)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:311)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.instantiateStatement(PreparedStatementHandler.java:87)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.prepare(BaseStatementHandler.java:88)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.prepare(RoutingStatementHandler.java:59)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:85)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:324)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
	at jdk.proxy2/jdk.proxy2.$Proxy117.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:231)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:137)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:75)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:53)
	at jdk.proxy3/jdk.proxy3.$Proxy118.select_PunctualityAnalize_emp(Unknown Source)
	at com.pjy.dashboard.service.DynamicSqlService.getSqlFilterMybatis(DynamicSqlService.java:161)
	at com.pjy.dashboard.controller.TestController.DynamicSqlFilterMybatis(TestController.java:190)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$d677f216.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 13:51:48.645 ERROR [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - jdbcTemplate error: 
### Error querying database.  Cause: org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT                                                   
			A.EMP_NM 
		,	SUM(A.TERM_PAST_CNT) AS SUM_PAST
		,	SUM(A.TERM_LATE_CNT) AS SUM_LATE
		,	SUM(A.TERM_WIBAN_CNT) AS SUM_WIBAN
		,	AVG(A.TERM_WIBAN_CNT) AS AVG_WIBAN
		,	SUM(A.TOTAL_STATION_CNT) AS SUM_STATION
		,	ROUND(SUM(A.TERM_WIBAN_CNT*1.0) / SUM(A.TOTAL_STATION_CNT) * 100.0,2) AS RATE_WIBAN
	FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE A 
	WHERE   A.COMPANY_NO = '100' 
	AND 	A.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	A.BASE_YMD LIKE  '' || '%'
	AND 	A.BASE_YMD = DECODE('','',A.BASE_YMD,  )[*]
	AND 	A.ROUTE_NM = DECODE('-전체-','-전체-',A.ROUTE_NM,'-전체-')
	GROUP BY  A.EMP_NM 
	ORDER BY 7 DESC"; expected "NOT, EXISTS, INTERSECTS, UNIQUE"; SQL statement:
select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  )
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.getSyntaxError(Parser.java:1053)
	at org.h2.command.Parser.readTerm(Parser.java:4479)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3962)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3238)
	at org.h2.command.Parser.readAnd(Parser.java:3068)
	at org.h2.command.Parser.readExpressionWithGlobalConditions(Parser.java:3048)
	at org.h2.command.Parser.parseSelect(Parser.java:2962)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.parsePrepared(Parser.java:868)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:819)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:278)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)

### The error may exist in file [D:\BUS\dashboard\dashboard\target\classes\mapper\h2.xml]
### The error may involve com.pjy.dashboard.mapper.h2.h2Mapper.select_PunctualityAnalize_emp
### The error occurred while executing a query
### SQL: select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */    a.EMP_NM    , sum(a.TERM_PAST_CNT) AS sum_past   , sum(a.TERM_LATE_CNT) AS sum_late   , sum(a.TERM_WIBAN_CNT) AS sum_wiban   , avg(a.TERM_WIBAN_CNT) AS avg_wiban   , sum(a.TOTAL_STATION_CNT) AS sum_station   , round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban  from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a   where   a.company_no = '100'   AND  a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28'   AND  a.BASE_YMD like  '' || '%'  AND  a.BASE_YMD = decode('','',a.base_ymd,  )  AND  a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')  GROUP BY  a.EMP_NM   ORDER BY 7 desc
### Cause: org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT                                                   
			A.EMP_NM 
		,	SUM(A.TERM_PAST_CNT) AS SUM_PAST
		,	SUM(A.TERM_LATE_CNT) AS SUM_LATE
		,	SUM(A.TERM_WIBAN_CNT) AS SUM_WIBAN
		,	AVG(A.TERM_WIBAN_CNT) AS AVG_WIBAN
		,	SUM(A.TOTAL_STATION_CNT) AS SUM_STATION
		,	ROUND(SUM(A.TERM_WIBAN_CNT*1.0) / SUM(A.TOTAL_STATION_CNT) * 100.0,2) AS RATE_WIBAN
	FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE A 
	WHERE   A.COMPANY_NO = '100' 
	AND 	A.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	A.BASE_YMD LIKE  '' || '%'
	AND 	A.BASE_YMD = DECODE('','',A.BASE_YMD,  )[*]
	AND 	A.ROUTE_NM = DECODE('-전체-','-전체-',A.ROUTE_NM,'-전체-')
	GROUP BY  A.EMP_NM 
	ORDER BY 7 DESC"; expected "NOT, EXISTS, INTERSECTS, UNIQUE"; SQL statement:
select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  )
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.getSyntaxError(Parser.java:1053)
	at org.h2.command.Parser.readTerm(Parser.java:4479)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3962)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3238)
	at org.h2.command.Parser.readAnd(Parser.java:3068)
	at org.h2.command.Parser.readExpressionWithGlobalConditions(Parser.java:3048)
	at org.h2.command.Parser.parseSelect(Parser.java:2962)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.parsePrepared(Parser.java:868)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:819)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:278)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)

; bad SQL grammar []; nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT                                                   
			A.EMP_NM 
		,	SUM(A.TERM_PAST_CNT) AS SUM_PAST
		,	SUM(A.TERM_LATE_CNT) AS SUM_LATE
		,	SUM(A.TERM_WIBAN_CNT) AS SUM_WIBAN
		,	AVG(A.TERM_WIBAN_CNT) AS AVG_WIBAN
		,	SUM(A.TOTAL_STATION_CNT) AS SUM_STATION
		,	ROUND(SUM(A.TERM_WIBAN_CNT*1.0) / SUM(A.TOTAL_STATION_CNT) * 100.0,2) AS RATE_WIBAN
	FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE A 
	WHERE   A.COMPANY_NO = '100' 
	AND 	A.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	A.BASE_YMD LIKE  '' || '%'
	AND 	A.BASE_YMD = DECODE('','',A.BASE_YMD,  )[*]
	AND 	A.ROUTE_NM = DECODE('-전체-','-전체-',A.ROUTE_NM,'-전체-')
	GROUP BY  A.EMP_NM 
	ORDER BY 7 DESC"; expected "NOT, EXISTS, INTERSECTS, UNIQUE"; SQL statement:
select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  )
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.getSyntaxError(Parser.java:1053)
	at org.h2.command.Parser.readTerm(Parser.java:4479)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3962)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3238)
	at org.h2.command.Parser.readAnd(Parser.java:3068)
	at org.h2.command.Parser.readExpressionWithGlobalConditions(Parser.java:3048)
	at org.h2.command.Parser.parseSelect(Parser.java:2962)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.parsePrepared(Parser.java:868)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:819)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:278)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)

2023-06-28 13:51:48.664 WARN  [http-nio-10010-exec-3] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [com.pjy.dashboard.core.error.exception.BusinessException: jdbcTemplate query error]
2023-06-28 13:52:18.946 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-06-28 13:52:18.975 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-06-28 13:52:18.978 INFO  [RMI TCP Connection(11)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-06-28 13:52:18.984 INFO  [RMI TCP Connection(11)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-06-28 13:52:19.036 INFO  [RMI TCP Connection(11)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-06-28 13:52:22.676 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 16964 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-28 13:52:22.682 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-28 13:52:22.737 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-28 13:52:22.763 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-28 13:52:23.944 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-28 13:52:23.944 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-28 13:52:24.099 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 146ms. Found 3 JPA repository interfaces.
2023-06-28 13:52:24.464 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-28 13:52:24.465 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-28 13:52:24.510 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 13:52:24.511 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 13:52:24.511 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 13:52:24.511 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 46ms. Found 0 JDBC repository interfaces.
2023-06-28 13:52:24.963 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-28 13:52:25.033 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-28 13:52:25.033 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-28 13:52:25.033 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-28 13:52:25.033 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-28 13:52:25.033 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:52:25.034 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-28 13:52:25.034 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-28 13:52:25.034 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:52:25.034 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:52:25.034 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:52:25.034 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-28 13:52:25.034 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 13:52:25.094 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$420da140] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:52:25.146 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-28 13:52:25.243 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$2c04056d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:52:25.329 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:52:25.331 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@4d00a913' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:52:25.333 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$50d8a81f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:52:25.343 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$762dc035] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:52:25.347 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:52:25.348 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:52:25.369 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$93563d33] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:52:25.402 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$12d68a65] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 13:52:25.539 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-28 13:52:25.545 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-28 13:52:25.966 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-28 13:52:25.983 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-28 13:52:25.993 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-28 13:52:25.993 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-28 13:52:26.378 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-28 13:52:26.391 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-28 13:52:26.391 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3628 ms
2023-06-28 13:52:27.242 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@4ca1c8a8 with name: jasyptStringEncryptor
2023-06-28 13:52:27.294 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-28 13:52:27.382 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-06-28 13:52:27.386 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-28 13:52:28.180 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-28 13:52:28.508 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-28 13:52:28.583 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-28 13:52:28.584 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-28 13:52:28.736 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-28 13:52:28.989 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:52:29.006 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-28 13:52:29.732 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:52:29.735 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-28 13:52:29.795 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-28 13:52:30.050 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-28 13:52:31.121 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-28 13:52:31.131 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-28 13:52:31.322 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-28 13:52:31.323 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-28 13:52:31.323 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-28 13:52:31.323 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-28 13:52:31.323 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-28 13:52:31.323 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-28 13:52:31.323 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-28 13:52:31.323 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-28 13:52:31.323 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-28 13:52:31.486 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@348bf52b, org.springframework.security.web.context.SecurityContextPersistenceFilter@ea5ac64, org.springframework.security.web.header.HeaderWriterFilter@3fd2eeaf, org.springframework.web.filter.CorsFilter@1aa3e3e5, org.springframework.security.web.authentication.logout.LogoutFilter@753b9f70, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@7742cb90, org.springframework.security.web.session.ConcurrentSessionFilter@247b64d5, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@4b09b938, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@366f12c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7452eb74, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6021e532, org.springframework.security.web.session.SessionManagementFilter@7c56bdb2, org.springframework.security.web.access.ExceptionTranslationFilter@4c9a0da2, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4d8ba62a]
2023-06-28 13:52:31.508 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-28 13:52:31.861 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-28 13:52:31.946 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-28 13:52:32.365 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:52:33.201 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-28 13:52:33.231 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-28 13:52:33.380 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-28 13:52:33.383 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-28 13:52:33.438 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-28 13:52:33.442 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.236 seconds (JVM running for 12.562)
2023-06-28 13:52:33.443 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-28 13:52:33.443 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-28 13:52:33.443 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-28 13:52:34.655 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-28 13:52:34.656 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-28 13:52:34.676 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 20 ms
2023-06-28 13:52:57.813 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 13:52:57.887 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:52:57.897 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 2 msec}
2023-06-28 13:52:58.842 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 13:52:58.845 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:52:58.848 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:53:09.542 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ad215c28
2023-06-28 13:53:09.544 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:53:09.546 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:53:09.579 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 13:53:09.581 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:53:10.836 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 13:53:10.838 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:53:10.842 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 3 msec}
2023-06-28 13:53:10.905 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 13:53:10.909 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:54:36.537 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 13:54:36.538 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:54:36.540 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 13:54:36.572 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 13:54:36.576 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:54:36.660 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 13:54:36.663 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 13:54:54.552 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bd647f7b
2023-06-28 13:54:54.553 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:54:54.556 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 2 msec}
2023-06-28 13:54:59.652 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ad215c28
2023-06-28 13:54:59.654 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:54:59.656 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:55:15.803 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 13:55:15.804 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:55:15.805 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 13:55:16.661 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 13:55:16.662 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:55:16.665 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:55:18.692 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 13:55:18.694 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:55:18.695 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:55:18.726 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 13:55:18.728 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 13:55:24.590 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 13:55:24.592 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:55:24.594 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:55:24.639 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 13:55:24.642 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 13:56:40.673 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 13:56:40.674 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:56:40.677 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:56:41.963 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 13:56:41.964 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:56:41.967 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:56:42.911 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ad215c28
2023-06-28 13:56:42.912 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:56:42.914 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 13:56:42.944 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 13:56:42.947 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:56:45.153 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 13:56:45.154 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:56:45.157 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 13:57:20.140 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 13:57:20.141 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:57:20.144 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 2 msec}
2023-06-28 13:57:21.557 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 13:57:21.559 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:57:21.560 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 13:57:21.588 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 13:57:21.591 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:57:24.081 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 13:57:24.083 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:57:24.086 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 13:58:08.877 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 13:58:08.879 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:58:08.880 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:58:11.036 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d1996f83
2023-06-28 13:58:11.037 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:58:11.039 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:58:12.268 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@427b6fc1
2023-06-28 13:58:12.269 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:58:12.271 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('38번','-전체-',a.ROUTE_NM,'38번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:58:13.458 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@abf6fc5
2023-06-28 13:58:13.460 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:58:13.462 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:58:14.661 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e10d14d1
2023-06-28 13:58:14.662 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:58:14.663 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 13:58:25.751 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 13:58:25.752 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 13:58:25.755 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 13:58:27.106 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ad215c28
2023-06-28 13:58:27.107 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:58:27.108 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 13:58:27.136 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 13:58:27.142 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 13:58:33.604 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 13:58:33.605 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:58:33.607 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 13:59:53.734 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 13:59:53.735 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:59:53.738 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 13:59:54.704 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 13:59:54.706 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 13:59:54.708 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:00:07.077 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ad215c28
2023-06-28 14:00:07.078 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:00:07.079 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:00:07.110 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:00:07.112 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 14:00:14.501 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:00:14.502 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:00:14.504 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:01:49.510 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 14:01:49.511 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:01:49.514 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:01:50.728 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 14:01:50.729 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:01:50.730 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:01:50.760 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:01:50.763 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 14:01:54.058 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:01:54.060 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:01:54.063 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 14:01:57.811 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:01:57.811 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:01:57.814 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 14:02:03.155 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:02:03.157 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:02:03.159 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 14:02:04.707 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:02:04.709 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:02:04.712 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:02:33.545 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:02:33.547 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:02:33.550 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:03:19.274 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 14:03:19.275 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:03:19.277 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:03:20.735 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:03:20.736 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:03:20.738 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:03:23.606 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ad215c28
2023-06-28 14:03:23.607 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:03:23.607 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 14:03:23.639 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:03:23.641 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 14:03:25.214 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:03:25.215 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:03:25.218 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 14:04:32.899 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 14:04:32.900 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:04:32.902 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:04:33.914 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:04:33.915 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:04:33.917 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 14:04:35.180 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ad215c28
2023-06-28 14:04:35.181 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:04:35.182 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 14:04:35.210 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:04:35.212 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:04:36.352 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 14:04:36.353 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:04:36.355 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:04:37.789 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 14:04:37.791 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:04:37.793 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:04:39.040 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56df25c1
2023-06-28 14:04:39.042 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:04:39.043 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:04:41.157 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@60f196a7
2023-06-28 14:04:41.158 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:04:41.160 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 14:04:41.184 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 14:04:41.186 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:04:42.230 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aca82b3f
2023-06-28 14:04:42.231 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:04:42.232 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:04:43.865 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e3ea0fec
2023-06-28 14:04:43.866 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:04:43.868 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'21번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:04:43.899 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d1996f83
2023-06-28 14:04:43.901 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:04:44.985 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2fa0a484
2023-06-28 14:04:44.986 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:04:44.987 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 14:04:46.063 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@54cc102a
2023-06-28 14:04:46.064 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:04:46.066 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'38번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('38번','-전체-',a.ROUTE_NM,'38번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:04:46.093 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@427b6fc1
2023-06-28 14:04:46.094 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('38번','-전체-',a.ROUTE_NM,'38번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 14:04:47.233 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@315824
2023-06-28 14:04:47.234 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:04:47.236 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('38번','-전체-',a.ROUTE_NM,'38번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 14:04:50.269 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7cbec390
2023-06-28 14:04:50.270 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:04:50.272 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5-1번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:04:50.310 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@abf6fc5
2023-06-28 14:04:50.312 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:04:52.188 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@315824
2023-06-28 14:04:52.189 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:04:52.190 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('38번','-전체-',a.ROUTE_NM,'38번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:04:54.266 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c8742704
2023-06-28 14:04:54.267 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:04:54.268 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'5-1번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:04:54.301 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c8755828
2023-06-28 14:04:54.302 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:04:56.028 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@315824
2023-06-28 14:04:56.029 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:04:56.031 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('38번','-전체-',a.ROUTE_NM,'38번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:04:57.195 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2fa0a484
2023-06-28 14:04:57.196 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:04:57.197 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 14:04:59.518 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@315824
2023-06-28 14:04:59.519 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:04:59.520 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('38번','-전체-',a.ROUTE_NM,'38번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:07:34.659 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 14:07:34.660 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:07:34.662 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:07:36.109 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 14:07:36.110 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:07:36.111 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:07:36.138 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:07:36.140 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:07:37.421 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 14:07:37.422 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:07:37.423 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:07:37.448 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 14:07:37.450 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:07:38.782 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@530c689c
2023-06-28 14:07:38.783 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:07:38.785 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 14:07:38.808 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e10d14d1
2023-06-28 14:07:38.810 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:07:40.425 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bf08db2d
2023-06-28 14:07:40.427 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:07:40.428 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5-1번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:07:40.456 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@abf6fc5
2023-06-28 14:07:40.458 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 14:07:53.158 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:07:53.159 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:07:53.160 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:07:55.096 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 14:07:55.097 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:07:55.098 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 14:08:03.281 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 14:08:03.282 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:08:03.284 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 2 msec}
2023-06-28 14:08:03.407 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 14:08:03.409 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:08:03.453 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4136b331
2023-06-28 14:08:03.456 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 14:08:08.893 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@eefcc42
2023-06-28 14:08:08.894 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:08:08.895 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 14:08:09.021 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 14:08:09.023 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:08:09.080 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4136b331
2023-06-28 14:08:09.082 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:09:50.808 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 14:09:50.809 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:09:50.811 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:09:52.549 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 14:09:52.550 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:09:52.552 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:09:52.581 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:09:52.582 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:09:54.920 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 14:09:54.921 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:09:54.923 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:10:17.338 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 14:10:17.340 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:10:17.341 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:10:17.377 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 14:10:17.379 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 14:10:21.041 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 14:10:21.042 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:10:21.044 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 14:10:21.190 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 14:10:21.192 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:10:21.255 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4136b331
2023-06-28 14:10:21.258 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:11:54.048 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 14:11:54.049 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:11:54.051 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 14:11:55.682 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b54e4e
2023-06-28 14:11:55.683 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:11:55.684 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 14:11:55.713 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 14:11:55.714 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:11:56.859 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@837b68b5
2023-06-28 14:11:56.860 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:11:56.862 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-05-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 14:11:56.950 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c5ef0380
2023-06-28 14:11:56.952 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-05-28','',a.base_ymd,  '2023-05-28')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 14:11:56.991 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4136b331
2023-06-28 14:11:56.993 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:12:06.673 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bdfb9c74
2023-06-28 14:12:06.674 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:12:06.676 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-05-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 14:12:06.766 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c5ef0380
2023-06-28 14:12:06.768 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-05-28','',a.base_ymd,  '2023-05-28')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 14:12:06.801 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4136b331
2023-06-28 14:12:06.803 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 14:13:43.381 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 14:13:43.381 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:13:43.383 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:13:44.563 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:13:44.564 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:13:44.566 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:13:46.203 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ad215c28
2023-06-28 14:13:46.203 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:13:46.205 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 14:13:46.235 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:13:46.237 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:13:49.530 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 14:13:49.531 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:13:49.533 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:13:52.932 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 14:13:52.934 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:13:52.935 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:13:52.962 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 14:13:52.963 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:13:54.659 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 14:13:54.660 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:13:54.662 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 2 msec}
2023-06-28 14:13:54.793 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 14:13:54.795 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:13:54.863 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4136b331
2023-06-28 14:13:54.865 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 14:14:16.450 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@eefcc42
2023-06-28 14:14:16.452 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:14:16.453 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 14:14:16.618 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 14:14:16.620 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:14:16.691 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4136b331
2023-06-28 14:14:16.693 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:14:23.539 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@eefcc42
2023-06-28 14:14:23.540 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:14:23.542 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 14:14:23.668 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 14:14:23.670 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 14:14:23.724 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4136b331
2023-06-28 14:14:23.727 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 14:16:03.039 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@eefcc42
2023-06-28 14:16:03.040 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:16:03.043 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 14:16:03.185 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 14:16:03.186 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:16:03.250 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4136b331
2023-06-28 14:16:03.252 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:24:19.434 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 14:24:19.435 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:24:19.438 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:24:44.690 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 14:24:44.691 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:24:44.693 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 14:24:57.543 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2ea61a6
2023-06-28 14:24:57.544 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:24:57.546 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 14:24:57.571 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 14:24:57.573 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:24:58.937 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aca6fa1b
2023-06-28 14:24:58.938 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:24:58.940 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'20번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 14:24:58.967 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aca82b3f
2023-06-28 14:24:58.969 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:25:01.247 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1f649d35
2023-06-28 14:25:01.248 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:25:01.249 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-02' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 14:25:01.328 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@11af91b1
2023-06-28 14:25:01.330 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-02','',a.base_ymd,  '2023-06-02')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 14:25:01.352 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@96ffb8af
2023-06-28 14:25:01.353 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:25:08.264 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2104135c
2023-06-28 14:25:08.265 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:25:08.267 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 14:25:08.339 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@28f77a68
2023-06-28 14:25:08.341 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 14:25:08.363 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@96ffb8af
2023-06-28 14:25:08.365 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 14:32:51.707 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 14:32:51.708 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:32:51.710 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:32:53.488 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:32:53.489 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:32:53.492 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:32:56.392 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ad215c28
2023-06-28 14:32:56.393 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:32:56.394 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:32:56.422 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:32:56.424 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 14:33:06.770 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 14:33:06.771 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:33:06.772 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 14:33:25.111 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 14:33:25.112 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:33:25.115 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 14:33:25.247 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 14:33:25.250 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:33:38.057 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c69109d1
2023-06-28 14:33:38.058 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:33:38.059 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 14:33:38.191 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 14:33:38.193 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:34:09.340 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c69109d1
2023-06-28 14:34:09.342 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:34:09.344 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 14:34:09.470 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 14:34:09.471 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:34:14.323 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:34:14.325 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:34:14.327 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 14:34:19.420 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c69109d1
2023-06-28 14:34:19.420 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:34:19.422 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 14:34:19.562 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 14:34:19.565 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:34:25.463 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:34:25.464 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:34:25.466 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:34:32.981 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c69109d1
2023-06-28 14:34:32.982 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:34:32.984 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 14:34:33.122 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 14:34:33.124 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:34:35.219 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:34:35.220 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:34:35.223 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 14:34:49.148 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c69109d1
2023-06-28 14:34:49.149 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:34:49.151 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 14:34:49.274 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 14:34:49.277 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:36:14.494 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 14:36:14.495 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:36:14.497 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:36:16.127 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 14:36:16.128 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:36:16.129 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 14:36:16.154 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:36:16.156 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 14:36:17.817 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 14:36:17.818 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:36:17.820 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:36:17.843 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 14:36:17.844 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 14:36:20.172 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b54e4e
2023-06-28 14:36:20.173 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:36:20.174 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 14:36:20.198 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 14:36:20.200 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:36:24.476 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56ddf49d
2023-06-28 14:36:24.477 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:36:24.478 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 14:36:24.505 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56df25c1
2023-06-28 14:36:24.507 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:36:26.366 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e0e3806e
2023-06-28 14:36:26.367 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:36:26.368 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 14:36:26.460 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d32e74ea
2023-06-28 14:36:26.462 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 14:36:27.888 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b9462b6
2023-06-28 14:36:27.889 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:36:27.890 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-02' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 14:36:27.962 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bbe68c33
2023-06-28 14:36:27.964 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-02','',a.base_ymd,  '2023-06-02')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 14:36:34.253 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@19ec9010
2023-06-28 14:36:34.254 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:36:34.255 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 14:36:34.283 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56df25c1
2023-06-28 14:36:34.284 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:36:41.178 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56ddf49d
2023-06-28 14:36:41.179 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:36:41.180 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:36:41.207 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56df25c1
2023-06-28 14:36:41.209 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:39:23.586 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 14:39:23.588 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:39:23.589 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:39:25.027 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 14:39:25.028 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:39:25.029 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 14:39:25.052 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:39:25.054 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:40:33.109 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 14:40:33.110 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:40:33.112 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:40:34.483 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 14:40:34.484 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:40:34.485 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 14:40:34.513 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:40:34.515 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:42:56.418 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 14:42:56.419 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:42:56.421 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:42:59.602 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 14:42:59.603 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:42:59.604 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 14:42:59.634 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:42:59.636 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:43:02.753 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 14:43:02.754 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:43:02.756 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 14:43:10.385 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 14:43:10.386 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:43:10.388 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:43:11.672 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56df25c1
2023-06-28 14:43:11.674 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:43:11.675 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:43:14.061 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56ddf49d
2023-06-28 14:43:14.063 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:43:14.065 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 14:43:14.095 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56df25c1
2023-06-28 14:43:14.096 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:43:14.122 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56df25c1
2023-06-28 14:43:14.124 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:43:19.208 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e0e3806e
2023-06-28 14:43:19.209 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:43:19.211 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 14:43:19.325 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d32e74ea
2023-06-28 14:43:19.327 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:43:19.357 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4136b331
2023-06-28 14:43:19.358 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:44:08.383 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cb3b0dde
2023-06-28 14:44:08.384 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:44:08.386 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 14:44:08.527 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d32e74ea
2023-06-28 14:44:08.529 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:44:08.557 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4136b331
2023-06-28 14:44:08.559 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 14:47:31.242 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 14:47:31.244 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:47:31.245 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:47:32.710 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 14:47:32.711 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:47:32.712 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:47:33.952 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56df25c1
2023-06-28 14:47:33.954 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:47:33.955 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:47:41.269 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e0e3806e
2023-06-28 14:47:41.270 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:47:41.271 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 14:47:41.393 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d32e74ea
2023-06-28 14:47:41.394 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:47:41.423 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4136b331
2023-06-28 14:47:41.425 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:49:00.888 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 14:49:00.889 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:49:00.892 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 2 msec}
2023-06-28 14:49:02.933 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 14:49:02.934 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:49:02.937 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:49:02.967 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:49:02.969 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:49:04.428 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 14:49:04.429 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:49:04.430 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:49:04.458 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 14:49:04.459 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:49:04.527 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 14:49:04.529 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:49:12.209 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 14:49:12.211 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:49:12.212 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:49:52.869 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 14:49:52.870 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:49:52.872 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 14:49:53.027 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 14:49:53.029 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:49:53.085 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4136b331
2023-06-28 14:49:53.087 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:51:02.558 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@eefcc42
2023-06-28 14:51:02.559 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:51:02.560 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 14:51:02.708 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 14:51:02.709 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:51:02.772 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4136b331
2023-06-28 14:51:02.774 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:56:45.429 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 14:56:45.430 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:56:45.432 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:56:49.399 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 14:56:49.400 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:56:49.401 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:56:49.427 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 14:56:49.429 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:56:54.400 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56ddf49d
2023-06-28 14:56:54.400 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:56:54.401 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 14:56:54.425 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56df25c1
2023-06-28 14:56:54.426 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 14:56:56.699 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e0e3806e
2023-06-28 14:56:56.700 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:56:56.702 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 14:56:56.801 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d32e74ea
2023-06-28 14:56:56.803 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 14:56:58.151 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b9462b6
2023-06-28 14:56:58.152 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:56:58.154 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-02' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 14:56:58.226 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bbe68c33
2023-06-28 14:56:58.227 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-02','',a.base_ymd,  '2023-06-02')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 14:57:03.999 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@19ec9010
2023-06-28 14:57:04.000 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:57:04.001 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 14:57:04.025 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56df25c1
2023-06-28 14:57:04.026 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 14:57:06.782 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b54e4e
2023-06-28 14:57:06.783 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 14:57:06.784 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:57:06.808 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 14:57:06.809 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 14:57:13.973 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 14:57:13.974 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 14:57:13.975 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 14:57:13.998 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 14:57:14.000 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:02:00.626 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:02:00.627 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:02:00.629 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:02:02.621 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 15:02:02.621 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:02:02.623 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:02:02.647 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:02:02.649 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:02:05.312 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 15:02:05.313 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:02:05.314 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:02:05.346 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 15:02:05.348 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:02:08.117 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c0a04a09
2023-06-28 15:02:08.118 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:02:08.120 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:02:08.143 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 15:02:08.144 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:02:09.480 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@85e2daeb
2023-06-28 15:02:09.481 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:02:09.482 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'21번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:02:09.505 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d1996f83
2023-06-28 15:02:09.507 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:02:13.461 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@95568039
2023-06-28 15:02:13.462 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:02:13.463 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:02:13.486 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e10d14d1
2023-06-28 15:02:13.488 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:02:15.325 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bf08db2d
2023-06-28 15:02:15.326 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:02:15.328 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5-1번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:02:15.354 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@abf6fc5
2023-06-28 15:02:15.356 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:02:16.594 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6c4db29
2023-06-28 15:02:16.595 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:02:16.596 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'38번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('38번','-전체-',a.ROUTE_NM,'38번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:02:16.623 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@427b6fc1
2023-06-28 15:02:16.624 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('38번','-전체-',a.ROUTE_NM,'38번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:02:21.671 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:02:21.672 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:02:21.675 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:04:40.992 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:04:40.993 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:04:40.995 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:04:42.695 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 15:04:42.696 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:04:42.697 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:04:42.722 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:04:42.724 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:04:44.134 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 15:04:44.135 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:04:44.137 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:04:44.161 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 15:04:44.164 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:04:48.037 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 15:04:48.038 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:04:48.039 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:04:48.064 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 15:04:48.065 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:04:51.351 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b54e4e
2023-06-28 15:04:51.352 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:04:51.353 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:04:51.381 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 15:04:51.383 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:04:54.261 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:04:54.262 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:04:54.264 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:04:55.760 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:04:55.761 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:04:55.763 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:04:56.886 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 15:04:56.887 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:04:56.888 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:04:59.075 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d1996f83
2023-06-28 15:04:59.076 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:04:59.077 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:05:00.044 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@427b6fc1
2023-06-28 15:05:00.045 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:05:00.046 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('38번','-전체-',a.ROUTE_NM,'38번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:05:00.626 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@abf6fc5
2023-06-28 15:05:00.627 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:05:00.629 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:05:01.695 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2ea61a6
2023-06-28 15:05:01.696 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:05:01.697 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:05:01.720 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 15:05:01.722 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:05:03.132 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aca6fa1b
2023-06-28 15:05:03.133 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:05:03.134 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'20번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:05:03.160 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aca82b3f
2023-06-28 15:05:03.162 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:05:08.720 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@36ac85ec
2023-06-28 15:05:08.721 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:05:08.723 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 15:05:08.799 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@28f77a68
2023-06-28 15:05:08.801 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:05:08.834 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@71550bb5
2023-06-28 15:05:08.835 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'20번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:05:08.874 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@96ffb8af
2023-06-28 15:05:08.875 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:05:27.566 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ce419d5c
2023-06-28 15:05:27.567 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:05:27.568 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'21번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:05:27.594 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d1996f83
2023-06-28 15:05:27.596 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:05:28.597 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2f9f7360
2023-06-28 15:05:28.598 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:05:28.599 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'21번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:05:28.624 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2fa0a484
2023-06-28 15:05:28.626 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:05:29.623 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b9a4ff31
2023-06-28 15:05:29.624 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:05:29.624 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 15:05:29.682 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@abeff3ad
2023-06-28 15:05:29.683 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:05:29.716 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f44d84fa
2023-06-28 15:05:29.718 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'21번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:05:29.746 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@19f831f4
2023-06-28 15:05:29.747 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:05:31.406 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a3fc8ca1
2023-06-28 15:05:31.407 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:05:31.408 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 15:05:31.456 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@abeff3ad
2023-06-28 15:05:31.457 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:05:31.482 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5b9dca30
2023-06-28 15:05:31.483 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 15:05:31.547 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@abeff3ad
2023-06-28 15:05:31.548 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:05:31.583 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f44d84fa
2023-06-28 15:05:31.584 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'21번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:05:31.612 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@19f831f4
2023-06-28 15:05:31.613 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:05:33.719 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@96fe878b
2023-06-28 15:05:33.721 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:05:33.722 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'20번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:05:33.750 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@96ffb8af
2023-06-28 15:05:33.752 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 15:05:33.786 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@353f3bf0
2023-06-28 15:05:33.787 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '' 
	AND 	a.ROUTE_NM = decode('','-전체-',a.ROUTE_NM,'')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 15:05:33.820 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3d32a2fc
2023-06-28 15:05:33.822 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('','-전체-',a.ROUTE_NM,'')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:05:33.842 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ece0797f
2023-06-28 15:05:33.843 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '' 
	AND 	a.ROUTE_NM = decode('','-전체-',a.ROUTE_NM,'')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 15:05:33.872 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3d32a2fc
2023-06-28 15:05:33.873 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('','-전체-',a.ROUTE_NM,'')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:05:33.903 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@85903449
2023-06-28 15:05:33.905 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%' 
	AND 	a.ROUTE_NM = decode('','-전체-',a.ROUTE_NM,'')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:05:33.935 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6ea57c2a
2023-06-28 15:05:33.936 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('','-전체-',a.ROUTE_NM,'')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:05:33.958 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@353f3bf0
2023-06-28 15:05:33.959 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '' 
	AND 	a.ROUTE_NM = decode('','-전체-',a.ROUTE_NM,'')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 15:05:33.986 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3d32a2fc
2023-06-28 15:05:33.988 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('','-전체-',a.ROUTE_NM,'')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:06:16.714 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:06:16.715 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:06:16.717 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:06:19.780 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 15:06:19.781 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:06:19.782 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:06:21.696 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d1996f83
2023-06-28 15:06:21.697 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:06:21.698 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:06:26.872 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ad215c28
2023-06-28 15:06:26.873 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:06:26.874 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:06:26.898 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:06:26.900 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:06:33.402 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 15:06:33.403 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:06:33.405 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:06:33.428 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 15:06:33.430 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:06:35.547 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b54e4e
2023-06-28 15:06:35.548 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:06:35.550 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:06:35.573 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 15:06:35.574 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:09:05.361 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:09:05.362 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:09:05.364 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:09:12.543 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:09:12.544 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:09:12.545 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:09:14.715 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 15:09:14.716 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:09:14.717 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:10:17.760 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:10:17.761 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:10:17.763 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:10:22.065 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 15:10:22.066 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:10:22.066 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:10:22.093 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:10:22.095 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:12:04.258 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:12:04.259 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:12:04.261 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:12:05.786 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:12:05.787 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:12:05.789 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:13:09.063 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:13:09.064 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:13:09.066 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:13:10.620 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:13:10.620 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:13:10.622 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:14:30.267 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:14:30.268 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:14:30.270 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:14:32.056 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 15:14:32.058 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:14:32.059 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:14:32.085 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:14:32.086 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:14:33.600 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bf08db2d
2023-06-28 15:14:33.601 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:14:33.603 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5-1번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:14:33.626 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@abf6fc5
2023-06-28 15:14:33.627 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:14:34.676 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6c4db29
2023-06-28 15:14:34.678 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:14:34.679 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'38번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('38번','-전체-',a.ROUTE_NM,'38번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:14:34.704 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@427b6fc1
2023-06-28 15:14:34.707 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('38번','-전체-',a.ROUTE_NM,'38번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:14:35.254 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@85e2daeb
2023-06-28 15:14:35.255 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:14:35.256 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'21번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:14:35.285 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d1996f83
2023-06-28 15:14:35.287 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:14:35.964 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2ea61a6
2023-06-28 15:14:35.965 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:14:35.966 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:14:35.993 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 15:14:35.994 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:14:39.855 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:14:39.856 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:14:39.857 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:16:21.916 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:16:21.917 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:16:21.919 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:16:23.459 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:16:23.460 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:16:23.461 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:16:32.793 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ad215c28
2023-06-28 15:16:32.794 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:16:32.795 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:16:32.820 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:16:32.822 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:16:36.344 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 15:16:36.346 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:16:36.347 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:16:36.373 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 15:16:36.375 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:16:38.834 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 15:16:38.835 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:16:38.837 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 15:16:38.974 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 15:16:38.976 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:16:42.197 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@20f5a434
2023-06-28 15:16:42.198 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:16:42.199 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:16:42.223 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 15:16:42.224 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:16:45.926 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56ddf49d
2023-06-28 15:16:45.927 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:16:45.929 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:16:45.953 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56df25c1
2023-06-28 15:16:45.954 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:16:48.185 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b54e4e
2023-06-28 15:16:48.186 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:16:48.187 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:16:48.218 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 15:16:48.220 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:17:00.541 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aca6fa1b
2023-06-28 15:17:00.542 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:17:00.543 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'20번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:17:00.570 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aca82b3f
2023-06-28 15:17:00.572 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:17:03.236 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aca6fa1b
2023-06-28 15:17:03.237 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:17:03.238 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'20번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:17:03.261 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aca82b3f
2023-06-28 15:17:03.262 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:17:04.666 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56ddf49d
2023-06-28 15:17:04.667 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:17:04.668 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:17:04.694 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56df25c1
2023-06-28 15:17:04.695 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:17:06.110 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b54e4e
2023-06-28 15:17:06.111 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:17:06.112 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:17:06.139 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 15:17:06.141 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:17:29.062 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 15:17:29.063 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:17:29.064 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:17:29.088 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 15:17:29.089 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:17:30.845 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 15:17:30.847 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-06-28 15:17:30.848 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 15:17:30.975 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 15:17:30.977 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:17:33.192 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@24c090dc
2023-06-28 15:17:33.193 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:17:33.194 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:17:33.218 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 15:17:33.219 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:17:34.457 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@837b68b5
2023-06-28 15:17:34.458 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:17:34.459 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-05-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 15:17:34.526 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c5ef0380
2023-06-28 15:17:34.529 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-05-28','',a.base_ymd,  '2023-05-28')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:17:38.508 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@759cda03
2023-06-28 15:17:38.510 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:17:38.511 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-05-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 15:17:38.581 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c5ef0380
2023-06-28 15:17:38.582 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-05-28','',a.base_ymd,  '2023-05-28')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:17:41.720 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c69109d1
2023-06-28 15:17:41.721 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:17:41.722 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 15:17:41.841 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 15:17:41.843 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:17:45.152 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@759cda03
2023-06-28 15:17:45.153 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:17:45.154 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-05-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 15:17:45.232 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c5ef0380
2023-06-28 15:17:45.233 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-05-28','',a.base_ymd,  '2023-05-28')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:18:02.307 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:18:02.308 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:18:02.311 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:18:04.973 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 15:18:04.974 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:18:04.975 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:18:05.000 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:18:05.002 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:18:06.534 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 15:18:06.535 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:18:06.536 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:18:06.558 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 15:18:06.560 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:18:07.503 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 15:18:07.504 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:18:07.506 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 15:18:07.686 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 15:18:07.688 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:18:12.777 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@24c090dc
2023-06-28 15:18:12.778 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:18:12.780 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:18:12.806 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 15:18:12.807 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:18:14.270 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@837b68b5
2023-06-28 15:18:14.270 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:18:14.272 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-05-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 15:18:14.359 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c5ef0380
2023-06-28 15:18:14.361 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-05-28','',a.base_ymd,  '2023-05-28')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:18:16.742 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c69109d1
2023-06-28 15:18:16.743 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:18:16.745 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 15:18:16.884 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 15:18:16.886 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:20:05.836 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:20:05.837 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:20:05.839 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 2 msec}
2023-06-28 15:20:38.646 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:20:38.648 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:20:38.650 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 15:20:44.987 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 15:20:44.988 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:20:44.989 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:20:46.900 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d1996f83
2023-06-28 15:20:46.901 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:20:46.902 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:20:48.041 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@427b6fc1
2023-06-28 15:20:48.042 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:20:48.044 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('38번','-전체-',a.ROUTE_NM,'38번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:20:50.153 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@abf6fc5
2023-06-28 15:20:50.154 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:20:50.157 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:20:51.867 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e10d14d1
2023-06-28 15:20:51.868 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:20:51.869 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:21:28.115 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2ea61a6
2023-06-28 15:21:28.116 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:21:28.117 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:21:28.142 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 15:21:28.144 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:21:29.821 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 15:21:29.822 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:21:29.823 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:21:54.460 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@95568039
2023-06-28 15:21:54.461 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:21:54.462 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:21:54.487 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e10d14d1
2023-06-28 15:21:54.489 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:21:56.375 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9ec1cc10
2023-06-28 15:21:56.375 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:21:56.377 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'5번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:21:56.398 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9ec2fd34
2023-06-28 15:21:56.400 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:25:21.613 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:25:21.614 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:25:21.616 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:25:23.060 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 15:25:23.061 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:25:23.062 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:25:23.089 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:25:23.091 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:25:24.812 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 15:25:24.813 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:25:24.814 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:25:24.837 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 15:25:24.839 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:25:39.082 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 15:25:39.083 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:25:39.085 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 15:25:39.208 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 15:25:39.210 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:27:04.574 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:27:04.575 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:27:04.577 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:27:06.159 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 15:27:06.160 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:27:06.161 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:27:06.190 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:27:06.191 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:27:14.087 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 15:27:14.088 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:27:14.090 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:27:14.116 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 15:27:14.118 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 15:27:16.101 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 15:27:16.102 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:27:16.104 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 15:27:16.229 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 15:27:16.231 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 15:27:19.563 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c69109d1
2023-06-28 15:27:19.564 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:27:19.566 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 15:27:19.672 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 15:27:19.674 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:27:32.010 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d497ea8d
2023-06-28 15:27:32.011 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:27:32.012 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:27:32.038 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 15:27:32.040 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:28:46.118 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:28:46.119 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:28:46.121 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:28:47.479 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 15:28:47.480 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:28:47.482 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:28:47.509 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:28:47.511 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:28:48.792 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 15:28:48.793 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:28:48.795 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:28:48.819 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 15:28:48.821 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:28:52.373 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 15:28:52.374 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:28:52.376 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 15:28:52.484 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 15:28:52.486 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:29:41.852 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:29:41.853 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:29:41.855 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:29:43.233 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 15:29:43.233 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:29:43.234 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:29:43.261 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:29:43.265 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 15:29:44.331 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 15:29:44.332 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:29:44.334 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:29:44.358 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 15:29:44.359 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:29:45.418 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 15:29:45.419 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:29:45.420 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 15:29:45.529 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 15:29:45.531 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:30:22.872 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:30:22.873 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:30:22.875 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:30:24.027 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 15:30:24.028 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:30:24.029 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:30:24.058 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:30:24.061 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:30:25.195 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 15:30:25.196 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:30:25.197 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:30:25.225 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 15:30:25.227 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:30:26.447 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 15:30:26.448 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:30:26.450 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 15:30:26.575 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 15:30:26.576 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:31:52.417 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:31:52.419 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:31:52.421 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 2 msec}
2023-06-28 15:31:53.737 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 15:31:53.738 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:31:53.740 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:31:53.768 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:31:53.771 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:31:55.073 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 15:31:55.073 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:31:55.074 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:31:55.099 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 15:31:55.101 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:31:55.164 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 15:31:55.165 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:31:59.073 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 15:31:59.074 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:31:59.077 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 15:31:59.181 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 15:31:59.183 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:31:59.256 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4136b331
2023-06-28 15:31:59.258 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:32:35.404 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 15:32:35.405 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:32:35.406 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:32:41.371 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b54e4e
2023-06-28 15:32:41.371 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:32:41.373 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:32:41.402 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 15:32:41.403 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:32:41.440 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 15:32:41.441 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:32:44.256 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 15:32:44.257 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:32:44.258 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:32:54.183 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 15:32:54.184 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:32:54.186 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:33:21.964 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:33:21.965 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:33:21.967 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:33:23.198 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 15:33:23.199 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:33:23.201 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:33:23.231 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:33:23.233 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 15:33:25.285 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 15:33:25.286 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:33:25.288 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:33:26.934 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 15:33:26.935 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:33:26.936 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:33:28.357 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56df25c1
2023-06-28 15:33:28.358 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:33:28.360 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:33:30.024 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56ddf49d
2023-06-28 15:33:30.025 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:33:30.026 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:33:30.052 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56df25c1
2023-06-28 15:33:30.054 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:33:31.239 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e0e3806e
2023-06-28 15:33:31.241 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:33:31.242 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 15:33:31.340 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d32e74ea
2023-06-28 15:33:31.341 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:33:32.813 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e10bd278
2023-06-28 15:33:32.814 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:33:32.816 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:33:32.857 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 15:33:32.859 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:33:33.869 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@837b68b5
2023-06-28 15:33:33.870 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:33:33.872 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-05-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 15:33:33.948 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c5ef0380
2023-06-28 15:33:33.949 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-05-28','',a.base_ymd,  '2023-05-28')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:33:36.992 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 15:33:36.993 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:33:36.994 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:33:38.138 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 15:33:38.139 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:33:38.141 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:33:38.174 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 15:33:38.175 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:33:39.344 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 15:33:39.345 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:33:39.347 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 2 msec}
2023-06-28 15:33:39.457 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 15:33:39.459 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:33:41.676 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@759cda03
2023-06-28 15:33:41.676 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:33:41.677 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-05-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 15:33:41.757 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c5ef0380
2023-06-28 15:33:41.758 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-05-28','',a.base_ymd,  '2023-05-28')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:33:43.889 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 15:33:43.890 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:33:43.892 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:51:00.331 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:51:00.332 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
56. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:51:00.334 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
56. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:51:04.061 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:51:04.062 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
56. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:51:04.064 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
56. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:52:10.450 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:52:10.451 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:52:10.453 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:52:12.027 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:52:12.028 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:52:12.029 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:56:12.432 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:56:12.432 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:56:12.434 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:56:16.313 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:56:16.314 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:56:16.315 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:56:18.785 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ad215c28
2023-06-28 15:56:18.786 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:56:18.787 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:56:18.819 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:56:18.821 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 15:56:20.239 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56ddf49d
2023-06-28 15:56:20.241 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:56:20.242 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:56:20.265 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56df25c1
2023-06-28 15:56:20.267 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:56:21.295 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e0e3806e
2023-06-28 15:56:21.296 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:56:21.298 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 15:56:21.394 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d32e74ea
2023-06-28 15:56:21.395 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:56:42.956 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 15:56:42.957 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:56:42.959 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:56:44.396 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@62350d5a
2023-06-28 15:56:44.397 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:56:44.398 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 15:56:44.422 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 15:56:44.423 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 15:56:48.275 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aca6fa1b
2023-06-28 15:56:48.276 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 15:56:48.277 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'20번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 15:56:48.301 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aca82b3f
2023-06-28 15:56:48.303 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 15:57:56.752 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 15:57:56.753 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 15:57:56.755 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 16:01:34.284 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 16:01:34.285 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:01:34.287 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 16:01:36.049 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 16:01:36.050 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:01:36.052 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 16:01:36.077 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 16:01:36.079 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 16:01:45.959 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@abf6fc5
2023-06-28 16:01:45.960 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:01:45.961 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 16:03:37.212 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 16:03:37.213 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:03:37.215 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 16:03:38.709 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 16:03:38.710 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:03:38.712 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 16:03:46.060 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 16:03:46.061 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:03:46.063 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 16:03:48.041 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d1996f83
2023-06-28 16:03:48.042 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:03:48.043 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 16:03:49.000 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@427b6fc1
2023-06-28 16:03:49.001 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:03:49.002 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('38번','-전체-',a.ROUTE_NM,'38번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 16:03:51.800 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6c4db29
2023-06-28 16:03:51.801 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:03:51.802 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'38번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('38번','-전체-',a.ROUTE_NM,'38번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 16:03:51.827 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@427b6fc1
2023-06-28 16:03:51.828 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('38번','-전체-',a.ROUTE_NM,'38번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 16:03:53.129 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@315824
2023-06-28 16:03:53.130 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:03:53.131 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('38번','-전체-',a.ROUTE_NM,'38번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 16:04:12.084 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@427b6fc1
2023-06-28 16:04:12.085 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:04:12.087 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('38번','-전체-',a.ROUTE_NM,'38번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 16:04:21.307 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 16:04:21.308 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:04:21.310 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 16:05:33.184 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 16:05:33.185 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:05:33.187 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 16:05:34.588 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 16:05:34.589 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:05:34.591 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 16:07:47.116 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 16:07:47.117 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:07:47.119 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 16:07:48.586 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 16:07:48.587 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:07:48.588 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 16:15:16.276 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 16:15:16.277 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:15:16.279 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 2 msec}
2023-06-28 16:15:17.626 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 16:15:17.626 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:15:17.633 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 6 msec}
2023-06-28 16:17:19.404 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 16:17:19.405 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:17:19.406 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 16:17:20.887 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d1996f83
2023-06-28 16:17:20.888 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:17:20.888 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 16:17:21.443 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@427b6fc1
2023-06-28 16:17:21.444 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:17:21.445 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('38번','-전체-',a.ROUTE_NM,'38번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 16:17:21.992 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@abf6fc5
2023-06-28 16:17:21.993 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:17:21.994 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 16:17:22.951 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e10d14d1
2023-06-28 16:17:22.952 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:17:22.953 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 16:17:33.477 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 16:17:33.479 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:17:33.481 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 16:17:45.665 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 16:17:45.666 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:17:45.668 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 16:17:49.933 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 16:17:49.934 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:17:49.935 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 16:17:55.796 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 16:17:55.797 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:17:55.799 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 16:19:41.437 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ad215c28
2023-06-28 16:19:41.438 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:19:41.440 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 16:19:41.468 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 16:19:41.470 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 16:19:42.677 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 16:19:42.678 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:19:42.680 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 16:19:43.737 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 16:19:43.738 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:19:43.739 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 16:19:44.859 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 16:19:44.860 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:19:44.861 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 16:19:44.884 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 16:19:44.886 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 16:19:46.069 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 16:19:46.070 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:19:46.071 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 16:19:46.198 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 16:19:46.200 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 16:20:33.337 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@74e9372b
2023-06-28 16:20:33.337 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:20:33.339 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 16:20:33.364 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56df25c1
2023-06-28 16:20:33.366 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 16:20:34.868 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e0e3806e
2023-06-28 16:20:34.868 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:20:34.870 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 16:20:34.987 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d32e74ea
2023-06-28 16:20:34.988 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 16:20:36.345 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b9462b6
2023-06-28 16:20:36.346 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:20:36.347 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-02' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 16:20:36.427 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bbe68c33
2023-06-28 16:20:36.428 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-02','',a.base_ymd,  '2023-06-02')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 16:20:39.369 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c9c3e9c1
2023-06-28 16:20:39.370 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:20:39.371 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 16:20:39.396 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 16:20:39.397 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 16:20:40.602 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@837b68b5
2023-06-28 16:20:40.603 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:20:40.605 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-05-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 16:20:40.685 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c5ef0380
2023-06-28 16:20:40.686 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-05-28','',a.base_ymd,  '2023-05-28')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 16:43:20.407 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 16:43:20.408 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:43:20.410 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 16:43:22.160 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 16:43:22.161 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:43:22.163 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 16:47:40.931 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@beddae18
2023-06-28 16:47:40.931 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_DANGER_DRIVING_INFO} 
2023-06-28 16:47:40.972 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBL_DANGER_DRIVING_INFO a where   a.company_no = '100' AND     a.BASE_YM   = '2023-04' order by a.emp_nm
2023-06-28 16:47:40.982 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:47:40.984 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBL_DANGER_DRIVING_INFO a where   a.company_no = '100' AND     a.BASE_YM   = '2023-04' order by a.emp_nm
 {executed in 0 msec}
2023-06-28 16:47:40.988 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBL_DANGER_DRIVING_INFO a where   a.company_no = '100' AND     a.BASE_YM   = '2023-04' order by a.emp_nm
 {executed in 1 msec}
2023-06-28 16:47:57.399 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:47:57.400 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-28 16:48:00.915 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e1d18cff
2023-06-28 16:48:00.915 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 16:48:00.915 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 16:48:00.916 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:48:00.922 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 6 msec}
2023-06-28 16:48:00.925 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 2 msec}
2023-06-28 16:48:00.961 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@83653cf3
2023-06-28 16:48:00.962 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 16:48:00.962 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 16:48:01.009 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 47 msec}
2023-06-28 16:48:01.049 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 40 msec}
2023-06-28 16:48:01.242 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 16:48:01.242 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 16:48:01.242 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 16:48:01.243 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 16:48:01.244 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 16:48:18.065 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c4efd9d7
2023-06-28 16:48:18.065 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 16:48:18.065 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강병석' ORDER BY b.base_ym desc
2023-06-28 16:48:18.066 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:48:18.068 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강병석' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 16:48:18.069 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강병석' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 16:48:19.186 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d598495f
2023-06-28 16:48:19.186 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 16:48:19.186 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '국수현' ORDER BY b.base_ym desc
2023-06-28 16:48:19.187 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:48:19.188 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '국수현' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 16:48:19.189 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '국수현' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 16:48:20.848 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@61eb6758
2023-06-28 16:48:20.848 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 16:48:20.849 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
2023-06-28 16:48:20.850 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:48:20.851 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 16:48:20.852 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 16:48:54.896 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d8770753
2023-06-28 16:48:54.896 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 16:48:54.896 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 16:48:54.897 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:48:54.900 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 3 msec}
2023-06-28 16:48:54.902 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 0 msec}
2023-06-28 16:48:54.937 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7a0ab747
2023-06-28 16:48:54.937 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 16:48:54.937 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 16:48:54.950 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 13 msec}
2023-06-28 16:48:54.964 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 14 msec}
2023-06-28 16:48:55.030 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd171f5
2023-06-28 16:48:55.030 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 16:48:55.030 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-06-28 16:48:55.031 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 16:48:55.032 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 16:48:59.011 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7ebea6de
2023-06-28 16:48:59.011 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 16:48:59.011 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '김경연' ORDER BY b.base_ym desc
2023-06-28 16:48:59.012 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:48:59.013 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '김경연' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 16:48:59.014 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '김경연' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 16:49:00.376 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f65cca01
2023-06-28 16:49:00.376 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 16:49:00.377 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '김상덕' ORDER BY b.base_ym desc
2023-06-28 16:49:00.377 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:49:00.378 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '김상덕' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 16:49:00.379 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '김상덕' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 16:49:01.127 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fa3cc658
2023-06-28 16:49:01.127 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 16:49:01.127 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '박근호' ORDER BY b.base_ym desc
2023-06-28 16:49:01.128 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:49:01.129 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '박근호' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 16:49:01.130 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '박근호' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 16:49:37.812 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@96bd7345
2023-06-28 16:49:37.813 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 16:49:37.813 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '박봉건' ORDER BY b.base_ym desc
2023-06-28 16:49:37.814 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
82. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:49:37.814 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
82. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '박봉건' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 16:49:37.816 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
82. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '박봉건' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 16:49:38.868 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f3a3e89d
2023-06-28 16:49:38.868 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 16:49:38.868 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '박종호' ORDER BY b.base_ym desc
2023-06-28 16:49:38.869 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
82. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:49:38.870 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
82. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '박종호' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 16:49:38.871 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
82. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '박종호' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 16:49:40.611 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f65cca01
2023-06-28 16:49:40.611 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 16:49:40.611 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '김상덕' ORDER BY b.base_ym desc
2023-06-28 16:49:40.612 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
82. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:49:40.613 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
82. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '김상덕' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 16:49:40.614 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
82. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '김상덕' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 16:49:42.542 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd171f5
2023-06-28 16:49:42.542 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 16:49:42.542 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-06-28 16:49:42.543 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
82. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:49:42.544 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
82. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 16:49:42.545 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
82. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 16:49:43.890 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f3a3e89d
2023-06-28 16:49:43.890 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 16:49:43.890 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '박종호' ORDER BY b.base_ym desc
2023-06-28 16:49:43.891 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
82. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:49:43.892 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
82. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '박종호' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 16:49:43.893 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
82. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '박종호' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 16:49:45.147 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4c280140
2023-06-28 16:49:45.147 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 16:49:45.148 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '방인수' ORDER BY b.base_ym desc
2023-06-28 16:49:45.148 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
82. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:49:45.149 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
82. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '방인수' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 16:49:45.150 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
82. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '방인수' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 16:50:54.718 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
90. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:50:54.719 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
90. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-28 16:51:01.710 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7b3ea218
2023-06-28 16:51:01.710 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 16:51:01.710 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 16:51:01.711 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
90. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:51:01.724 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
90. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 13 msec}
2023-06-28 16:51:01.726 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
90. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 2 msec}
2023-06-28 16:51:01.813 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1cd2520c
2023-06-28 16:51:01.813 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 16:51:01.813 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 16:51:01.957 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
90. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 143 msec}
2023-06-28 16:51:02.110 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
90. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 153 msec}
2023-06-28 16:51:02.417 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@120418a8
2023-06-28 16:51:02.417 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 16:51:02.417 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 16:51:02.418 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
90. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 16:51:02.419 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
90. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 16:51:16.948 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6f055e78
2023-06-28 16:51:16.948 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 16:51:16.949 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '국수현' ORDER BY b.base_ym desc
2023-06-28 16:51:16.950 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
90. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:51:16.952 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
90. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '국수현' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 16:51:16.953 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
90. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '국수현' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 16:51:18.913 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@657ea89
2023-06-28 16:51:18.913 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 16:51:18.913 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '권재범' ORDER BY b.base_ym desc
2023-06-28 16:51:18.914 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 16:51:18.916 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '권재범' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-28 16:51:18.917 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '권재범' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 16:52:32.754 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7ce38a84
2023-06-28 16:52:32.754 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 16:52:32.754 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 16:52:32.756 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 16:52:32.763 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 7 msec}
2023-06-28 16:52:32.766 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 2 msec}
2023-06-28 16:52:32.842 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1e773a78
2023-06-28 16:52:32.842 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 16:52:32.842 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 16:52:32.878 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 35 msec}
2023-06-28 16:52:32.910 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 32 msec}
2023-06-28 16:52:33.030 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e63e870e
2023-06-28 16:52:33.030 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 16:52:33.030 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-06-28 16:52:33.032 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-28 16:52:33.033 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:06:33.104 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:06:33.105 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-28 17:06:44.440 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7b3ea218
2023-06-28 17:06:44.440 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:06:44.440 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:06:44.441 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:06:44.450 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 9 msec}
2023-06-28 17:06:44.451 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 17:06:44.526 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1cd2520c
2023-06-28 17:06:44.526 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:06:44.526 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:06:44.717 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 191 msec}
2023-06-28 17:06:44.845 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 128 msec}
2023-06-28 17:06:45.207 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@120418a8
2023-06-28 17:06:45.207 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:06:45.207 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 17:06:45.209 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-28 17:06:45.210 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:07:02.401 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c26bfaf9
2023-06-28 17:07:02.401 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:07:02.401 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:07:02.402 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:07:02.405 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 2 msec}
2023-06-28 17:07:02.406 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 0 msec}
2023-06-28 17:07:02.440 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@63ffaaed
2023-06-28 17:07:02.440 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:07:02.440 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:07:02.471 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 31 msec}
2023-06-28 17:07:02.517 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 46 msec}
2023-06-28 17:07:02.740 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 17:07:02.740 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:07:02.740 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 17:07:02.742 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-28 17:07:02.742 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 17:08:41.156 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:08:41.157 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-28 17:08:44.671 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e1d18cff
2023-06-28 17:08:44.671 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:08:44.671 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:08:44.672 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:08:44.675 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 3 msec}
2023-06-28 17:08:44.676 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 17:08:44.710 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@83653cf3
2023-06-28 17:08:44.710 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:08:44.710 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:08:44.739 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 29 msec}
2023-06-28 17:08:44.777 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 37 msec}
2023-06-28 17:08:44.966 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 17:08:44.966 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:08:44.966 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 17:08:44.967 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:08:44.968 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:09:05.374 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 17:09:05.375 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-28 17:09:09.761 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7b3ea218
2023-06-28 17:09:09.761 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:09:09.761 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:09:09.762 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 17:09:09.768 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 6 msec}
2023-06-28 17:09:09.770 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 17:09:09.829 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1cd2520c
2023-06-28 17:09:09.829 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:09:09.829 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:09:09.960 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 130 msec}
2023-06-28 17:09:10.094 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 133 msec}
2023-06-28 17:09:10.455 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@120418a8
2023-06-28 17:09:10.455 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:09:10.455 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 17:09:10.457 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-28 17:09:10.458 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:13:31.562 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 17:13:31.563 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-28 17:13:34.829 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e1d18cff
2023-06-28 17:13:34.829 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:13:34.829 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:13:34.829 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 17:13:34.831 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 2 msec}
2023-06-28 17:13:34.832 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 0 msec}
2023-06-28 17:13:34.865 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@83653cf3
2023-06-28 17:13:34.865 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:13:34.865 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:13:34.904 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 39 msec}
2023-06-28 17:13:34.933 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 29 msec}
2023-06-28 17:13:35.116 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 17:13:35.116 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:13:35.116 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 17:13:35.117 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:13:35.117 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 17:14:01.425 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 17:14:01.426 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-28 17:14:06.082 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7b3ea218
2023-06-28 17:14:06.082 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:14:06.082 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:14:06.083 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 17:14:06.091 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 7 msec}
2023-06-28 17:14:06.092 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 17:14:06.165 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1cd2520c
2023-06-28 17:14:06.165 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:14:06.165 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:14:06.307 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 140 msec}
2023-06-28 17:14:06.455 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 148 msec}
2023-06-28 17:14:06.820 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@120418a8
2023-06-28 17:14:06.820 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:14:06.820 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 17:14:06.821 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:14:06.823 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:14:06.824 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:15:37.149 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 17:15:37.150 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-28 17:15:40.672 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7b3ea218
2023-06-28 17:15:40.672 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:15:40.672 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:15:40.673 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:15:40.680 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 7 msec}
2023-06-28 17:15:40.681 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 17:15:40.743 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1cd2520c
2023-06-28 17:15:40.743 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:15:40.743 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:15:40.900 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 157 msec}
2023-06-28 17:15:41.030 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 129 msec}
2023-06-28 17:15:41.359 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@120418a8
2023-06-28 17:15:41.359 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:15:41.359 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 17:15:41.361 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-28 17:15:41.362 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:18:23.701 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:18:23.702 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-28 17:18:27.792 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7b3ea218
2023-06-28 17:18:27.792 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:18:27.792 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:18:27.793 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:18:27.800 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 7 msec}
2023-06-28 17:18:27.802 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 17:18:27.881 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1cd2520c
2023-06-28 17:18:27.881 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:18:27.881 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:18:28.043 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 162 msec}
2023-06-28 17:18:28.168 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 125 msec}
2023-06-28 17:18:28.534 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@120418a8
2023-06-28 17:18:28.534 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:18:28.534 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 17:18:28.535 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:18:28.536 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 17:18:50.399 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:18:50.400 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-28 17:18:53.894 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7b3ea218
2023-06-28 17:18:53.894 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:18:53.894 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:18:53.895 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:18:53.901 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 6 msec}
2023-06-28 17:18:53.903 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 17:18:53.969 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1cd2520c
2023-06-28 17:18:53.969 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:18:53.969 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:18:54.116 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 147 msec}
2023-06-28 17:18:54.257 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 139 msec}
2023-06-28 17:18:54.612 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@120418a8
2023-06-28 17:18:54.612 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:18:54.613 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 17:18:54.614 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:18:54.615 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:20:20.249 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:20:20.250 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-28 17:20:23.867 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7b3ea218
2023-06-28 17:20:23.868 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:20:23.868 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:20:23.868 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 17:20:23.877 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 9 msec}
2023-06-28 17:20:23.879 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 17:20:23.949 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1cd2520c
2023-06-28 17:20:23.949 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:20:23.949 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:20:24.100 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 151 msec}
2023-06-28 17:20:24.225 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 124 msec}
2023-06-28 17:20:24.589 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@120418a8
2023-06-28 17:20:24.589 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:20:24.589 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 17:20:24.590 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:20:24.591 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:21:56.572 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 17:21:56.573 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-28 17:22:00.051 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7b3ea218
2023-06-28 17:22:00.051 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:22:00.051 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:22:00.052 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:22:00.059 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 7 msec}
2023-06-28 17:22:00.060 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 17:22:00.153 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1cd2520c
2023-06-28 17:22:00.153 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:22:00.153 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:22:00.309 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 156 msec}
2023-06-28 17:22:00.466 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 157 msec}
2023-06-28 17:22:00.768 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@120418a8
2023-06-28 17:22:00.768 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:22:00.768 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 17:22:00.770 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-28 17:22:00.771 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:23:06.983 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:23:06.983 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-28 17:23:10.241 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7b3ea218
2023-06-28 17:23:10.241 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:23:10.242 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:23:10.243 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 17:23:10.251 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 7 msec}
2023-06-28 17:23:10.252 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 17:23:10.315 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1cd2520c
2023-06-28 17:23:10.315 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:23:10.316 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:23:10.454 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 138 msec}
2023-06-28 17:23:10.581 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 127 msec}
2023-06-28 17:23:10.882 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@120418a8
2023-06-28 17:23:10.882 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:23:10.882 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 17:23:10.884 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-28 17:23:10.884 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 17:24:40.909 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 17:24:40.909 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-28 17:24:44.447 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e1d18cff
2023-06-28 17:24:44.447 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:24:44.448 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:24:44.448 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 17:24:44.452 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 2 msec}
2023-06-28 17:24:44.453 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 17:24:44.487 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@83653cf3
2023-06-28 17:24:44.487 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:24:44.487 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:24:44.516 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 29 msec}
2023-06-28 17:24:44.547 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 31 msec}
2023-06-28 17:24:44.761 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 17:24:44.762 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:24:44.762 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 17:24:44.763 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:24:44.764 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:26:20.876 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 17:26:20.876 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-28 17:26:24.154 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e1d18cff
2023-06-28 17:26:24.154 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:26:24.154 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:26:24.155 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:26:24.159 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 4 msec}
2023-06-28 17:26:24.160 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 17:26:24.194 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@83653cf3
2023-06-28 17:26:24.194 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:26:24.194 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:26:24.231 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 36 msec}
2023-06-28 17:26:24.264 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 33 msec}
2023-06-28 17:26:24.476 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 17:26:24.477 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:26:24.477 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 17:26:24.478 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:26:24.480 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 17:26:28.884 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 17:26:28.885 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-28 17:26:32.079 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e1d18cff
2023-06-28 17:26:32.079 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:26:32.079 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:26:32.080 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:26:32.082 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 2 msec}
2023-06-28 17:26:32.083 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 17:26:32.116 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@83653cf3
2023-06-28 17:26:32.116 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:26:32.116 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:26:32.151 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 35 msec}
2023-06-28 17:26:32.194 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 42 msec}
2023-06-28 17:26:32.388 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 17:26:32.388 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:26:32.388 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 17:26:32.389 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:26:32.390 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:28:13.316 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 17:28:13.317 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-28 17:28:16.178 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e1d18cff
2023-06-28 17:28:16.178 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:28:16.178 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:28:16.179 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:28:16.182 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 2 msec}
2023-06-28 17:28:16.183 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 0 msec}
2023-06-28 17:28:16.211 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@83653cf3
2023-06-28 17:28:16.211 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:28:16.211 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:28:16.240 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 29 msec}
2023-06-28 17:28:16.270 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 29 msec}
2023-06-28 17:28:16.484 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 17:28:16.484 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:28:16.484 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 17:28:16.485 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:28:16.486 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:28:34.148 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@201ac964
2023-06-28 17:28:34.148 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:28:34.148 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-06-28 17:28:34.149 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:28:34.150 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:28:34.151 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 17:28:35.092 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@61eb6758
2023-06-28 17:28:35.092 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:28:35.092 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
2023-06-28 17:28:35.093 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:28:35.094 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:28:35.094 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 17:28:35.951 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d11f3533
2023-06-28 17:28:35.951 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:28:35.951 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
2023-06-28 17:28:35.952 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
101. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 17:28:35.953 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:28:35.954 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
101. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권태종' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:42:32.724 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1af42c9d
2023-06-28 17:42:32.724 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:42:32.725 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:42:32.726 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
111. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 17:42:32.729 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
111. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 2 msec}
2023-06-28 17:42:32.730 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
111. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 17:42:32.764 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bc87dc91
2023-06-28 17:42:32.764 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:42:32.764 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:42:32.802 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
111. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 38 msec}
2023-06-28 17:42:32.844 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
111. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 42 msec}
2023-06-28 17:42:33.077 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 17:42:33.077 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:42:33.077 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 17:42:33.078 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
111. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:42:33.080 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
111. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-28 17:49:10.985 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c26bfaf9
2023-06-28 17:49:10.985 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:49:10.991 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:49:10.992 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
115. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:49:11.116 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 124 msec}
2023-06-28 17:49:11.118 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 0 msec}
2023-06-28 17:49:11.145 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@63ffaaed
2023-06-28 17:49:11.145 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:49:11.146 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:49:11.175 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 28 msec}
2023-06-28 17:49:11.203 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 28 msec}
2023-06-28 17:49:11.410 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 17:49:11.410 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:49:11.411 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 17:49:11.412 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:49:11.413 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
115. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:49:19.985 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fb482a07
2023-06-28 17:49:19.985 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:49:19.985 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:49:19.986 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
116. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 17:49:20.097 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
116. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 111 msec}
2023-06-28 17:49:20.098 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
116. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 17:49:20.129 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9cdbd9fb
2023-06-28 17:49:20.129 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:49:20.130 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '20번' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:49:20.140 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
116. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '20번' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 10 msec}
2023-06-28 17:49:20.151 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
116. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '20번' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 11 msec}
2023-06-28 17:49:20.215 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9ac79666
2023-06-28 17:49:20.215 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:49:20.215 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
2023-06-28 17:49:20.216 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
116. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:49:20.216 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
116. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 17:49:26.012 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d8770753
2023-06-28 17:49:26.012 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:49:26.012 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:49:26.013 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
116. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:49:26.111 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
116. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 98 msec}
2023-06-28 17:49:26.112 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
116. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 17:49:28.302 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7a0ab747
2023-06-28 17:49:28.302 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:49:28.302 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:49:28.303 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
116. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:49:28.316 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
116. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 13 msec}
2023-06-28 17:49:28.328 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
116. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 12 msec}
2023-06-28 17:49:28.405 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd171f5
2023-06-28 17:49:28.405 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:49:28.406 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-06-28 17:49:28.407 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
116. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:49:28.408 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
116. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:51:50.015 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@96a6695f
2023-06-28 17:51:50.015 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:51:50.020 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:51:50.021 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
121. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:51:50.111 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 90 msec}
2023-06-28 17:51:50.113 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 0 msec}
2023-06-28 17:51:50.151 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@383a1953
2023-06-28 17:51:50.152 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:51:50.152 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:51:50.162 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 10 msec}
2023-06-28 17:51:50.173 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 10 msec}
2023-06-28 17:51:50.237 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd171f5
2023-06-28 17:51:50.237 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:51:50.237 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-06-28 17:51:50.238 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:51:50.239 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:51:54.518 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@69efc0ce
2023-06-28 17:51:54.518 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:51:54.518 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:51:54.519 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
121. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:51:54.601 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 82 msec}
2023-06-28 17:51:54.603 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 0 msec}
2023-06-28 17:51:54.633 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b8370c2
2023-06-28 17:51:54.633 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:51:54.633 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:51:54.661 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 28 msec}
2023-06-28 17:51:54.693 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 32 msec}
2023-06-28 17:51:54.915 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 17:51:54.915 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:51:54.915 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 17:51:54.915 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 17:51:54.916 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:52:20.643 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ef22a38a
2023-06-28 17:52:20.643 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:52:20.643 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:52:20.644 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
121. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 17:52:20.712 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 68 msec}
2023-06-28 17:52:20.713 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 17:52:20.748 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@90b6537e
2023-06-28 17:52:20.748 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:52:20.748 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:52:20.760 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 12 msec}
2023-06-28 17:52:20.775 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 15 msec}
2023-06-28 17:52:20.833 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd171f5
2023-06-28 17:52:20.834 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:52:20.834 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-06-28 17:52:20.835 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:52:20.836 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 17:53:14.883 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a2cbefdc
2023-06-28 17:53:14.883 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:53:14.883 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:53:14.884 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
121. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:53:14.954 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 70 msec}
2023-06-28 17:53:14.955 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 17:53:14.996 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@445f9fd0
2023-06-28 17:53:14.996 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:53:14.996 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '20번' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:53:15.007 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '20번' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 11 msec}
2023-06-28 17:53:15.021 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '20번' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 12 msec}
2023-06-28 17:53:15.085 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9ac79666
2023-06-28 17:53:15.085 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:53:15.086 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
2023-06-28 17:53:15.087 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 17:53:15.088 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 17:53:21.712 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@abc05ec2
2023-06-28 17:53:21.712 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:53:21.712 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:53:21.713 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
121. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:53:21.801 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 88 msec}
2023-06-28 17:53:21.802 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 0 msec}
2023-06-28 17:53:21.831 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4d540eb6
2023-06-28 17:53:21.831 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:53:21.831 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:53:21.864 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 33 msec}
2023-06-28 17:53:21.903 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 37 msec}
2023-06-28 17:53:22.134 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 17:53:22.134 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:53:22.134 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 17:53:22.135 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:53:22.136 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:55:36.117 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c26bfaf9
2023-06-28 17:55:36.117 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:55:36.122 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:55:36.123 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
121. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:55:36.224 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 101 msec}
2023-06-28 17:55:36.226 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 0 msec}
2023-06-28 17:55:36.256 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@63ffaaed
2023-06-28 17:55:36.256 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:55:36.256 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:55:36.284 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 28 msec}
2023-06-28 17:55:36.312 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 28 msec}
2023-06-28 17:55:36.549 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 17:55:36.550 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:55:36.550 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 17:55:36.551 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:55:36.552 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 17:55:40.172 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ef22a38a
2023-06-28 17:55:40.172 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 17:55:40.172 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 17:55:40.173 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
121. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 17:55:40.240 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 67 msec}
2023-06-28 17:55:40.241 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 17:55:42.068 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@90b6537e
2023-06-28 17:55:42.068 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 17:55:42.069 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 17:55:42.069 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
121. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 17:55:42.081 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 12 msec}
2023-06-28 17:55:42.092 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 11 msec}
2023-06-28 17:55:42.153 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd171f5
2023-06-28 17:55:42.153 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 17:55:42.154 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-06-28 17:55:42.155 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 17:55:42.156 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
121. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:01:41.737 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-28 20:01:41.737 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-28 20:01:41.737 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-28 20:01:41.737 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-28 20:02:09.387 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=2h1m38s342ms666µs600ns).
2023-06-28 20:10:24.018 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-28 20:10:24.018 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-28 20:10:24.018 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-06-28 20:10:24.018 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-28 20:10:24.018 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-06-28 20:10:24.056 ERROR [http-nio-10010-exec-4] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c55b097b.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 20:10:24.063 ERROR [http-nio-10010-exec-4] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c55b097b.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 20:10:24.065 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-28 20:10:24.066 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-28 20:10:24.066 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-28 20:10:24.066 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-28 20:10:24.066 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-28 20:10:24.309 ERROR [http-nio-10010-exec-4] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c55b097b.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 20:10:24.310 ERROR [http-nio-10010-exec-4] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c55b097b.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 20:10:24.310 ERROR [http-nio-10010-exec-4] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c55b097b.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 97 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 100 common frames omitted
2023-06-28 20:10:24.615 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-28 20:10:24.616 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-28 20:10:24.616 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-28 20:10:24.616 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-28 20:10:24.616 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-28 20:10:26.015 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 20:10:26.019 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
131. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-06-28 20:10:26.042 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-28 20:10:26.132 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$Epnxmtjb/yVZlxNg.Ty5cu4qSgZcQhcDJZmVO2ilRZNFt7GuFwtdq
2023-06-28 20:10:26.228 INFO  [http-nio-10010-exec-1] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-28 20:10:28.762 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 20:10:28.762 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-28 20:10:33.560 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e1d18cff
2023-06-28 20:10:33.560 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 20:10:33.561 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 20:10:33.561 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 20:10:33.625 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 63 msec}
2023-06-28 20:10:33.626 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 20:10:33.653 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@83653cf3
2023-06-28 20:10:33.653 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 20:10:33.653 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 20:10:33.684 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 31 msec}
2023-06-28 20:10:33.723 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 39 msec}
2023-06-28 20:10:33.932 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 20:10:33.932 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 20:10:33.932 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 20:10:33.933 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:10:33.934 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:10:52.499 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ef22a38a
2023-06-28 20:10:52.499 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 20:10:52.499 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 20:10:52.500 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 20:10:52.566 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 66 msec}
2023-06-28 20:10:52.567 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 20:10:53.918 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@90b6537e
2023-06-28 20:10:53.918 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 20:10:53.918 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 20:10:53.919 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 20:10:53.931 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 11 msec}
2023-06-28 20:10:53.943 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 12 msec}
2023-06-28 20:10:54.020 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd171f5
2023-06-28 20:10:54.020 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 20:10:54.020 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-06-28 20:10:54.021 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:10:54.022 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:11:33.324 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@69efc0ce
2023-06-28 20:11:33.324 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 20:11:33.324 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 20:11:33.325 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 20:11:33.390 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 65 msec}
2023-06-28 20:11:33.391 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	count(b.danger_level) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	count(b.danger_level) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b LEFT OUTER  JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 0 msec}
2023-06-28 20:11:33.421 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b8370c2
2023-06-28 20:11:33.421 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 20:11:33.421 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 20:11:33.448 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 27 msec}
2023-06-28 20:11:33.475 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 27 msec}
2023-06-28 20:11:33.710 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 20:11:33.710 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 20:11:33.710 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 20:11:33.711 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:11:33.712 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:13:56.709 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c26bfaf9
2023-06-28 20:13:56.710 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 20:13:56.714 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 20:13:56.715 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 20:13:56.718 ERROR [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {FAILED after 3 msec}
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "B.BASE_YM" not found; SQL statement:
CREATE FORCE VIEW (
    (SELECT
        "A"."BASE_YM",
        "A"."DANGER_LEVEL",
        "A"."DANGER_CNT",
        ROUND(("DANGER_CNT" / SUM("DANGER_CNT") OVER (PARTITION BY "BASE_YM")), 2) AS "RATE"
    FROM (
        SELECT
            "B"."BASE_YM",
            "B"."DANGER_LEVEL",
            SUM(CASE WHEN UNKNOWN THEN 0 WHEN ("C"."ROUTE_NM" = DECODE(STRINGDECODE('38\ubc88'), '', "C"."ROUTE_NM", STRINGDECODE('38\ubc88'))) THEN 1 ELSE 0 END) AS "DANGER_CNT"
        FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO" "B"
        INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
            ON 1=1
        WHERE (("B"."COMPANY_NO" = '100')
            AND (("B"."BASE_YM" >= '2023-01')
            AND ("B"."BASE_YM" <= '2023-06')))
            AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
            AND ("C"."EMP_NM" = "B"."EMP_NM"))
        GROUP BY "B"."BASE_YM", "B"."DANGER_LEVEL"
    ) "A")
    UNION
    (SELECT
        "B"."BASE_YM",
        STRINGDECODE('\ud569\uacc4'),
        SUM(CASE WHEN ("C"."ROUTE_NM" = NULL) THEN 0 WHEN ("C"."ROUTE_NM" = DECODE(STRINGDECODE('38\ubc88'), '', "C"."ROUTE_NM", STRINGDECODE('38\ubc88'))) THEN 1 ELSE 0 END) AS "DANGER_CNT",
        0
    FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO"
    INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
        ON 1=1
    WHERE (("B"."COMPANY_NO" = '100')
        AND (('2023-01' <= "B"."BASE_YM")
        AND ('2023-06' >= "B"."BASE_YM")))
        AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
        AND ("C"."EMP_NM" = "B"."EMP_NM"))
    GROUP BY "B"."BASE_YM")
) AS
(SELECT
    "A"."BASE_YM",
    "A"."DANGER_LEVEL",
    "A"."DANGER_CNT",
    ROUND(("DANGER_CNT" / SUM("DANGER_CNT") OVER (PARTITION BY "BASE_YM")), 2) AS "RATE"
FROM (
    SELECT
        "B"."BASE_YM",
        "B"."DANGER_LEVEL",
        SUM(CASE WHEN UNKNOWN THEN 0 WHEN ("C"."ROUTE_NM" = DECODE(STRINGDECODE('38\ubc88'), '', "C"."ROUTE_NM", STRINGDECODE('38\ubc88'))) THEN 1 ELSE 0 END) AS "DANGER_CNT"
    FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO" "B"
    INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
        ON 1=1
    WHERE (("B"."COMPANY_NO" = '100')
        AND (("B"."BASE_YM" >= '2023-01')
        AND ("B"."BASE_YM" <= '2023-06')))
        AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
        AND ("C"."EMP_NM" = "B"."EMP_NM"))
    GROUP BY "B"."BASE_YM", "B"."DANGER_LEVEL"
) "A")
UNION
(SELECT
    "B"."BASE_YM",
    STRINGDECODE('\ud569\uacc4'),
    SUM(CASE WHEN ("C"."ROUTE_NM" = NULL) THEN 0 WHEN ("C"."ROUTE_NM" = DECODE(STRINGDECODE('38\ubc88'), '', "C"."ROUTE_NM", STRINGDECODE('38\ubc88'))) THEN 1 ELSE 0 END) AS "DANGER_CNT",
    0
FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO"
INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
    ON 1=1
WHERE (("B"."COMPANY_NO" = '100')
    AND (('2023-01' <= "B"."BASE_YM")
    AND ('2023-06' >= "B"."BASE_YM")))
    AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
    AND ("C"."EMP_NM" = "B"."EMP_NM"))
GROUP BY "B"."BASE_YM") [42122-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.engine.SessionRemote.done(SessionRemote.java:611)
	at org.h2.command.CommandRemote.prepare(CommandRemote.java:85)
	at org.h2.command.CommandRemote.<init>(CommandRemote.java:51)
	at org.h2.engine.SessionRemote.prepareCommand(SessionRemote.java:481)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeQuery(JdbcStatement.java:78)
	at net.sf.log4jdbc.sql.jdbcapi.StatementSpy.executeQuery(StatementSpy.java:731)
	at com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
	at com.zaxxer.hikari.pool.HikariProxyStatement.executeQuery(HikariProxyStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback.doInStatement(JdbcTemplate.java:439)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:376)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:452)
	at com.pjy.dashboard.dao.DynamicSqlDao.getHeaderBySql(DynamicSqlDao.java:209)
	at com.pjy.dashboard.dao.DynamicSqlDao$$FastClassBySpringCGLIB$$8af24191.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at com.pjy.dashboard.dao.DynamicSqlH2Dao$$EnhancerBySpringCGLIB$$ad390736.getHeaderBySql(<generated>)
	at com.pjy.dashboard.service.DynamicSqlService.getHeaderBySql(DynamicSqlService.java:69)
	at com.pjy.dashboard.service.DynamicSqlService.getSqlFilter(DynamicSqlService.java:129)
	at com.pjy.dashboard.controller.TestController.dynamicSqlFilter(TestController.java:207)
	at jdk.internal.reflect.GeneratedMethodAccessor169.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c55b097b.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 20:13:56.766 ERROR [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - jdbcTemplate error: StatementCallback; bad SQL grammar [SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc]; nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "B.BASE_YM" not found; SQL statement:
CREATE FORCE VIEW (
    (SELECT
        "A"."BASE_YM",
        "A"."DANGER_LEVEL",
        "A"."DANGER_CNT",
        ROUND(("DANGER_CNT" / SUM("DANGER_CNT") OVER (PARTITION BY "BASE_YM")), 2) AS "RATE"
    FROM (
        SELECT
            "B"."BASE_YM",
            "B"."DANGER_LEVEL",
            SUM(CASE WHEN UNKNOWN THEN 0 WHEN ("C"."ROUTE_NM" = DECODE(STRINGDECODE('38\ubc88'), '', "C"."ROUTE_NM", STRINGDECODE('38\ubc88'))) THEN 1 ELSE 0 END) AS "DANGER_CNT"
        FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO" "B"
        INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
            ON 1=1
        WHERE (("B"."COMPANY_NO" = '100')
            AND (("B"."BASE_YM" >= '2023-01')
            AND ("B"."BASE_YM" <= '2023-06')))
            AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
            AND ("C"."EMP_NM" = "B"."EMP_NM"))
        GROUP BY "B"."BASE_YM", "B"."DANGER_LEVEL"
    ) "A")
    UNION
    (SELECT
        "B"."BASE_YM",
        STRINGDECODE('\ud569\uacc4'),
        SUM(CASE WHEN ("C"."ROUTE_NM" = NULL) THEN 0 WHEN ("C"."ROUTE_NM" = DECODE(STRINGDECODE('38\ubc88'), '', "C"."ROUTE_NM", STRINGDECODE('38\ubc88'))) THEN 1 ELSE 0 END) AS "DANGER_CNT",
        0
    FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO"
    INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
        ON 1=1
    WHERE (("B"."COMPANY_NO" = '100')
        AND (('2023-01' <= "B"."BASE_YM")
        AND ('2023-06' >= "B"."BASE_YM")))
        AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
        AND ("C"."EMP_NM" = "B"."EMP_NM"))
    GROUP BY "B"."BASE_YM")
) AS
(SELECT
    "A"."BASE_YM",
    "A"."DANGER_LEVEL",
    "A"."DANGER_CNT",
    ROUND(("DANGER_CNT" / SUM("DANGER_CNT") OVER (PARTITION BY "BASE_YM")), 2) AS "RATE"
FROM (
    SELECT
        "B"."BASE_YM",
        "B"."DANGER_LEVEL",
        SUM(CASE WHEN UNKNOWN THEN 0 WHEN ("C"."ROUTE_NM" = DECODE(STRINGDECODE('38\ubc88'), '', "C"."ROUTE_NM", STRINGDECODE('38\ubc88'))) THEN 1 ELSE 0 END) AS "DANGER_CNT"
    FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO" "B"
    INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
        ON 1=1
    WHERE (("B"."COMPANY_NO" = '100')
        AND (("B"."BASE_YM" >= '2023-01')
        AND ("B"."BASE_YM" <= '2023-06')))
        AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
        AND ("C"."EMP_NM" = "B"."EMP_NM"))
    GROUP BY "B"."BASE_YM", "B"."DANGER_LEVEL"
) "A")
UNION
(SELECT
    "B"."BASE_YM",
    STRINGDECODE('\ud569\uacc4'),
    SUM(CASE WHEN ("C"."ROUTE_NM" = NULL) THEN 0 WHEN ("C"."ROUTE_NM" = DECODE(STRINGDECODE('38\ubc88'), '', "C"."ROUTE_NM", STRINGDECODE('38\ubc88'))) THEN 1 ELSE 0 END) AS "DANGER_CNT",
    0
FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO"
INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
    ON 1=1
WHERE (("B"."COMPANY_NO" = '100')
    AND (('2023-01' <= "B"."BASE_YM")
    AND ('2023-06' >= "B"."BASE_YM")))
    AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
    AND ("C"."EMP_NM" = "B"."EMP_NM"))
GROUP BY "B"."BASE_YM") [42122-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.expression.ExpressionColumn.getColumnException(ExpressionColumn.java:163)
	at org.h2.expression.ExpressionColumn.optimize(ExpressionColumn.java:145)
	at org.h2.command.dml.Select.prepare(Select.java:1206)
	at org.h2.command.dml.SelectUnion.prepare(SelectUnion.java:266)
	at org.h2.command.Parser.prepare(Parser.java:723)
	at org.h2.engine.Session.prepare(Session.java:622)
	at org.h2.table.TableView.compileViewQuery(TableView.java:116)
	at org.h2.table.TableView.initColumnsAndTables(TableView.java:168)
	at org.h2.table.TableView.init(TableView.java:109)
	at org.h2.table.TableView.<init>(TableView.java:71)
	at org.h2.table.TableView.createTempView(TableView.java:548)
	at org.h2.command.dml.Query.toTable(Query.java:928)
	at org.h2.command.Parser.readTableFilter(Parser.java:1895)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.parsePrepared(Parser.java:868)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:278)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)

2023-06-28 20:13:56.786 WARN  [http-nio-10010-exec-5] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [com.pjy.dashboard.core.error.exception.BusinessException: jdbcTemplate query error]
2023-06-28 20:13:56.802 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@63ffaaed
2023-06-28 20:13:56.802 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 20:13:56.802 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 20:13:56.836 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 34 msec}
2023-06-28 20:13:56.874 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 37 msec}
2023-06-28 20:13:57.086 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 20:13:57.086 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 20:13:57.086 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 20:13:57.087 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 20:13:57.087 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 20:14:43.396 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c26bfaf9
2023-06-28 20:14:43.396 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 20:14:43.400 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 20:14:43.401 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 20:14:43.403 ERROR [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {FAILED after 2 msec}
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "B.BASE_YM" not found; SQL statement:
CREATE FORCE VIEW (
    (SELECT
        "A"."BASE_YM",
        "A"."DANGER_LEVEL",
        "A"."DANGER_CNT",
        ROUND(("DANGER_CNT" / SUM("DANGER_CNT") OVER (PARTITION BY "BASE_YM")), 2) AS "RATE"
    FROM (
        SELECT
            "B"."BASE_YM",
            "B"."DANGER_LEVEL",
            SUM(CASE WHEN UNKNOWN THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT"
        FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO" "B"
        INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
            ON 1=1
        WHERE (("B"."COMPANY_NO" = '100')
            AND (("B"."BASE_YM" >= '2023-01')
            AND ("B"."BASE_YM" <= '2023-06')))
            AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
            AND ("C"."EMP_NM" = "B"."EMP_NM"))
        GROUP BY "B"."BASE_YM", "B"."DANGER_LEVEL"
    ) "A")
    UNION
    (SELECT
        "B"."BASE_YM",
        STRINGDECODE('\ud569\uacc4'),
        SUM(CASE WHEN ("C"."ROUTE_NM" = NULL) THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT",
        0
    FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO"
    INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
        ON 1=1
    WHERE (("B"."COMPANY_NO" = '100')
        AND (('2023-01' <= "B"."BASE_YM")
        AND ('2023-06' >= "B"."BASE_YM")))
        AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
        AND ("C"."EMP_NM" = "B"."EMP_NM"))
    GROUP BY "B"."BASE_YM")
) AS
(SELECT
    "A"."BASE_YM",
    "A"."DANGER_LEVEL",
    "A"."DANGER_CNT",
    ROUND(("DANGER_CNT" / SUM("DANGER_CNT") OVER (PARTITION BY "BASE_YM")), 2) AS "RATE"
FROM (
    SELECT
        "B"."BASE_YM",
        "B"."DANGER_LEVEL",
        SUM(CASE WHEN UNKNOWN THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT"
    FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO" "B"
    INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
        ON 1=1
    WHERE (("B"."COMPANY_NO" = '100')
        AND (("B"."BASE_YM" >= '2023-01')
        AND ("B"."BASE_YM" <= '2023-06')))
        AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
        AND ("C"."EMP_NM" = "B"."EMP_NM"))
    GROUP BY "B"."BASE_YM", "B"."DANGER_LEVEL"
) "A")
UNION
(SELECT
    "B"."BASE_YM",
    STRINGDECODE('\ud569\uacc4'),
    SUM(CASE WHEN ("C"."ROUTE_NM" = NULL) THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT",
    0
FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO"
INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
    ON 1=1
WHERE (("B"."COMPANY_NO" = '100')
    AND (('2023-01' <= "B"."BASE_YM")
    AND ('2023-06' >= "B"."BASE_YM")))
    AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
    AND ("C"."EMP_NM" = "B"."EMP_NM"))
GROUP BY "B"."BASE_YM") [42122-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.engine.SessionRemote.done(SessionRemote.java:611)
	at org.h2.command.CommandRemote.prepare(CommandRemote.java:85)
	at org.h2.command.CommandRemote.<init>(CommandRemote.java:51)
	at org.h2.engine.SessionRemote.prepareCommand(SessionRemote.java:481)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeQuery(JdbcStatement.java:78)
	at net.sf.log4jdbc.sql.jdbcapi.StatementSpy.executeQuery(StatementSpy.java:731)
	at com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
	at com.zaxxer.hikari.pool.HikariProxyStatement.executeQuery(HikariProxyStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback.doInStatement(JdbcTemplate.java:439)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:376)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:452)
	at com.pjy.dashboard.dao.DynamicSqlDao.getHeaderBySql(DynamicSqlDao.java:209)
	at com.pjy.dashboard.dao.DynamicSqlDao$$FastClassBySpringCGLIB$$8af24191.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at com.pjy.dashboard.dao.DynamicSqlH2Dao$$EnhancerBySpringCGLIB$$ad390736.getHeaderBySql(<generated>)
	at com.pjy.dashboard.service.DynamicSqlService.getHeaderBySql(DynamicSqlService.java:69)
	at com.pjy.dashboard.service.DynamicSqlService.getSqlFilter(DynamicSqlService.java:129)
	at com.pjy.dashboard.controller.TestController.dynamicSqlFilter(TestController.java:207)
	at jdk.internal.reflect.GeneratedMethodAccessor169.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c55b097b.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 20:14:43.404 ERROR [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - jdbcTemplate error: StatementCallback; bad SQL grammar [SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc]; nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "B.BASE_YM" not found; SQL statement:
CREATE FORCE VIEW (
    (SELECT
        "A"."BASE_YM",
        "A"."DANGER_LEVEL",
        "A"."DANGER_CNT",
        ROUND(("DANGER_CNT" / SUM("DANGER_CNT") OVER (PARTITION BY "BASE_YM")), 2) AS "RATE"
    FROM (
        SELECT
            "B"."BASE_YM",
            "B"."DANGER_LEVEL",
            SUM(CASE WHEN UNKNOWN THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT"
        FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO" "B"
        INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
            ON 1=1
        WHERE (("B"."COMPANY_NO" = '100')
            AND (("B"."BASE_YM" >= '2023-01')
            AND ("B"."BASE_YM" <= '2023-06')))
            AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
            AND ("C"."EMP_NM" = "B"."EMP_NM"))
        GROUP BY "B"."BASE_YM", "B"."DANGER_LEVEL"
    ) "A")
    UNION
    (SELECT
        "B"."BASE_YM",
        STRINGDECODE('\ud569\uacc4'),
        SUM(CASE WHEN ("C"."ROUTE_NM" = NULL) THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT",
        0
    FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO"
    INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
        ON 1=1
    WHERE (("B"."COMPANY_NO" = '100')
        AND (('2023-01' <= "B"."BASE_YM")
        AND ('2023-06' >= "B"."BASE_YM")))
        AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
        AND ("C"."EMP_NM" = "B"."EMP_NM"))
    GROUP BY "B"."BASE_YM")
) AS
(SELECT
    "A"."BASE_YM",
    "A"."DANGER_LEVEL",
    "A"."DANGER_CNT",
    ROUND(("DANGER_CNT" / SUM("DANGER_CNT") OVER (PARTITION BY "BASE_YM")), 2) AS "RATE"
FROM (
    SELECT
        "B"."BASE_YM",
        "B"."DANGER_LEVEL",
        SUM(CASE WHEN UNKNOWN THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT"
    FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO" "B"
    INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
        ON 1=1
    WHERE (("B"."COMPANY_NO" = '100')
        AND (("B"."BASE_YM" >= '2023-01')
        AND ("B"."BASE_YM" <= '2023-06')))
        AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
        AND ("C"."EMP_NM" = "B"."EMP_NM"))
    GROUP BY "B"."BASE_YM", "B"."DANGER_LEVEL"
) "A")
UNION
(SELECT
    "B"."BASE_YM",
    STRINGDECODE('\ud569\uacc4'),
    SUM(CASE WHEN ("C"."ROUTE_NM" = NULL) THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT",
    0
FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO"
INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
    ON 1=1
WHERE (("B"."COMPANY_NO" = '100')
    AND (('2023-01' <= "B"."BASE_YM")
    AND ('2023-06' >= "B"."BASE_YM")))
    AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
    AND ("C"."EMP_NM" = "B"."EMP_NM"))
GROUP BY "B"."BASE_YM") [42122-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.expression.ExpressionColumn.getColumnException(ExpressionColumn.java:163)
	at org.h2.expression.ExpressionColumn.optimize(ExpressionColumn.java:145)
	at org.h2.command.dml.Select.prepare(Select.java:1206)
	at org.h2.command.dml.SelectUnion.prepare(SelectUnion.java:266)
	at org.h2.command.Parser.prepare(Parser.java:723)
	at org.h2.engine.Session.prepare(Session.java:622)
	at org.h2.table.TableView.compileViewQuery(TableView.java:116)
	at org.h2.table.TableView.initColumnsAndTables(TableView.java:168)
	at org.h2.table.TableView.init(TableView.java:109)
	at org.h2.table.TableView.<init>(TableView.java:71)
	at org.h2.table.TableView.createTempView(TableView.java:548)
	at org.h2.command.dml.Query.toTable(Query.java:928)
	at org.h2.command.Parser.readTableFilter(Parser.java:1895)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.parsePrepared(Parser.java:868)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:278)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)

2023-06-28 20:14:43.405 WARN  [http-nio-10010-exec-10] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [com.pjy.dashboard.core.error.exception.BusinessException: jdbcTemplate query error]
2023-06-28 20:14:43.415 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@63ffaaed
2023-06-28 20:14:43.415 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 20:14:43.415 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 20:14:43.443 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 28 msec}
2023-06-28 20:14:43.485 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 42 msec}
2023-06-28 20:14:43.698 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 20:14:43.698 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 20:14:43.698 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 20:14:43.699 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:14:43.700 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:15:16.235 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 20:15:16.236 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-28 20:15:19.787 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e1d18cff
2023-06-28 20:15:19.788 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 20:15:19.788 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 20:15:19.789 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 20:15:19.792 ERROR [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {FAILED after 2 msec}
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "B.BASE_YM" not found; SQL statement:
CREATE FORCE VIEW (
    (SELECT
        "A"."BASE_YM",
        "A"."DANGER_LEVEL",
        "A"."DANGER_CNT",
        ROUND(("DANGER_CNT" / SUM("DANGER_CNT") OVER (PARTITION BY "BASE_YM")), 2) AS "RATE"
    FROM (
        SELECT
            "B"."BASE_YM",
            "B"."DANGER_LEVEL",
            SUM(CASE WHEN UNKNOWN THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT"
        FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO" "B"
        INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
            ON 1=1
        WHERE (("B"."COMPANY_NO" = '100')
            AND (("B"."BASE_YM" >= '2023-01')
            AND ("B"."BASE_YM" <= '2023-06')))
            AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
            AND ("C"."EMP_NM" = "B"."EMP_NM"))
        GROUP BY "B"."BASE_YM", "B"."DANGER_LEVEL"
    ) "A")
    UNION
    (SELECT
        "B"."BASE_YM",
        STRINGDECODE('\ud569\uacc4'),
        SUM(CASE WHEN ("C"."ROUTE_NM" = NULL) THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT",
        0
    FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO"
    INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
        ON 1=1
    WHERE (("B"."COMPANY_NO" = '100')
        AND (('2023-01' <= "B"."BASE_YM")
        AND ('2023-06' >= "B"."BASE_YM")))
        AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
        AND ("C"."EMP_NM" = "B"."EMP_NM"))
    GROUP BY "B"."BASE_YM")
) AS
(SELECT
    "A"."BASE_YM",
    "A"."DANGER_LEVEL",
    "A"."DANGER_CNT",
    ROUND(("DANGER_CNT" / SUM("DANGER_CNT") OVER (PARTITION BY "BASE_YM")), 2) AS "RATE"
FROM (
    SELECT
        "B"."BASE_YM",
        "B"."DANGER_LEVEL",
        SUM(CASE WHEN UNKNOWN THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT"
    FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO" "B"
    INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
        ON 1=1
    WHERE (("B"."COMPANY_NO" = '100')
        AND (("B"."BASE_YM" >= '2023-01')
        AND ("B"."BASE_YM" <= '2023-06')))
        AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
        AND ("C"."EMP_NM" = "B"."EMP_NM"))
    GROUP BY "B"."BASE_YM", "B"."DANGER_LEVEL"
) "A")
UNION
(SELECT
    "B"."BASE_YM",
    STRINGDECODE('\ud569\uacc4'),
    SUM(CASE WHEN ("C"."ROUTE_NM" = NULL) THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT",
    0
FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO"
INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
    ON 1=1
WHERE (("B"."COMPANY_NO" = '100')
    AND (('2023-01' <= "B"."BASE_YM")
    AND ('2023-06' >= "B"."BASE_YM")))
    AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
    AND ("C"."EMP_NM" = "B"."EMP_NM"))
GROUP BY "B"."BASE_YM") [42122-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.engine.SessionRemote.done(SessionRemote.java:611)
	at org.h2.command.CommandRemote.prepare(CommandRemote.java:85)
	at org.h2.command.CommandRemote.<init>(CommandRemote.java:51)
	at org.h2.engine.SessionRemote.prepareCommand(SessionRemote.java:481)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeQuery(JdbcStatement.java:78)
	at net.sf.log4jdbc.sql.jdbcapi.StatementSpy.executeQuery(StatementSpy.java:731)
	at com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
	at com.zaxxer.hikari.pool.HikariProxyStatement.executeQuery(HikariProxyStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback.doInStatement(JdbcTemplate.java:439)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:376)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:452)
	at com.pjy.dashboard.dao.DynamicSqlDao.getHeaderBySql(DynamicSqlDao.java:209)
	at com.pjy.dashboard.dao.DynamicSqlDao$$FastClassBySpringCGLIB$$8af24191.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at com.pjy.dashboard.dao.DynamicSqlH2Dao$$EnhancerBySpringCGLIB$$ad390736.getHeaderBySql(<generated>)
	at com.pjy.dashboard.service.DynamicSqlService.getHeaderBySql(DynamicSqlService.java:69)
	at com.pjy.dashboard.service.DynamicSqlService.getSqlFilter(DynamicSqlService.java:129)
	at com.pjy.dashboard.controller.TestController.dynamicSqlFilter(TestController.java:207)
	at jdk.internal.reflect.GeneratedMethodAccessor169.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c55b097b.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 20:15:19.793 ERROR [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - jdbcTemplate error: StatementCallback; bad SQL grammar [SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc]; nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "B.BASE_YM" not found; SQL statement:
CREATE FORCE VIEW (
    (SELECT
        "A"."BASE_YM",
        "A"."DANGER_LEVEL",
        "A"."DANGER_CNT",
        ROUND(("DANGER_CNT" / SUM("DANGER_CNT") OVER (PARTITION BY "BASE_YM")), 2) AS "RATE"
    FROM (
        SELECT
            "B"."BASE_YM",
            "B"."DANGER_LEVEL",
            SUM(CASE WHEN UNKNOWN THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT"
        FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO" "B"
        INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
            ON 1=1
        WHERE (("B"."COMPANY_NO" = '100')
            AND (("B"."BASE_YM" >= '2023-01')
            AND ("B"."BASE_YM" <= '2023-06')))
            AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
            AND ("C"."EMP_NM" = "B"."EMP_NM"))
        GROUP BY "B"."BASE_YM", "B"."DANGER_LEVEL"
    ) "A")
    UNION
    (SELECT
        "B"."BASE_YM",
        STRINGDECODE('\ud569\uacc4'),
        SUM(CASE WHEN ("C"."ROUTE_NM" = NULL) THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT",
        0
    FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO"
    INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
        ON 1=1
    WHERE (("B"."COMPANY_NO" = '100')
        AND (('2023-01' <= "B"."BASE_YM")
        AND ('2023-06' >= "B"."BASE_YM")))
        AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
        AND ("C"."EMP_NM" = "B"."EMP_NM"))
    GROUP BY "B"."BASE_YM")
) AS
(SELECT
    "A"."BASE_YM",
    "A"."DANGER_LEVEL",
    "A"."DANGER_CNT",
    ROUND(("DANGER_CNT" / SUM("DANGER_CNT") OVER (PARTITION BY "BASE_YM")), 2) AS "RATE"
FROM (
    SELECT
        "B"."BASE_YM",
        "B"."DANGER_LEVEL",
        SUM(CASE WHEN UNKNOWN THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT"
    FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO" "B"
    INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
        ON 1=1
    WHERE (("B"."COMPANY_NO" = '100')
        AND (("B"."BASE_YM" >= '2023-01')
        AND ("B"."BASE_YM" <= '2023-06')))
        AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
        AND ("C"."EMP_NM" = "B"."EMP_NM"))
    GROUP BY "B"."BASE_YM", "B"."DANGER_LEVEL"
) "A")
UNION
(SELECT
    "B"."BASE_YM",
    STRINGDECODE('\ud569\uacc4'),
    SUM(CASE WHEN ("C"."ROUTE_NM" = NULL) THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT",
    0
FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO"
INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
    ON 1=1
WHERE (("B"."COMPANY_NO" = '100')
    AND (('2023-01' <= "B"."BASE_YM")
    AND ('2023-06' >= "B"."BASE_YM")))
    AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
    AND ("C"."EMP_NM" = "B"."EMP_NM"))
GROUP BY "B"."BASE_YM") [42122-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.expression.ExpressionColumn.getColumnException(ExpressionColumn.java:163)
	at org.h2.expression.ExpressionColumn.optimize(ExpressionColumn.java:145)
	at org.h2.command.dml.Select.prepare(Select.java:1206)
	at org.h2.command.dml.SelectUnion.prepare(SelectUnion.java:266)
	at org.h2.command.Parser.prepare(Parser.java:723)
	at org.h2.engine.Session.prepare(Session.java:622)
	at org.h2.table.TableView.compileViewQuery(TableView.java:116)
	at org.h2.table.TableView.initColumnsAndTables(TableView.java:168)
	at org.h2.table.TableView.init(TableView.java:109)
	at org.h2.table.TableView.<init>(TableView.java:71)
	at org.h2.table.TableView.createTempView(TableView.java:548)
	at org.h2.command.dml.Query.toTable(Query.java:928)
	at org.h2.command.Parser.readTableFilter(Parser.java:1895)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.parsePrepared(Parser.java:868)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:278)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)

2023-06-28 20:15:19.795 WARN  [http-nio-10010-exec-2] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [com.pjy.dashboard.core.error.exception.BusinessException: jdbcTemplate query error]
2023-06-28 20:15:19.804 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@83653cf3
2023-06-28 20:15:19.804 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 20:15:19.804 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 20:15:19.831 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 27 msec}
2023-06-28 20:15:19.865 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 34 msec}
2023-06-28 20:15:20.095 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 20:15:20.095 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 20:15:20.095 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 20:15:20.097 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:15:20.098 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:15:49.183 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 20:15:49.184 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-28 20:15:53.049 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e1d18cff
2023-06-28 20:15:53.049 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 20:15:53.050 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 20:15:53.051 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 20:15:53.053 ERROR [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {FAILED after 2 msec}
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "B.BASE_YM" not found; SQL statement:
CREATE FORCE VIEW (
    (SELECT
        "A"."BASE_YM",
        "A"."DANGER_LEVEL",
        "A"."DANGER_CNT",
        ROUND(("DANGER_CNT" / SUM("DANGER_CNT") OVER (PARTITION BY "BASE_YM")), 2) AS "RATE"
    FROM (
        SELECT
            "B"."BASE_YM",
            "B"."DANGER_LEVEL",
            SUM(CASE WHEN UNKNOWN THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT"
        FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO" "B"
        INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
            ON 1=1
        WHERE (("B"."COMPANY_NO" = '100')
            AND (("B"."BASE_YM" >= '2023-01')
            AND ("B"."BASE_YM" <= '2023-06')))
            AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
            AND ("C"."EMP_NM" = "B"."EMP_NM"))
        GROUP BY "B"."BASE_YM", "B"."DANGER_LEVEL"
    ) "A")
    UNION
    (SELECT
        "B"."BASE_YM",
        STRINGDECODE('\ud569\uacc4'),
        SUM(CASE WHEN ("C"."ROUTE_NM" = NULL) THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT",
        0
    FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO"
    INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
        ON 1=1
    WHERE (("B"."COMPANY_NO" = '100')
        AND (('2023-01' <= "B"."BASE_YM")
        AND ('2023-06' >= "B"."BASE_YM")))
        AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
        AND ("C"."EMP_NM" = "B"."EMP_NM"))
    GROUP BY "B"."BASE_YM")
) AS
(SELECT
    "A"."BASE_YM",
    "A"."DANGER_LEVEL",
    "A"."DANGER_CNT",
    ROUND(("DANGER_CNT" / SUM("DANGER_CNT") OVER (PARTITION BY "BASE_YM")), 2) AS "RATE"
FROM (
    SELECT
        "B"."BASE_YM",
        "B"."DANGER_LEVEL",
        SUM(CASE WHEN UNKNOWN THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT"
    FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO" "B"
    INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
        ON 1=1
    WHERE (("B"."COMPANY_NO" = '100')
        AND (("B"."BASE_YM" >= '2023-01')
        AND ("B"."BASE_YM" <= '2023-06')))
        AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
        AND ("C"."EMP_NM" = "B"."EMP_NM"))
    GROUP BY "B"."BASE_YM", "B"."DANGER_LEVEL"
) "A")
UNION
(SELECT
    "B"."BASE_YM",
    STRINGDECODE('\ud569\uacc4'),
    SUM(CASE WHEN ("C"."ROUTE_NM" = NULL) THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT",
    0
FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO"
INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
    ON 1=1
WHERE (("B"."COMPANY_NO" = '100')
    AND (('2023-01' <= "B"."BASE_YM")
    AND ('2023-06' >= "B"."BASE_YM")))
    AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
    AND ("C"."EMP_NM" = "B"."EMP_NM"))
GROUP BY "B"."BASE_YM") [42122-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.engine.SessionRemote.done(SessionRemote.java:611)
	at org.h2.command.CommandRemote.prepare(CommandRemote.java:85)
	at org.h2.command.CommandRemote.<init>(CommandRemote.java:51)
	at org.h2.engine.SessionRemote.prepareCommand(SessionRemote.java:481)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeQuery(JdbcStatement.java:78)
	at net.sf.log4jdbc.sql.jdbcapi.StatementSpy.executeQuery(StatementSpy.java:731)
	at com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
	at com.zaxxer.hikari.pool.HikariProxyStatement.executeQuery(HikariProxyStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback.doInStatement(JdbcTemplate.java:439)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:376)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:452)
	at com.pjy.dashboard.dao.DynamicSqlDao.getHeaderBySql(DynamicSqlDao.java:209)
	at com.pjy.dashboard.dao.DynamicSqlDao$$FastClassBySpringCGLIB$$8af24191.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at com.pjy.dashboard.dao.DynamicSqlH2Dao$$EnhancerBySpringCGLIB$$ad390736.getHeaderBySql(<generated>)
	at com.pjy.dashboard.service.DynamicSqlService.getHeaderBySql(DynamicSqlService.java:69)
	at com.pjy.dashboard.service.DynamicSqlService.getSqlFilter(DynamicSqlService.java:129)
	at com.pjy.dashboard.controller.TestController.dynamicSqlFilter(TestController.java:207)
	at jdk.internal.reflect.GeneratedMethodAccessor169.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c55b097b.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 20:15:53.054 ERROR [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - jdbcTemplate error: StatementCallback; bad SQL grammar [SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc]; nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "B.BASE_YM" not found; SQL statement:
CREATE FORCE VIEW (
    (SELECT
        "A"."BASE_YM",
        "A"."DANGER_LEVEL",
        "A"."DANGER_CNT",
        ROUND(("DANGER_CNT" / SUM("DANGER_CNT") OVER (PARTITION BY "BASE_YM")), 2) AS "RATE"
    FROM (
        SELECT
            "B"."BASE_YM",
            "B"."DANGER_LEVEL",
            SUM(CASE WHEN UNKNOWN THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT"
        FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO" "B"
        INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
            ON 1=1
        WHERE (("B"."COMPANY_NO" = '100')
            AND (("B"."BASE_YM" >= '2023-01')
            AND ("B"."BASE_YM" <= '2023-06')))
            AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
            AND ("C"."EMP_NM" = "B"."EMP_NM"))
        GROUP BY "B"."BASE_YM", "B"."DANGER_LEVEL"
    ) "A")
    UNION
    (SELECT
        "B"."BASE_YM",
        STRINGDECODE('\ud569\uacc4'),
        SUM(CASE WHEN ("C"."ROUTE_NM" = NULL) THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT",
        0
    FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO"
    INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
        ON 1=1
    WHERE (("B"."COMPANY_NO" = '100')
        AND (('2023-01' <= "B"."BASE_YM")
        AND ('2023-06' >= "B"."BASE_YM")))
        AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
        AND ("C"."EMP_NM" = "B"."EMP_NM"))
    GROUP BY "B"."BASE_YM")
) AS
(SELECT
    "A"."BASE_YM",
    "A"."DANGER_LEVEL",
    "A"."DANGER_CNT",
    ROUND(("DANGER_CNT" / SUM("DANGER_CNT") OVER (PARTITION BY "BASE_YM")), 2) AS "RATE"
FROM (
    SELECT
        "B"."BASE_YM",
        "B"."DANGER_LEVEL",
        SUM(CASE WHEN UNKNOWN THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT"
    FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO" "B"
    INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
        ON 1=1
    WHERE (("B"."COMPANY_NO" = '100')
        AND (("B"."BASE_YM" >= '2023-01')
        AND ("B"."BASE_YM" <= '2023-06')))
        AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
        AND ("C"."EMP_NM" = "B"."EMP_NM"))
    GROUP BY "B"."BASE_YM", "B"."DANGER_LEVEL"
) "A")
UNION
(SELECT
    "B"."BASE_YM",
    STRINGDECODE('\ud569\uacc4'),
    SUM(CASE WHEN ("C"."ROUTE_NM" = NULL) THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT",
    0
FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO"
INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
    ON 1=1
WHERE (("B"."COMPANY_NO" = '100')
    AND (('2023-01' <= "B"."BASE_YM")
    AND ('2023-06' >= "B"."BASE_YM")))
    AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
    AND ("C"."EMP_NM" = "B"."EMP_NM"))
GROUP BY "B"."BASE_YM") [42122-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.expression.ExpressionColumn.getColumnException(ExpressionColumn.java:163)
	at org.h2.expression.ExpressionColumn.optimize(ExpressionColumn.java:145)
	at org.h2.command.dml.Select.prepare(Select.java:1206)
	at org.h2.command.dml.SelectUnion.prepare(SelectUnion.java:266)
	at org.h2.command.Parser.prepare(Parser.java:723)
	at org.h2.engine.Session.prepare(Session.java:622)
	at org.h2.table.TableView.compileViewQuery(TableView.java:116)
	at org.h2.table.TableView.initColumnsAndTables(TableView.java:168)
	at org.h2.table.TableView.init(TableView.java:109)
	at org.h2.table.TableView.<init>(TableView.java:71)
	at org.h2.table.TableView.createTempView(TableView.java:548)
	at org.h2.command.dml.Query.toTable(Query.java:928)
	at org.h2.command.Parser.readTableFilter(Parser.java:1895)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.parsePrepared(Parser.java:868)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:278)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)

2023-06-28 20:15:53.055 WARN  [http-nio-10010-exec-8] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [com.pjy.dashboard.core.error.exception.BusinessException: jdbcTemplate query error]
2023-06-28 20:15:53.064 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@83653cf3
2023-06-28 20:15:53.065 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 20:15:53.065 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 20:15:53.094 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 29 msec}
2023-06-28 20:15:53.126 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 32 msec}
2023-06-28 20:15:53.328 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 20:15:53.328 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 20:15:53.328 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 20:15:53.329 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:15:53.331 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 20:18:20.422 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c26bfaf9
2023-06-28 20:18:20.422 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 20:18:20.422 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 20:18:20.423 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 20:18:20.426 ERROR [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {FAILED after 2 msec}
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "B.BASE_YM" not found; SQL statement:
CREATE FORCE VIEW (
    (SELECT
        "A"."BASE_YM",
        "A"."DANGER_LEVEL",
        "A"."DANGER_CNT",
        ROUND(("DANGER_CNT" / SUM("DANGER_CNT") OVER (PARTITION BY "BASE_YM")), 2) AS "RATE"
    FROM (
        SELECT
            "B"."BASE_YM",
            "B"."DANGER_LEVEL",
            SUM(CASE WHEN UNKNOWN THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT"
        FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO" "B"
        INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
            ON 1=1
        WHERE (("B"."COMPANY_NO" = '100')
            AND (("B"."BASE_YM" >= '2023-01')
            AND ("B"."BASE_YM" <= '2023-06')))
            AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
            AND ("C"."EMP_NM" = "B"."EMP_NM"))
        GROUP BY "B"."BASE_YM", "B"."DANGER_LEVEL"
    ) "A")
    UNION
    (SELECT
        "B"."BASE_YM",
        STRINGDECODE('\ud569\uacc4'),
        SUM(CASE WHEN ("C"."ROUTE_NM" = NULL) THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT",
        0
    FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO"
    INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
        ON 1=1
    WHERE (("B"."COMPANY_NO" = '100')
        AND (('2023-01' <= "B"."BASE_YM")
        AND ('2023-06' >= "B"."BASE_YM")))
        AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
        AND ("C"."EMP_NM" = "B"."EMP_NM"))
    GROUP BY "B"."BASE_YM")
) AS
(SELECT
    "A"."BASE_YM",
    "A"."DANGER_LEVEL",
    "A"."DANGER_CNT",
    ROUND(("DANGER_CNT" / SUM("DANGER_CNT") OVER (PARTITION BY "BASE_YM")), 2) AS "RATE"
FROM (
    SELECT
        "B"."BASE_YM",
        "B"."DANGER_LEVEL",
        SUM(CASE WHEN UNKNOWN THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT"
    FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO" "B"
    INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
        ON 1=1
    WHERE (("B"."COMPANY_NO" = '100')
        AND (("B"."BASE_YM" >= '2023-01')
        AND ("B"."BASE_YM" <= '2023-06')))
        AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
        AND ("C"."EMP_NM" = "B"."EMP_NM"))
    GROUP BY "B"."BASE_YM", "B"."DANGER_LEVEL"
) "A")
UNION
(SELECT
    "B"."BASE_YM",
    STRINGDECODE('\ud569\uacc4'),
    SUM(CASE WHEN ("C"."ROUTE_NM" = NULL) THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT",
    0
FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO"
INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
    ON 1=1
WHERE (("B"."COMPANY_NO" = '100')
    AND (('2023-01' <= "B"."BASE_YM")
    AND ('2023-06' >= "B"."BASE_YM")))
    AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
    AND ("C"."EMP_NM" = "B"."EMP_NM"))
GROUP BY "B"."BASE_YM") [42122-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.engine.SessionRemote.done(SessionRemote.java:611)
	at org.h2.command.CommandRemote.prepare(CommandRemote.java:85)
	at org.h2.command.CommandRemote.<init>(CommandRemote.java:51)
	at org.h2.engine.SessionRemote.prepareCommand(SessionRemote.java:481)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeQuery(JdbcStatement.java:78)
	at net.sf.log4jdbc.sql.jdbcapi.StatementSpy.executeQuery(StatementSpy.java:731)
	at com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
	at com.zaxxer.hikari.pool.HikariProxyStatement.executeQuery(HikariProxyStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback.doInStatement(JdbcTemplate.java:439)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:376)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:452)
	at com.pjy.dashboard.dao.DynamicSqlDao.getHeaderBySql(DynamicSqlDao.java:209)
	at com.pjy.dashboard.dao.DynamicSqlDao$$FastClassBySpringCGLIB$$8af24191.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at com.pjy.dashboard.dao.DynamicSqlH2Dao$$EnhancerBySpringCGLIB$$ad390736.getHeaderBySql(<generated>)
	at com.pjy.dashboard.service.DynamicSqlService.getHeaderBySql(DynamicSqlService.java:69)
	at com.pjy.dashboard.service.DynamicSqlService.getSqlFilter(DynamicSqlService.java:129)
	at com.pjy.dashboard.controller.TestController.dynamicSqlFilter(TestController.java:207)
	at jdk.internal.reflect.GeneratedMethodAccessor169.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c55b097b.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 20:18:20.428 ERROR [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - jdbcTemplate error: StatementCallback; bad SQL grammar [SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc]; nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "B.BASE_YM" not found; SQL statement:
CREATE FORCE VIEW (
    (SELECT
        "A"."BASE_YM",
        "A"."DANGER_LEVEL",
        "A"."DANGER_CNT",
        ROUND(("DANGER_CNT" / SUM("DANGER_CNT") OVER (PARTITION BY "BASE_YM")), 2) AS "RATE"
    FROM (
        SELECT
            "B"."BASE_YM",
            "B"."DANGER_LEVEL",
            SUM(CASE WHEN UNKNOWN THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT"
        FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO" "B"
        INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
            ON 1=1
        WHERE (("B"."COMPANY_NO" = '100')
            AND (("B"."BASE_YM" >= '2023-01')
            AND ("B"."BASE_YM" <= '2023-06')))
            AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
            AND ("C"."EMP_NM" = "B"."EMP_NM"))
        GROUP BY "B"."BASE_YM", "B"."DANGER_LEVEL"
    ) "A")
    UNION
    (SELECT
        "B"."BASE_YM",
        STRINGDECODE('\ud569\uacc4'),
        SUM(CASE WHEN ("C"."ROUTE_NM" = NULL) THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT",
        0
    FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO"
    INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
        ON 1=1
    WHERE (("B"."COMPANY_NO" = '100')
        AND (('2023-01' <= "B"."BASE_YM")
        AND ('2023-06' >= "B"."BASE_YM")))
        AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
        AND ("C"."EMP_NM" = "B"."EMP_NM"))
    GROUP BY "B"."BASE_YM")
) AS
(SELECT
    "A"."BASE_YM",
    "A"."DANGER_LEVEL",
    "A"."DANGER_CNT",
    ROUND(("DANGER_CNT" / SUM("DANGER_CNT") OVER (PARTITION BY "BASE_YM")), 2) AS "RATE"
FROM (
    SELECT
        "B"."BASE_YM",
        "B"."DANGER_LEVEL",
        SUM(CASE WHEN UNKNOWN THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT"
    FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO" "B"
    INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
        ON 1=1
    WHERE (("B"."COMPANY_NO" = '100')
        AND (("B"."BASE_YM" >= '2023-01')
        AND ("B"."BASE_YM" <= '2023-06')))
        AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
        AND ("C"."EMP_NM" = "B"."EMP_NM"))
    GROUP BY "B"."BASE_YM", "B"."DANGER_LEVEL"
) "A")
UNION
(SELECT
    "B"."BASE_YM",
    STRINGDECODE('\ud569\uacc4'),
    SUM(CASE WHEN ("C"."ROUTE_NM" = NULL) THEN 0 WHEN ("C"."ROUTE_NM" = DECODE('', '', "C"."ROUTE_NM", '')) THEN 1 ELSE 0 END) AS "DANGER_CNT",
    0
FROM "PUBLIC"."TBL_DANGER_DRIVING_INFO"
INNER JOIN "PUBLIC"."TBL_DRIVERINFO" "C"
    ON 1=1
WHERE (("B"."COMPANY_NO" = '100')
    AND (('2023-01' <= "B"."BASE_YM")
    AND ('2023-06' >= "B"."BASE_YM")))
    AND (("C"."COMPANY_NO" = "B"."COMPANY_NO")
    AND ("C"."EMP_NM" = "B"."EMP_NM"))
GROUP BY "B"."BASE_YM") [42122-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.expression.ExpressionColumn.getColumnException(ExpressionColumn.java:163)
	at org.h2.expression.ExpressionColumn.optimize(ExpressionColumn.java:145)
	at org.h2.command.dml.Select.prepare(Select.java:1206)
	at org.h2.command.dml.SelectUnion.prepare(SelectUnion.java:266)
	at org.h2.command.Parser.prepare(Parser.java:723)
	at org.h2.engine.Session.prepare(Session.java:622)
	at org.h2.table.TableView.compileViewQuery(TableView.java:116)
	at org.h2.table.TableView.initColumnsAndTables(TableView.java:168)
	at org.h2.table.TableView.init(TableView.java:109)
	at org.h2.table.TableView.<init>(TableView.java:71)
	at org.h2.table.TableView.createTempView(TableView.java:548)
	at org.h2.command.dml.Query.toTable(Query.java:928)
	at org.h2.command.Parser.readTableFilter(Parser.java:1895)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.parsePrepared(Parser.java:868)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:278)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)

2023-06-28 20:18:20.429 WARN  [http-nio-10010-exec-2] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [com.pjy.dashboard.core.error.exception.BusinessException: jdbcTemplate query error]
2023-06-28 20:18:20.440 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@63ffaaed
2023-06-28 20:18:20.440 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 20:18:20.440 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 20:18:20.491 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 50 msec}
2023-06-28 20:18:20.528 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 36 msec}
2023-06-28 20:18:20.731 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 20:18:20.731 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 20:18:20.737 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 20:18:20.738 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:18:20.739 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:18:24.094 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 20:18:24.095 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-28 20:18:26.531 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e1d18cff
2023-06-28 20:18:26.531 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 20:18:26.532 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 20:18:26.532 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 20:18:26.617 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 85 msec}
2023-06-28 20:18:26.618 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 20:18:26.649 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@83653cf3
2023-06-28 20:18:26.649 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 20:18:26.649 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 20:18:26.677 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 28 msec}
2023-06-28 20:18:26.709 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 32 msec}
2023-06-28 20:18:26.901 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 20:18:26.901 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 20:18:26.901 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 20:18:26.903 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:18:26.904 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 20:18:30.393 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 20:18:30.393 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-28 20:18:33.413 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7b3ea218
2023-06-28 20:18:33.413 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 20:18:33.413 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 20:18:33.414 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 20:18:33.887 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 472 msec}
2023-06-28 20:18:33.888 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 20:18:33.938 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1cd2520c
2023-06-28 20:18:33.938 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 20:18:33.938 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 20:18:34.089 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 151 msec}
2023-06-28 20:18:34.213 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 124 msec}
2023-06-28 20:18:34.580 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@120418a8
2023-06-28 20:18:34.580 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 20:18:34.580 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 20:18:34.583 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-28 20:18:34.584 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 20:18:41.622 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@888fb8a3
2023-06-28 20:18:41.622 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 20:18:41.622 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 20:18:41.623 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 20:18:42.058 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 435 msec}
2023-06-28 20:18:42.059 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 20:18:42.108 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2a236897
2023-06-28 20:18:42.108 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 20:18:42.108 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 20:18:42.137 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 28 msec}
2023-06-28 20:18:42.173 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '38번' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 36 msec}
2023-06-28 20:18:42.275 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e63e870e
2023-06-28 20:18:42.275 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 20:18:42.275 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-06-28 20:18:42.276 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:18:42.277 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:18:51.617 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bf317e3a
2023-06-28 20:18:51.617 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 20:18:51.617 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('21번','',c.ROUTE_NM ,'21번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('21번','',c.ROUTE_NM ,'21번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 20:18:51.618 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 20:18:52.132 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('21번','',c.ROUTE_NM ,'21번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('21번','',c.ROUTE_NM ,'21번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 514 msec}
2023-06-28 20:18:52.133 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 20:18:52.135 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('21번','',c.ROUTE_NM ,'21번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('21번','',c.ROUTE_NM ,'21번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 20:18:52.184 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@60c52e2e
2023-06-28 20:18:52.184 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 20:18:52.184 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '21번' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 20:18:52.218 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '21번' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 34 msec}
2023-06-28 20:18:52.256 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '21번' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 38 msec}
2023-06-28 20:18:52.367 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cdd8c0fb
2023-06-28 20:18:52.367 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 20:18:52.367 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 20:18:52.368 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:18:52.369 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 20:20:07.902 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5bd91012
2023-06-28 20:20:07.902 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 20:20:07.903 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 20:20:07.904 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 20:20:08.371 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 467 msec}
2023-06-28 20:20:08.372 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 20:20:08.433 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fd6cc006
2023-06-28 20:20:08.433 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 20:20:08.433 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 20:20:08.571 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 138 msec}
2023-06-28 20:20:08.708 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 137 msec}
2023-06-28 20:20:09.080 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@120418a8
2023-06-28 20:20:09.080 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 20:20:09.080 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 20:20:09.081 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 20:20:09.083 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-28 20:20:09.084 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:20:57.037 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 20:20:57.038 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-28 20:21:03.262 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@11fa0e28
2023-06-28 20:21:03.262 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 20:21:03.262 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('전체','',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('전체','',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 20:21:03.263 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
131. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 20:21:03.515 ERROR [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('전체','',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('전체','',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {FAILED after 251 msec}
org.h2.jdbc.JdbcSQLDataException: Division by zero: "0"; SQL statement:
SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('전체','',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('전체','',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc [22012-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:457)
	at org.h2.engine.SessionRemote.done(SessionRemote.java:611)
	at org.h2.command.CommandRemote.executeQuery(CommandRemote.java:178)
	at org.h2.jdbc.JdbcStatement.executeQuery(JdbcStatement.java:85)
	at net.sf.log4jdbc.sql.jdbcapi.StatementSpy.executeQuery(StatementSpy.java:731)
	at com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
	at com.zaxxer.hikari.pool.HikariProxyStatement.executeQuery(HikariProxyStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback.doInStatement(JdbcTemplate.java:439)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:376)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:452)
	at com.pjy.dashboard.dao.DynamicSqlDao.getHeaderBySql(DynamicSqlDao.java:209)
	at com.pjy.dashboard.dao.DynamicSqlDao$$FastClassBySpringCGLIB$$8af24191.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at com.pjy.dashboard.dao.DynamicSqlH2Dao$$EnhancerBySpringCGLIB$$ad390736.getHeaderBySql(<generated>)
	at com.pjy.dashboard.service.DynamicSqlService.getHeaderBySql(DynamicSqlService.java:69)
	at com.pjy.dashboard.service.DynamicSqlService.getSqlFilter(DynamicSqlService.java:129)
	at com.pjy.dashboard.controller.TestController.dynamicSqlFilter(TestController.java:207)
	at jdk.internal.reflect.GeneratedMethodAccessor169.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c55b097b.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 20:21:03.516 ERROR [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - jdbcTemplate error: StatementCallback; SQL [SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('전체','',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('전체','',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc]; Division by zero: "0"; SQL statement:
SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('전체','',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('전체','',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc [22012-200]; nested exception is org.h2.jdbc.JdbcSQLDataException: Division by zero: "0"; SQL statement:
SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('전체','',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('전체','',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc [22012-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:457)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.value.ValueDecimal.divide(ValueDecimal.java:97)
	at org.h2.expression.BinaryOperation.getValue(BinaryOperation.java:119)
	at org.h2.expression.function.Function.getValueWithArgs(Function.java:1266)
	at org.h2.expression.function.Function.getValue(Function.java:672)
	at org.h2.expression.Alias.getValue(Alias.java:37)
	at org.h2.command.dml.Select.constructGroupResultRow(Select.java:586)
	at org.h2.command.dml.Select.processGroupResult(Select.java:553)
	at org.h2.command.dml.Select.queryWindow(Select.java:455)
	at org.h2.command.dml.Select.queryWithoutCache(Select.java:833)
	at org.h2.command.dml.Query.queryWithoutCacheLazyCheck(Query.java:201)
	at org.h2.command.dml.Query.query(Query.java:489)
	at org.h2.command.dml.Query.query(Query.java:451)
	at org.h2.command.dml.SelectUnion.queryWithoutCache(SelectUnion.java:178)
	at org.h2.command.dml.Query.queryWithoutCacheLazyCheck(Query.java:201)
	at org.h2.command.dml.Query.query(Query.java:465)
	at org.h2.command.dml.Query.query(Query.java:451)
	at org.h2.index.ViewIndex.find(ViewIndex.java:288)
	at org.h2.index.ViewIndex.find(ViewIndex.java:160)
	at org.h2.index.BaseIndex.find(BaseIndex.java:148)
	at org.h2.index.IndexCursor.find(IndexCursor.java:163)
	at org.h2.table.TableFilter.next(TableFilter.java:498)
	at org.h2.command.dml.Select.gatherGroup(Select.java:520)
	at org.h2.command.dml.Select.queryGroup(Select.java:487)
	at org.h2.command.dml.Select.queryWithoutCache(Select.java:839)
	at org.h2.command.dml.Query.queryWithoutCacheLazyCheck(Query.java:201)
	at org.h2.command.dml.Query.query(Query.java:489)
	at org.h2.command.dml.Query.query(Query.java:451)
	at org.h2.command.CommandContainer.query(CommandContainer.java:285)
	at org.h2.command.Command.executeQuery(Command.java:195)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:343)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)

2023-06-28 20:21:03.517 WARN  [http-nio-10010-exec-10] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [com.pjy.dashboard.core.error.exception.BusinessException: jdbcTemplate query error]
2023-06-28 20:21:03.526 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b38dbe1c
2023-06-28 20:21:03.526 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 20:21:03.526 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '전체' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 20:21:03.532 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '전체' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 6 msec}
2023-06-28 20:21:03.537 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
131. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '전체' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 5 msec}
2023-06-28 20:22:05.990 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@11fa0e28
2023-06-28 20:22:05.991 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 20:22:05.997 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('전체','전체',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('전체','전체',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 20:22:05.998 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
134. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 20:22:06.509 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
134. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('전체','전체',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('전체','전체',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 511 msec}
2023-06-28 20:22:06.510 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
141. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 20:22:07.078 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('전체','전체',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('전체','전체',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 567 msec}
2023-06-28 20:22:07.135 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b38dbe1c
2023-06-28 20:22:07.135 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 20:22:07.135 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '전체' || '%' GROUP BY a.emp_nm ORDER BY 1
2023-06-28 20:22:07.135 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
141. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 20:22:07.142 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '전체' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 5 msec}
2023-06-28 20:22:07.148 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm like  '전체' || '%' GROUP BY a.emp_nm ORDER BY 1
 {executed in 6 msec}
2023-06-28 20:23:35.998 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@11fa0e28
2023-06-28 20:23:35.998 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 20:23:36.002 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('전체','전체',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('전체','전체',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 20:23:36.003 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
141. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 20:23:36.489 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('전체','전체',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('전체','전체',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 486 msec}
2023-06-28 20:23:36.491 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('전체','전체',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('전체','전체',c.ROUTE_NM ,'전체') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 2 msec}
2023-06-28 20:23:36.543 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b38dbe1c
2023-06-28 20:23:36.543 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 20:23:36.543 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('전체','전체',b.route_nm, '전체') GROUP BY a.emp_nm ORDER BY 1
2023-06-28 20:23:36.667 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('전체','전체',b.route_nm, '전체') GROUP BY a.emp_nm ORDER BY 1
 {executed in 124 msec}
2023-06-28 20:23:36.786 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('전체','전체',b.route_nm, '전체') GROUP BY a.emp_nm ORDER BY 1
 {executed in 119 msec}
2023-06-28 20:23:37.166 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a8bf84b8
2023-06-28 20:23:37.166 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 20:23:37.166 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 20:23:37.168 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:23:37.168 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 20:23:46.364 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@888fb8a3
2023-06-28 20:23:46.365 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 20:23:46.365 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','전체',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','전체',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 20:23:46.366 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
141. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 20:23:46.840 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','전체',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','전체',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 474 msec}
2023-06-28 20:23:46.841 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','전체',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','전체',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 20:23:46.890 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2a236897
2023-06-28 20:23:46.890 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 20:23:46.890 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','전체',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
2023-06-28 20:23:46.917 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','전체',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 27 msec}
2023-06-28 20:23:46.947 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','전체',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 30 msec}
2023-06-28 20:23:47.046 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e63e870e
2023-06-28 20:23:47.046 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 20:23:47.046 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-06-28 20:23:47.048 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:23:47.049 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 20:23:52.730 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cea52388
2023-06-28 20:23:52.730 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 20:23:52.730 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('5번','전체',c.ROUTE_NM ,'5번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('5번','전체',c.ROUTE_NM ,'5번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 20:23:52.731 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
141. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 20:23:53.133 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('5번','전체',c.ROUTE_NM ,'5번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('5번','전체',c.ROUTE_NM ,'5번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 402 msec}
2023-06-28 20:23:53.135 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('5번','전체',c.ROUTE_NM ,'5번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('5번','전체',c.ROUTE_NM ,'5번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 2 msec}
2023-06-28 20:23:53.179 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7038d37c
2023-06-28 20:23:53.179 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 20:23:53.179 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('5번','전체',b.route_nm, '5번') GROUP BY a.emp_nm ORDER BY 1
2023-06-28 20:23:53.205 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('5번','전체',b.route_nm, '5번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 25 msec}
2023-06-28 20:23:53.231 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('5번','전체',b.route_nm, '5번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 26 msec}
2023-06-28 20:23:53.329 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@63e40692
2023-06-28 20:23:53.329 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 20:23:53.329 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '김권호' ORDER BY b.base_ym desc
2023-06-28 20:23:53.331 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '김권호' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-28 20:23:53.332 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '김권호' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:24:25.989 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
141. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 20:24:25.990 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-28 20:24:29.242 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7b3ea218
2023-06-28 20:24:29.243 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 20:24:29.246 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 20:24:29.246 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
141. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 20:24:29.673 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 426 msec}
2023-06-28 20:24:29.674 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 20:24:29.721 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1cd2520c
2023-06-28 20:24:29.721 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 20:24:29.721 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
2023-06-28 20:24:29.848 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 127 msec}
2023-06-28 20:24:29.993 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 145 msec}
2023-06-28 20:24:30.363 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@120418a8
2023-06-28 20:24:30.363 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 20:24:30.363 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 20:24:30.364 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
141. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 20:24:30.365 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 20:24:30.367 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
141. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 21:34:56.487 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=1h10m16s764ms23µs200ns).
2023-06-28 21:35:23.575 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-28 21:35:23.575 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-28 21:35:23.575 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-28 21:35:23.575 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-28 21:35:42.282 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-28 21:35:42.282 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-28 21:35:42.282 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-06-28 21:35:42.282 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-28 21:35:42.282 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-06-28 21:35:42.295 ERROR [http-nio-10010-exec-5] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c55b097b.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 21:35:42.301 ERROR [http-nio-10010-exec-5] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c55b097b.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 21:35:42.306 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-28 21:35:42.306 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-28 21:35:42.306 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-28 21:35:42.306 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-28 21:35:42.306 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-28 21:35:42.333 ERROR [http-nio-10010-exec-5] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c55b097b.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 21:35:42.338 ERROR [http-nio-10010-exec-5] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c55b097b.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 21:35:42.340 ERROR [http-nio-10010-exec-5] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c55b097b.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 97 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 100 common frames omitted
2023-06-28 21:35:42.397 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-28 21:35:42.397 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-28 21:35:42.397 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-28 21:35:42.397 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-28 21:35:42.397 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-28 21:35:43.705 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 21:35:43.707 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
152. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-06-28 21:35:43.712 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-28 21:35:43.949 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$XCxJt8XYYvHsCf6fPOvXZuur8kFXgysoe5e4zgfcjFsSWU.8DgEUu
2023-06-28 21:35:44.199 INFO  [http-nio-10010-exec-6] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-28 21:35:46.109 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 21:35:46.111 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-28 21:35:51.026 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e1d18cff
2023-06-28 21:35:51.026 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 21:35:51.027 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 21:35:51.029 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 21:35:51.417 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 386 msec}
2023-06-28 21:35:51.420 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 2 msec}
2023-06-28 21:35:51.513 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@83653cf3
2023-06-28 21:35:51.514 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 21:35:51.514 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
2023-06-28 21:35:51.610 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 96 msec}
2023-06-28 21:35:51.734 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 123 msec}
2023-06-28 21:35:52.907 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 21:35:52.907 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 21:35:52.908 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 21:35:52.910 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 21:35:52.913 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-28 21:35:52.915 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 21:35:57.978 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ef22a38a
2023-06-28 21:35:57.978 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 21:35:57.978 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 21:35:57.979 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 21:35:58.173 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 194 msec}
2023-06-28 21:35:58.175 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 21:35:58.228 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@90b6537e
2023-06-28 21:35:58.228 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 21:35:58.228 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
2023-06-28 21:35:58.245 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 16 msec}
2023-06-28 21:35:58.267 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 21 msec}
2023-06-28 21:35:58.408 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd171f5
2023-06-28 21:35:58.408 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 21:35:58.408 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-06-28 21:35:58.410 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 21:35:58.411 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 21:36:02.981 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7ebea6de
2023-06-28 21:36:02.981 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 21:36:02.981 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '김경연' ORDER BY b.base_ym desc
2023-06-28 21:36:02.982 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 21:36:02.984 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '김경연' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 21:36:02.985 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '김경연' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 21:36:04.350 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f2083c2a
2023-06-28 21:36:04.350 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 21:36:04.350 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '김승배' ORDER BY b.base_ym desc
2023-06-28 21:36:04.351 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 21:36:04.353 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '김승배' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-28 21:36:04.354 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '김승배' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 21:36:34.589 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4802ba11
2023-06-28 21:36:34.589 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 21:36:34.589 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 21:36:34.590 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 21:36:34.692 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 101 msec}
2023-06-28 21:36:34.693 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 0 msec}
2023-06-28 21:36:34.721 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e9966a05
2023-06-28 21:36:34.721 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 21:36:34.721 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('20번','',b.route_nm, '20번') GROUP BY a.emp_nm ORDER BY 1
2023-06-28 21:36:34.729 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('20번','',b.route_nm, '20번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 8 msec}
2023-06-28 21:36:34.738 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('20번','',b.route_nm, '20번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 8 msec}
2023-06-28 21:36:34.808 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9ac79666
2023-06-28 21:36:34.808 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 21:36:34.808 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
2023-06-28 21:36:34.810 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 21:36:34.810 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 22:22:35.191 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:22:35.191 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-28 22:22:40.917 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e1d18cff
2023-06-28 22:22:40.917 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 22:22:40.917 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 22:22:40.918 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:22:41.026 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 108 msec}
2023-06-28 22:22:41.027 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 22:22:41.062 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@83653cf3
2023-06-28 22:22:41.062 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 22:22:41.062 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
2023-06-28 22:22:41.088 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 26 msec}
2023-06-28 22:22:41.113 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 25 msec}
2023-06-28 22:22:41.316 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 22:22:41.316 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 22:22:41.316 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 22:22:41.317 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 22:22:41.318 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 22:22:44.030 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ef22a38a
2023-06-28 22:22:44.030 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 22:22:44.030 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 22:22:44.030 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:22:44.128 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 97 msec}
2023-06-28 22:22:44.129 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 0 msec}
2023-06-28 22:22:44.157 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@90b6537e
2023-06-28 22:22:44.157 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 22:22:44.157 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
2023-06-28 22:22:44.165 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 8 msec}
2023-06-28 22:22:44.175 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 10 msec}
2023-06-28 22:22:44.233 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd171f5
2023-06-28 22:22:44.233 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 22:22:44.233 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-06-28 22:22:44.235 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 22:22:44.236 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 22:22:46.501 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a2cbefdc
2023-06-28 22:22:46.501 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 22:22:46.502 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 22:22:46.503 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:22:46.585 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 82 msec}
2023-06-28 22:22:46.586 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 22:22:46.617 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@445f9fd0
2023-06-28 22:22:46.618 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 22:22:46.618 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('20번','',b.route_nm, '20번') GROUP BY a.emp_nm ORDER BY 1
2023-06-28 22:22:46.633 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('20번','',b.route_nm, '20번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 15 msec}
2023-06-28 22:22:46.645 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('20번','',b.route_nm, '20번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 11 msec}
2023-06-28 22:22:46.698 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9ac79666
2023-06-28 22:22:46.698 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 22:22:46.698 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
2023-06-28 22:22:46.699 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 22:22:46.700 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 22:22:49.896 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@abc05ec2
2023-06-28 22:22:49.896 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 22:22:49.896 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 22:22:49.897 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:22:49.979 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 82 msec}
2023-06-28 22:22:49.980 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 22:22:50.009 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4d540eb6
2023-06-28 22:22:50.009 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 22:22:50.010 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
2023-06-28 22:22:50.038 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 28 msec}
2023-06-28 22:22:50.064 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 25 msec}
2023-06-28 22:22:50.266 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 22:22:50.266 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 22:22:50.266 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 22:22:50.268 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 22:22:50.268 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 22:22:52.997 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ef22a38a
2023-06-28 22:22:52.997 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 22:22:52.997 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 22:22:52.998 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:22:53.088 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 89 msec}
2023-06-28 22:22:53.089 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 22:22:53.119 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@90b6537e
2023-06-28 22:22:53.119 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 22:22:53.119 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
2023-06-28 22:22:53.129 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 10 msec}
2023-06-28 22:22:53.137 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 8 msec}
2023-06-28 22:22:53.192 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd171f5
2023-06-28 22:22:53.192 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 22:22:53.192 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-06-28 22:22:53.193 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 22:22:53.194 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 22:22:56.747 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a2cbefdc
2023-06-28 22:22:56.748 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 22:22:56.748 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 22:22:56.749 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:22:56.857 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 108 msec}
2023-06-28 22:22:56.858 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('20번','',c.ROUTE_NM ,'20번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-06-28 22:22:56.886 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@445f9fd0
2023-06-28 22:22:56.886 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 22:22:56.886 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('20번','',b.route_nm, '20번') GROUP BY a.emp_nm ORDER BY 1
2023-06-28 22:22:56.894 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('20번','',b.route_nm, '20번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 7 msec}
2023-06-28 22:22:56.902 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('20번','',b.route_nm, '20번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 8 msec}
2023-06-28 22:22:56.958 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9ac79666
2023-06-28 22:22:56.958 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 22:22:56.958 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
2023-06-28 22:22:56.959 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 22:22:56.960 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 22:22:58.909 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@abc05ec2
2023-06-28 22:22:58.909 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-06-28 22:22:58.909 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-06-28 22:22:58.910 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:22:58.999 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 88 msec}
2023-06-28 22:22:59.000 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 0 msec}
2023-06-28 22:22:59.028 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4d540eb6
2023-06-28 22:22:59.028 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-06-28 22:22:59.028 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
2023-06-28 22:22:59.055 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 27 msec}
2023-06-28 22:22:59.083 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-06' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 27 msec}
2023-06-28 22:22:59.271 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7897038f
2023-06-28 22:22:59.271 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-06-28 22:22:59.271 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-28 22:22:59.272 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-28 22:22:59.273 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-06' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-28 22:25:40.756 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6eb507c9
2023-06-28 22:25:40.756 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_DANGER_DRIVING_INFO} 
2023-06-28 22:25:40.756 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBL_DANGER_DRIVING_INFO a where   a.company_no = '100' AND     a.BASE_YM   = '2023-03' order by a.emp_nm
2023-06-28 22:25:40.757 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:25:40.759 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. select   ROWNUM AS no,a.* from    TBL_DANGER_DRIVING_INFO a where   a.company_no = '100' AND     a.BASE_YM   = '2023-03' order by a.emp_nm
 {executed in 2 msec}
2023-06-28 22:25:40.762 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
172. select   ROWNUM AS no,a.* from    TBL_DANGER_DRIVING_INFO a where   a.company_no = '100' AND     a.BASE_YM   = '2023-03' order by a.emp_nm
 {executed in 2 msec}
2023-06-28 22:28:13.673 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 22:28:13.674 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:28:13.676 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 22:28:15.546 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 22:28:15.547 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:28:15.549 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:28:42.408 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2ea61a6
2023-06-28 22:28:42.409 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:28:42.410 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 22:28:42.438 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 22:28:42.439 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 22:28:43.613 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 22:28:43.613 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:28:43.614 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:28:44.272 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ad215c28
2023-06-28 22:28:44.273 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:28:44.275 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 22:28:44.298 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 22:28:44.300 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:29:03.348 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 22:29:03.349 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:29:03.351 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 22:29:03.378 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 22:29:03.379 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:29:33.722 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@530c689c
2023-06-28 22:29:33.723 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:29:33.724 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 22:29:33.747 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e10d14d1
2023-06-28 22:29:33.749 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 22:29:35.169 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e10d14d1
2023-06-28 22:29:35.170 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:29:35.171 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 22:29:36.243 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2ea61a6
2023-06-28 22:29:36.244 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:29:36.245 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 22:29:36.268 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 22:29:36.269 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:29:39.715 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 22:29:39.716 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:29:39.717 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 22:29:49.044 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56df25c1
2023-06-28 22:29:49.045 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:29:49.046 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 22:29:50.250 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 22:29:50.251 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:29:50.252 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:29:51.747 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 22:29:51.748 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:29:51.749 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 22:30:01.222 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56df25c1
2023-06-28 22:30:01.223 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:30:01.224 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 22:30:02.958 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 22:30:02.960 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-06-28 22:30:02.961 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 22:30:03.548 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 22:30:03.549 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:30:03.550 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:30:05.411 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 22:30:05.412 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:30:05.413 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 22:30:05.435 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 22:30:05.437 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:30:06.443 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8446f234
2023-06-28 22:30:06.444 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:30:06.445 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 22:30:06.567 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16e3334e
2023-06-28 22:30:06.569 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:30:18.452 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@24c090dc
2023-06-28 22:30:18.453 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:30:18.454 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 22:30:18.477 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b67f72
2023-06-28 22:30:18.479 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:30:19.665 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56ddf49d
2023-06-28 22:30:19.665 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:30:19.667 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 22:30:19.693 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56df25c1
2023-06-28 22:30:19.694 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:30:20.899 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e0e3806e
2023-06-28 22:30:20.900 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:30:20.902 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 22:30:21.004 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d32e74ea
2023-06-28 22:30:21.005 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 22:30:22.246 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b9462b6
2023-06-28 22:30:22.247 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:30:22.249 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-02' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 22:30:22.324 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bbe68c33
2023-06-28 22:30:22.326 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-02','',a.base_ymd,  '2023-06-02')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:30:23.604 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@82dc4b6d
2023-06-28 22:30:23.605 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:30:23.606 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 22:30:23.703 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d32e74ea
2023-06-28 22:30:23.704 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:31:07.440 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 22:31:07.441 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:31:07.449 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 22:31:09.163 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@62350d5a
2023-06-28 22:31:09.164 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:31:09.165 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 22:31:09.194 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 22:31:09.195 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:31:10.178 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aca6fa1b
2023-06-28 22:31:10.179 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:31:10.181 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'20번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 22:31:10.204 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aca82b3f
2023-06-28 22:31:10.205 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 22:31:11.261 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@36ac85ec
2023-06-28 22:31:11.262 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:31:11.263 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 22:31:11.339 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@28f77a68
2023-06-28 22:31:11.340 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:31:13.187 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c15d6834
2023-06-28 22:31:13.188 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:31:13.189 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-02' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 22:31:13.267 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@11af91b1
2023-06-28 22:31:13.268 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-02','',a.base_ymd,  '2023-06-02')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:31:54.120 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d8a550eb
2023-06-28 22:31:54.121 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:31:54.122 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 22:31:54.241 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@28f77a68
2023-06-28 22:31:54.243 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 22:31:54.278 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@96ffb8af
2023-06-28 22:31:54.279 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:31:55.365 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aca82b3f
2023-06-28 22:31:55.366 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:31:55.367 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 22:32:00.007 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 22:32:00.008 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:32:00.009 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:32:02.204 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 22:32:02.205 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:32:02.206 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 22:32:02.995 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 22:32:02.996 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:32:02.998 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 22:33:07.710 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e10d14d1
2023-06-28 22:33:07.711 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
172. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:33:07.713 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
172. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 22:34:39.558 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a599a38c
2023-06-28 22:34:39.559 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
182. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:34:39.561 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
182. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 22:34:53.246 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 22:34:53.247 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
182. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:34:53.248 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
182. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:34:57.342 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2ea61a6
2023-06-28 22:34:57.343 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
182. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:34:57.344 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
182. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 22:34:57.368 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 22:34:57.369 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
182. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:34:58.855 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aca6fa1b
2023-06-28 22:34:58.856 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
182. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:34:58.858 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
182. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'20번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 22:34:58.883 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aca82b3f
2023-06-28 22:34:58.885 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
182. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 22:35:00.161 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@36ac85ec
2023-06-28 22:35:00.162 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
182. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:35:00.163 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
182. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 22:35:00.267 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@28f77a68
2023-06-28 22:35:00.269 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
182. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 22:35:05.649 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c15d6834
2023-06-28 22:35:05.650 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
182. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:35:05.652 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
182. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-02' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 22:35:05.722 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@11af91b1
2023-06-28 22:35:05.723 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
182. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-02','',a.base_ymd,  '2023-06-02')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 22:36:17.267 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 22:36:17.268 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
182. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:36:17.270 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
182. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:36:46.667 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 22:36:46.669 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
182. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:36:46.670 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
182. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:36:48.112 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bf08db2d
2023-06-28 22:36:48.113 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
182. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:36:48.114 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
182. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5-1번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 22:36:48.138 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@abf6fc5
2023-06-28 22:36:48.139 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
182. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:36:49.270 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c8742704
2023-06-28 22:36:49.271 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
182. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:36:49.272 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
182. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'5-1번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 22:36:49.296 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c8755828
2023-06-28 22:36:49.297 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
182. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 22:36:51.503 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@abf6fc5
2023-06-28 22:36:51.504 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
182. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:36:51.506 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
182. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5-1번','-전체-',a.ROUTE_NM,'5-1번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:43:42.024 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 24956 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-28 22:43:42.030 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-28 22:43:42.085 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-28 22:43:42.085 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-28 22:43:43.438 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-28 22:43:43.438 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-28 22:43:43.580 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 132ms. Found 3 JPA repository interfaces.
2023-06-28 22:43:43.922 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-28 22:43:43.922 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-28 22:43:43.973 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 22:43:43.974 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 22:43:43.976 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 22:43:43.976 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 54ms. Found 0 JDBC repository interfaces.
2023-06-28 22:43:44.458 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-28 22:43:44.530 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-28 22:43:44.530 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-28 22:43:44.530 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-28 22:43:44.530 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-28 22:43:44.530 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 22:43:44.531 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-28 22:43:44.531 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-28 22:43:44.531 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 22:43:44.531 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 22:43:44.531 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 22:43:44.531 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-28 22:43:44.531 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 22:43:44.591 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$96d6d766] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 22:43:44.644 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-28 22:43:44.731 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$80cd3b93] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 22:43:44.815 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 22:43:44.819 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@11675e75' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 22:43:44.824 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$a5a1de45] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 22:43:44.835 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$caf6f65b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 22:43:44.839 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 22:43:44.840 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 22:43:44.860 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$e81f7359] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 22:43:44.890 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$679fc08b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 22:43:45.024 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-28 22:43:45.030 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-28 22:43:45.461 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-28 22:43:45.477 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-28 22:43:45.488 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-28 22:43:45.488 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-28 22:43:45.855 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-28 22:43:45.866 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-28 22:43:45.866 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3780 ms
2023-06-28 22:43:46.699 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@50a4a98b with name: jasyptStringEncryptor
2023-06-28 22:43:46.750 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-28 22:43:46.831 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-06-28 22:43:46.836 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-28 22:43:47.601 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-28 22:43:47.939 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-28 22:43:48.016 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-28 22:43:48.018 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-28 22:43:48.176 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-28 22:43:48.403 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:43:48.420 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-28 22:43:49.113 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:43:49.116 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-28 22:43:49.164 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-28 22:43:49.408 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-28 22:43:50.449 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-28 22:43:50.460 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-28 22:43:50.642 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-28 22:43:50.642 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-28 22:43:50.642 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-28 22:43:50.643 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-28 22:43:50.643 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-28 22:43:50.643 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-28 22:43:50.643 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-28 22:43:50.643 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-28 22:43:50.643 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-28 22:43:50.799 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1dce4e0f, org.springframework.security.web.context.SecurityContextPersistenceFilter@69a8745a, org.springframework.security.web.header.HeaderWriterFilter@3ad1ca64, org.springframework.web.filter.CorsFilter@2c9c9c8b, org.springframework.security.web.authentication.logout.LogoutFilter@15926431, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@6f9c4519, org.springframework.security.web.session.ConcurrentSessionFilter@e2c6189, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@22f140c3, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@659225af, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@377cbee8, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7ea7bc97, org.springframework.security.web.session.SessionManagementFilter@7646668c, org.springframework.security.web.access.ExceptionTranslationFilter@5d5f8865, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@ebcbcd0]
2023-06-28 22:43:50.820 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-28 22:43:51.181 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-28 22:43:51.256 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-28 22:43:51.664 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:43:52.457 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-28 22:43:52.484 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-28 22:43:52.632 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-28 22:43:52.635 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-28 22:43:52.693 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-28 22:43:52.698 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.12 seconds (JVM running for 12.446)
2023-06-28 22:43:52.698 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-28 22:43:52.698 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-28 22:43:52.698 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-28 22:43:53.931 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-28 22:43:53.931 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-28 22:43:53.952 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 21 ms
2023-06-28 22:43:58.761 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-28 22:43:58.761 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-28 22:43:58.761 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-06-28 22:43:58.761 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-28 22:43:58.761 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-06-28 22:43:59.501 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$cce55654.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 22:43:59.510 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$cce55654.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 22:43:59.518 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-28 22:43:59.518 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-28 22:43:59.518 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-28 22:43:59.518 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-28 22:43:59.518 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-28 22:43:59.668 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$cce55654.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 22:43:59.669 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$cce55654.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-28 22:43:59.671 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$cce55654.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 98 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 101 common frames omitted
2023-06-28 22:43:59.998 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-28 22:43:59.998 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-28 22:43:59.998 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-28 22:43:59.998 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-28 22:43:59.998 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-28 22:44:01.328 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:44:01.334 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-06-28 22:44:01.356 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-28 22:44:01.445 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$XBy1KOW3z2izdFfNedpRYeqNXgBDZRXYXk4nQU4G48MQz8fGdv/Q6
2023-06-28 22:44:01.537 INFO  [http-nio-10010-exec-2] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-28 22:44:14.703 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 22:44:14.776 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:44:14.780 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 22:44:17.191 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 22:44:17.193 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:44:17.195 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:44:46.908 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 22:44:46.909 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:44:46.912 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 2 msec}
2023-06-28 22:44:51.126 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 22:44:51.127 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:44:51.129 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 22:44:52.056 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a288ff21
2023-06-28 22:44:52.058 ERROR [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - jdbcTemplate error: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'from' in 'class com.pjy.dashboard.domain.CommonCodeVo'
2023-06-28 22:44:52.067 WARN  [http-nio-10010-exec-8] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [com.pjy.dashboard.core.error.exception.BusinessException: jdbcTemplate query error]
2023-06-28 22:45:27.712 INFO  [RMI TCP Connection(14)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-06-28 22:45:27.743 INFO  [RMI TCP Connection(14)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-06-28 22:45:27.744 INFO  [RMI TCP Connection(14)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-06-28 22:45:27.752 INFO  [RMI TCP Connection(14)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-06-28 22:45:27.779 INFO  [RMI TCP Connection(14)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-06-28 22:45:31.560 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 25768 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-28 22:45:31.565 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-28 22:45:31.619 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-28 22:45:31.620 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-28 22:45:32.819 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-28 22:45:32.820 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-28 22:45:32.968 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 138ms. Found 3 JPA repository interfaces.
2023-06-28 22:45:33.326 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-28 22:45:33.327 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-28 22:45:33.371 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 22:45:33.372 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 22:45:33.372 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-28 22:45:33.373 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 46ms. Found 0 JDBC repository interfaces.
2023-06-28 22:45:33.807 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-28 22:45:33.873 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-28 22:45:33.874 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-28 22:45:33.874 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-28 22:45:33.874 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-28 22:45:33.874 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 22:45:33.875 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-28 22:45:33.875 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-28 22:45:33.875 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 22:45:33.875 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 22:45:33.876 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 22:45:33.876 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-28 22:45:33.876 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-28 22:45:33.936 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$32ee9e37] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 22:45:33.989 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-28 22:45:34.075 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$1ce50264] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 22:45:34.157 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 22:45:34.158 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@6033491e' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 22:45:34.164 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$41b9a516] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 22:45:34.179 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$670ebd2c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 22:45:34.184 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 22:45:34.185 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 22:45:34.210 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$84373a2a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 22:45:34.240 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$3b7875c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-28 22:45:34.388 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-28 22:45:34.394 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-28 22:45:34.822 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-28 22:45:34.845 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-28 22:45:34.857 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-28 22:45:34.857 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-28 22:45:35.230 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-28 22:45:35.242 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-28 22:45:35.242 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3622 ms
2023-06-28 22:45:36.080 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@72a54c0 with name: jasyptStringEncryptor
2023-06-28 22:45:36.142 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-28 22:45:36.229 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-06-28 22:45:36.234 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-28 22:45:37.023 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-28 22:45:37.364 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-28 22:45:37.446 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-28 22:45:37.448 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-28 22:45:37.613 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-28 22:45:37.845 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-06-28 22:45:37.862 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-28 22:45:38.598 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:45:38.601 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-28 22:45:38.651 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-28 22:45:38.908 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-28 22:45:39.979 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-28 22:45:39.990 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-28 22:45:40.175 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-28 22:45:40.175 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-28 22:45:40.176 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-28 22:45:40.176 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-28 22:45:40.176 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-28 22:45:40.176 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-28 22:45:40.176 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-28 22:45:40.176 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-28 22:45:40.176 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-28 22:45:40.346 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@61f6e896, org.springframework.security.web.context.SecurityContextPersistenceFilter@75125759, org.springframework.security.web.header.HeaderWriterFilter@6e5b5e2d, org.springframework.web.filter.CorsFilter@7af333ff, org.springframework.security.web.authentication.logout.LogoutFilter@79243af8, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@5ed191ec, org.springframework.security.web.session.ConcurrentSessionFilter@5922a0f1, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@5e80e7d3, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@297944fe, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2b55306, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@62981628, org.springframework.security.web.session.SessionManagementFilter@377cbee8, org.springframework.security.web.access.ExceptionTranslationFilter@60d4e814, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6a478cbe]
2023-06-28 22:45:40.367 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-28 22:45:40.718 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-28 22:45:40.792 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-28 22:45:41.239 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:45:42.066 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-28 22:45:42.097 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-28 22:45:42.244 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-28 22:45:42.247 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-28 22:45:42.304 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-28 22:45:42.308 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.206 seconds (JVM running for 12.543)
2023-06-28 22:45:42.309 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-28 22:45:42.309 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-28 22:45:42.309 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-28 22:45:43.213 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-28 22:45:43.213 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-28 22:45:43.233 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 20 ms
2023-06-28 22:45:51.383 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 22:45:51.449 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:45:51.457 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 22:45:52.598 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 22:45:52.601 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:45:52.604 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:45:53.792 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a288ff21
2023-06-28 22:45:53.793 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:45:53.795 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-04-01' AND '2023-06-28'
	AND 	a.EMP_NM = '장남균'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 22:45:56.770 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2d9e523f
2023-06-28 22:45:56.771 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:45:56.773 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-04-01' AND '2023-06-28'
	AND 	a.EMP_NM = '김형규'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 22:47:14.760 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@66e742f7
2023-06-28 22:47:14.762 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:47:14.764 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 22:47:15.947 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1b30ae5f
2023-06-28 22:47:15.948 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:47:15.950 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'21번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 22:47:15.975 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@66e742f7
2023-06-28 22:47:15.976 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 22:47:17.152 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c4ee77f8
2023-06-28 22:47:17.153 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:47:17.155 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 22:47:19.231 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c4ed46d4
2023-06-28 22:47:19.232 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:47:19.233 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'21번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 22:47:19.259 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c4ee77f8
2023-06-28 22:47:19.261 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:47:20.169 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ef2d2a5
2023-06-28 22:47:20.170 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:47:20.172 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 22:47:20.229 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@413dc721
2023-06-28 22:47:20.231 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:47:52.605 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7756fabc
2023-06-28 22:47:52.605 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-28 22:47:52.643 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-28 22:47:52.654 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-06-28 22:47:52.666 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 12 msec}
2023-06-28 22:47:52.683 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 13 msec}
2023-06-28 22:47:54.046 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3afba261
2023-06-28 22:47:54.046 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 22:47:54.046 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 22:47:54.047 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:47:54.048 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 22:47:54.049 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 22:47:54.062 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6de4b249
2023-06-28 22:47:54.062 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-06-28 22:47:54.062 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
2023-06-28 22:47:54.064 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
 {executed in 1 msec}
2023-06-28 22:47:54.065 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
 {executed in 1 msec}
2023-06-28 22:48:26.819 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7756fabc
2023-06-28 22:48:26.819 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-28 22:48:26.820 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-28 22:48:26.821 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:48:26.832 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 10 msec}
2023-06-28 22:48:26.841 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 8 msec}
2023-06-28 22:48:27.936 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3afba261
2023-06-28 22:48:27.936 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 22:48:27.936 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 22:48:27.937 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:48:27.938 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 22:48:27.939 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 22:48:27.952 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6de4b249
2023-06-28 22:48:27.952 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-06-28 22:48:27.952 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
2023-06-28 22:48:27.953 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
 {executed in 0 msec}
2023-06-28 22:48:27.955 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
 {executed in 2 msec}
2023-06-28 22:57:29.685 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7756fabc
2023-06-28 22:57:29.685 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-28 22:57:29.686 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-28 22:57:29.688 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:57:29.700 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 12 msec}
2023-06-28 22:57:29.715 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 14 msec}
2023-06-28 22:57:31.018 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3afba261
2023-06-28 22:57:31.018 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-28 22:57:31.018 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
2023-06-28 22:57:31.019 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:57:31.020 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 22:57:31.021 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.CODE =  '배차정시성대상회차'
 {executed in 1 msec}
2023-06-28 22:57:31.034 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6de4b249
2023-06-28 22:57:31.034 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE} 
2023-06-28 22:57:31.035 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
2023-06-28 22:57:31.037 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
 {executed in 1 msec}
2023-06-28 22:57:31.039 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   1 as seq,1 as temp,a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.ROUTE_NM   = '20번' AND		a.BASE_YMD   = '2023-06-02' order by a.col002
 {executed in 1 msec}
2023-06-28 22:58:51.185 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 22:58:51.186 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 22:58:51.189 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 2 msec}
2023-06-28 22:58:53.279 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 22:58:53.280 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:58:53.282 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 22:59:07.682 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2d9e523f
2023-06-28 22:59:07.684 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 22:59:07.685 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-04-01' AND '2023-06-28'
	AND 	a.EMP_NM = '김형규'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 23:02:02.043 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 23:02:02.045 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 23:02:02.046 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 23:02:12.518 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 23:02:12.520 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 23:02:12.522 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 23:07:14.342 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 23:07:14.343 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 23:07:14.345 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 23:07:16.559 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 23:07:16.561 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 23:07:16.564 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 23:08:08.891 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 23:08:08.892 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 23:08:08.894 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 23:08:11.773 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 23:08:11.774 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 23:08:11.776 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 23:08:16.379 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2ea61a6
2023-06-28 23:08:16.381 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 23:08:16.382 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 23:08:16.407 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ea0f63e
2023-06-28 23:08:16.408 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 23:08:19.280 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aca6fa1b
2023-06-28 23:08:19.281 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 23:08:19.282 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'20번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 23:08:19.308 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aca82b3f
2023-06-28 23:08:19.310 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 23:10:29.698 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 23:10:29.698 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 23:10:29.699 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 23:10:33.534 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 23:10:33.536 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 23:10:33.537 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 23:10:33.565 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 23:10:33.568 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 23:10:36.974 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 23:10:36.977 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 23:10:36.978 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 23:10:37.004 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 23:10:37.006 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 23:11:11.935 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 23:11:11.936 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 23:11:11.938 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 23:11:13.336 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 23:11:13.337 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 23:11:13.338 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 23:11:13.365 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 23:11:13.369 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-06-28 23:11:15.179 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 23:11:15.180 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 23:11:15.182 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 23:11:15.205 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 23:11:15.207 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 23:11:18.725 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 23:11:18.726 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 23:11:18.728 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 23:11:20.203 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ad215c28
2023-06-28 23:11:20.204 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 23:11:20.205 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 23:11:20.230 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 23:11:20.234 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 3 msec}
2023-06-28 23:12:06.442 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 23:12:06.444 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 23:12:06.445 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 23:12:09.635 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 23:12:09.636 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 23:12:09.637 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 23:12:09.662 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 23:12:09.664 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 23:12:12.468 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 23:12:12.469 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 23:12:12.470 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 23:12:12.493 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 23:12:12.495 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 23:12:28.196 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 23:12:28.197 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 23:12:28.199 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 23:13:09.325 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 23:13:09.326 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 23:13:09.329 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 23:13:11.672 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 23:13:11.673 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 23:13:11.674 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 23:13:11.702 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 23:13:11.704 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 23:13:14.054 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68ca7ff
2023-06-28 23:13:14.055 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 23:13:14.057 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 23:13:14.080 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b68dd923
2023-06-28 23:13:14.082 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 23:13:17.803 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 23:13:17.804 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 23:13:17.806 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-06-28 23:13:32.962 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a1df428
2023-06-28 23:13:32.963 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 23:13:32.965 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-06-28 23:13:35.181 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c6c07dc
2023-06-28 23:13:35.182 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-28 23:13:35.183 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-06-28 23:13:35.212 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d7f0c0
2023-06-28 23:13:35.214 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-06-28' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-06-28 23:13:44.235 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a5fea912
2023-06-28 23:13:44.236 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 23:13:44.237 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-04-01' AND '2023-06-28'
	AND 	a.EMP_NM = '최병국'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 1 msec}
2023-06-28 23:13:51.641 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2d9e523f
2023-06-28 23:13:51.642 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-28 23:13:51.644 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-04-01' AND '2023-06-28'
	AND 	a.EMP_NM = '김형규'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 0 msec}
2023-06-28 23:21:04.342 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=57s426ms818µs600ns).
