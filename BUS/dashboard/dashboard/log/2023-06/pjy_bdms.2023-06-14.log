2023-06-14 00:10:04.761 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 22808 (E:\bus\dashboard\dashboard\target\classes started by admin in E:\bus\dashboard\dashboard)
2023-06-14 00:10:04.899 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-14 00:10:04.962 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-14 00:10:04.962 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-14 00:10:06.426 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-14 00:10:06.426 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-14 00:10:06.582 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 146ms. Found 3 JPA repository interfaces.
2023-06-14 00:10:06.935 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-14 00:10:06.935 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-14 00:10:07.149 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 00:10:07.149 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 00:10:07.150 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 00:10:07.150 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 215ms. Found 0 JDBC repository interfaces.
2023-06-14 00:10:07.593 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-14 00:10:07.656 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-14 00:10:07.657 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-14 00:10:07.657 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-14 00:10:07.657 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-14 00:10:07.657 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 00:10:07.657 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-14 00:10:07.657 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-14 00:10:07.657 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 00:10:07.658 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 00:10:07.658 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 00:10:07.658 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-14 00:10:07.658 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 00:10:07.880 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$2079508b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 00:10:07.932 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-14 00:10:08.019 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$a6fb4b8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 00:10:08.095 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 00:10:08.098 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@37d01ab' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 00:10:08.103 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$2f44576a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 00:10:08.113 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$54996f80] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 00:10:08.116 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 00:10:08.118 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 00:10:08.136 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$71c1ec7e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 00:10:08.162 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$f14239b0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 00:10:08.269 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-14 00:10:08.273 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-14 00:10:08.679 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-14 00:10:08.698 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-14 00:10:08.707 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-14 00:10:08.707 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-14 00:10:09.108 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-14 00:10:09.121 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-14 00:10:09.122 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 4160 ms
2023-06-14 00:10:09.939 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@62a6d3c2 with name: jasyptStringEncryptor
2023-06-14 00:10:10.003 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-14 00:10:10.092 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-06-14 00:10:10.097 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-14 00:10:10.830 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-14 00:10:11.170 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-14 00:10:11.249 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-14 00:10:11.250 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-14 00:10:11.397 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-14 00:10:11.852 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 00:10:11.867 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-14 00:10:12.565 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 00:10:12.568 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-14 00:10:12.653 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-14 00:10:12.904 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-14 00:10:13.158 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'clientInboundChannelExecutor'
2023-06-14 00:10:13.171 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'clientOutboundChannelExecutor'
2023-06-14 00:10:13.969 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-14 00:10:13.970 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-14 00:10:14.131 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-14 00:10:14.132 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-14 00:10:14.132 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-14 00:10:14.132 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-14 00:10:14.132 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-14 00:10:14.132 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-14 00:10:14.132 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-14 00:10:14.132 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-14 00:10:14.132 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-14 00:10:14.266 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@682f85e7, org.springframework.security.web.context.SecurityContextPersistenceFilter@72d2eb00, org.springframework.security.web.header.HeaderWriterFilter@e67d349, org.springframework.web.filter.CorsFilter@720ad0b7, org.springframework.security.web.authentication.logout.LogoutFilter@7c90504f, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@5cbcea23, org.springframework.security.web.session.ConcurrentSessionFilter@1e04a9c0, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@63a1169b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@223801df, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@246dda4a, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@47d51c51, org.springframework.security.web.session.SessionManagementFilter@39455394, org.springframework.security.web.access.ExceptionTranslationFilter@69520657, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@7be1fef]
2023-06-14 00:10:14.286 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-14 00:10:14.318 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService 'messageBrokerTaskScheduler'
2023-06-14 00:10:14.367 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'brokerChannelExecutor'
2023-06-14 00:10:14.708 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-14 00:10:14.769 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-14 00:10:15.131 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 00:10:15.842 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-14 00:10:15.864 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-14 00:10:15.983 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Starting...
2023-06-14 00:10:15.984 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2023-06-14 00:10:15.985 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Started.
2023-06-14 00:10:15.995 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-14 00:10:15.998 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-14 00:10:16.049 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-14 00:10:16.053 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.805 seconds (JVM running for 13.107)
2023-06-14 00:10:16.053 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-14 00:10:16.053 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-14 00:10:16.054 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-14 00:10:17.378 INFO  [RMI TCP Connection(6)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-14 00:10:17.378 INFO  [RMI TCP Connection(6)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-14 00:10:17.396 INFO  [RMI TCP Connection(6)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 18 ms
2023-06-14 00:10:27.644 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 00:10:27.652 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-06-14 00:10:27.674 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-14 00:10:27.763 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$UO.LTwJwhCqTDtHCD.UmxOck3c1ulZAD2.R9vp8ECAfalHkUucVmu
2023-06-14 00:10:27.854 INFO  [http-nio-10010-exec-10] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-14 00:10:27.879 INFO  [UserConnection-1] [com.pjy.dashboard.service.ChatService] - # sise thread start : [p00139]
2023-06-14 00:10:27.880 INFO  [UserConnection-1] [com.pjy.dashboard.service.ChatService] - # sise threaditemList = null 
2023-06-14 00:10:30.552 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 00:10:30.576 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 00:10:30.643 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 66 msec}
2023-06-14 00:10:32.692 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 00:10:32.762 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 00:10:32.772 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 5 msec}
2023-06-14 00:10:32.807 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 00:10:32.808 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 00:10:32.812 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 00:10:32.813 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 00:10:32.866 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 1 msec}
2023-06-14 00:10:34.703 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77ee8faa
2023-06-14 00:10:34.704 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 00:10:34.710 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석'
	order by 1
 {executed in 2 msec}
2023-06-14 00:10:34.741 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de204fd0
2023-06-14 00:10:34.741 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
2023-06-14 00:10:34.743 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-14 00:10:34.744 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 00:10:34.792 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강병석'
 {executed in 0 msec}
2023-06-14 00:10:36.032 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f22bf622
2023-06-14 00:10:36.034 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 00:10:36.042 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영'
	order by 1
 {executed in 3 msec}
2023-06-14 00:10:36.066 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@585db648
2023-06-14 00:10:36.066 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '구진영' order by a.base_year desc,a.acc_time desc
2023-06-14 00:10:36.069 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '구진영' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-14 00:10:36.071 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '구진영' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-14 00:10:36.123 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '구진영'
 {executed in 0 msec}
2023-06-14 00:10:36.133 ERROR [http-nio-10010-exec-1] [c.p.d.core.error.GlobalExceptionHandler] - handleEntityNotFoundException
java.io.FileNotFoundException: URL [file:c:/bus/image/70627f87-9103-4acb-90cd-360b8bff9bbd.jpg] cannot be resolved in the file system for checking its content length
	at org.springframework.core.io.AbstractFileResolvingResource.contentLength(AbstractFileResolvingResource.java:232)
	at org.springframework.http.converter.ResourceHttpMessageConverter.getContentLength(ResourceHttpMessageConverter.java:116)
	at org.springframework.http.converter.ResourceHttpMessageConverter.getContentLength(ResourceHttpMessageConverter.java:45)
	at org.springframework.http.converter.AbstractHttpMessageConverter.addDefaultHeaders(AbstractHttpMessageConverter.java:260)
	at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:211)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:294)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:181)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:123)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$d430f669.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-14 00:10:36.175 WARN  [http-nio-10010-exec-1] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [java.io.FileNotFoundException: URL [file:c:/bus/image/70627f87-9103-4acb-90cd-360b8bff9bbd.jpg] cannot be resolved in the file system for checking its content length]
2023-06-14 00:11:14.381 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2023-06-14 00:12:28.644 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-06-14 00:12:28.647 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.m.s.b.SimpleBrokerMessageHandler] - Stopping...
2023-06-14 00:12:28.647 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2023-06-14 00:12:28.648 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.m.s.b.SimpleBrokerMessageHandler] - Stopped.
2023-06-14 00:12:28.676 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'brokerChannelExecutor'
2023-06-14 00:12:28.676 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Shutting down ExecutorService 'messageBrokerTaskScheduler'
2023-06-14 00:12:28.677 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-06-14 00:12:28.677 INFO  [UserConnection-1] [com.pjy.dashboard.service.ChatService] - ## thread end sise . UserConnection-1[63]
2023-06-14 00:12:28.678 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'clientOutboundChannelExecutor'
2023-06-14 00:12:28.678 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'clientInboundChannelExecutor'
2023-06-14 00:12:28.681 INFO  [RMI TCP Connection(11)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-06-14 00:12:28.696 INFO  [RMI TCP Connection(11)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-06-14 00:12:28.737 INFO  [RMI TCP Connection(11)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-06-14 00:12:32.854 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 18340 (E:\bus\dashboard\dashboard\target\classes started by admin in E:\bus\dashboard\dashboard)
2023-06-14 00:12:32.860 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-14 00:12:32.922 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-14 00:12:32.923 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-14 00:12:34.530 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-14 00:12:34.530 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-14 00:12:34.706 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 164ms. Found 3 JPA repository interfaces.
2023-06-14 00:12:35.101 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-14 00:12:35.102 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-14 00:12:35.322 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 00:12:35.323 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 00:12:35.324 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 00:12:35.324 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 222ms. Found 0 JDBC repository interfaces.
2023-06-14 00:12:35.806 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-14 00:12:35.877 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-14 00:12:35.877 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-14 00:12:35.878 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-14 00:12:35.878 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-14 00:12:35.878 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 00:12:35.880 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-14 00:12:35.880 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-14 00:12:35.880 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 00:12:35.880 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 00:12:35.880 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 00:12:35.880 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-14 00:12:35.880 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 00:12:36.106 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$8ee2308] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 00:12:36.162 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-14 00:12:36.256 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$f2e48735] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 00:12:36.341 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 00:12:36.343 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@4a82e3de' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 00:12:36.349 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$17b929e7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 00:12:36.360 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$3d0e41fd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 00:12:36.366 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 00:12:36.368 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 00:12:36.397 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$5a36befb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 00:12:36.429 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$d9b70c2d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 00:12:36.581 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-14 00:12:36.586 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-14 00:12:37.038 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-14 00:12:37.057 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-14 00:12:37.068 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-14 00:12:37.068 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-14 00:12:37.497 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-14 00:12:37.508 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-14 00:12:37.508 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 4585 ms
2023-06-14 00:12:38.446 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@62c466 with name: jasyptStringEncryptor
2023-06-14 00:12:38.498 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-14 00:12:38.586 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 8 msec}
2023-06-14 00:12:38.591 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-14 00:12:39.491 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-14 00:12:39.868 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-14 00:12:39.951 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-14 00:12:39.954 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-14 00:12:40.126 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-14 00:12:40.619 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 00:12:40.639 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-14 00:12:41.397 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 00:12:41.400 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-14 00:12:41.480 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-14 00:12:41.755 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-14 00:12:42.039 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'clientInboundChannelExecutor'
2023-06-14 00:12:42.056 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'clientOutboundChannelExecutor'
2023-06-14 00:12:43.031 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-14 00:12:43.032 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-14 00:12:43.227 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-14 00:12:43.227 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-14 00:12:43.227 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-14 00:12:43.228 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-14 00:12:43.228 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-14 00:12:43.228 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-14 00:12:43.228 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-14 00:12:43.228 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-14 00:12:43.228 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-14 00:12:43.420 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5febb9cf, org.springframework.security.web.context.SecurityContextPersistenceFilter@37099630, org.springframework.security.web.header.HeaderWriterFilter@e823a6, org.springframework.web.filter.CorsFilter@431c3c6b, org.springframework.security.web.authentication.logout.LogoutFilter@566a2620, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@59367679, org.springframework.security.web.session.ConcurrentSessionFilter@69fddf54, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@c4d8c34, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@33a4af7b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@f3e5025, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@225005d1, org.springframework.security.web.session.SessionManagementFilter@e5eb1e5, org.springframework.security.web.access.ExceptionTranslationFilter@7b8bc164, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@113653d6]
2023-06-14 00:12:43.445 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-14 00:12:43.492 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService 'messageBrokerTaskScheduler'
2023-06-14 00:12:43.562 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'brokerChannelExecutor'
2023-06-14 00:12:44.018 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-14 00:12:44.101 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-14 00:12:44.556 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 00:12:45.415 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-14 00:12:45.445 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-14 00:12:45.591 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Starting...
2023-06-14 00:12:45.591 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2023-06-14 00:12:45.592 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Started.
2023-06-14 00:12:45.604 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-14 00:12:45.607 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-14 00:12:45.662 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-14 00:12:45.669 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 13.333 seconds (JVM running for 14.82)
2023-06-14 00:12:45.670 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-14 00:12:45.670 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-14 00:12:45.670 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-14 00:12:46.559 INFO  [RMI TCP Connection(7)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-14 00:12:46.560 INFO  [RMI TCP Connection(7)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-14 00:12:46.582 INFO  [RMI TCP Connection(7)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 22 ms
2023-06-14 00:12:55.923 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 00:12:55.930 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-06-14 00:12:55.964 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-14 00:12:56.052 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$66sL5p.8LSSOXqc4jA4KOuKbGX2LQUOFz0OCvkuOLuznBKPLvdMEW
2023-06-14 00:12:56.221 INFO  [http-nio-10010-exec-9] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-14 00:12:56.246 INFO  [UserConnection-1] [com.pjy.dashboard.service.ChatService] - # sise thread start : [p00139]
2023-06-14 00:12:56.246 INFO  [UserConnection-1] [com.pjy.dashboard.service.ChatService] - # sise threaditemList = null 
2023-06-14 00:12:58.138 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 00:12:58.162 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 00:12:58.204 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 39 msec}
2023-06-14 00:13:00.069 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 00:13:00.143 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 00:13:00.149 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 1 msec}
2023-06-14 00:13:00.192 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 00:13:00.192 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 00:13:00.217 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 00:13:00.219 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 00:13:00.272 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 1 msec}
2023-06-14 00:13:09.220 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 00:13:09.222 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 1 msec}
2023-06-14 00:13:09.257 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select fileentity0_.file_id as file_id1_2_0_, fileentity0_.orgNm as orgNm2_2_0_, fileentity0_.savedNm as savedNm3_2_0_, fileentity0_.savedPath as savedPat4_2_0_ from TBL_FILE_INFO fileentity0_ where fileentity0_.file_id='강근원'
 {executed in 0 msec}
2023-06-14 00:13:09.290 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61)
1. insert into TBL_FILE_INFO (orgNm, savedNm, savedPath, file_id) values ('2e9179bb-c9f7-46cf-b6eb-befa2adeb2f9.jpg', '7ad4c7f4-62bb-4454-aec9-835f6b37d653.jpg', 'e:/bus/image/7ad4c7f4-62bb-4454-aec9-835f6b37d653.jpg', '강근원')
 {executed in 9 msec}
2023-06-14 00:13:10.609 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 00:13:10.612 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 1 msec}
2023-06-14 00:13:12.689 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77ee8faa
2023-06-14 00:13:12.691 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 00:13:12.699 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석'
	order by 1
 {executed in 6 msec}
2023-06-14 00:13:12.727 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de204fd0
2023-06-14 00:13:12.727 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
2023-06-14 00:13:12.729 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-14 00:13:12.731 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 00:13:12.778 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강병석'
 {executed in 1 msec}
2023-06-14 00:13:13.849 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 00:13:13.852 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-06-14 00:13:13.856 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 00:13:13.867 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 1 msec}
2023-06-14 00:13:13.886 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 00:13:13.886 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 00:13:13.887 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 00:13:13.889 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 00:13:43.564 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2023-06-14 08:45:41.014 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 7092 (E:\bus\dashboard\dashboard\target\classes started by admin in E:\bus\dashboard\dashboard)
2023-06-14 08:45:41.017 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-14 08:45:41.090 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-14 08:45:41.092 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-14 08:45:43.645 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-14 08:45:43.645 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-14 08:45:43.814 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 158ms. Found 3 JPA repository interfaces.
2023-06-14 08:45:44.247 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-14 08:45:44.247 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-14 08:45:44.337 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 08:45:44.337 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 08:45:44.338 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 08:45:44.338 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 90ms. Found 0 JDBC repository interfaces.
2023-06-14 08:45:44.844 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-14 08:45:44.920 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-14 08:45:44.920 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-14 08:45:44.920 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-14 08:45:44.921 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-14 08:45:44.922 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 08:45:44.922 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-14 08:45:44.922 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-14 08:45:44.922 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 08:45:44.922 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 08:45:44.922 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 08:45:44.922 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-14 08:45:44.922 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 08:45:45.019 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$edc8caf8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 08:45:45.082 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-14 08:45:45.206 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$d7bf2f25] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 08:45:45.301 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 08:45:45.303 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@38afef8a' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 08:45:45.308 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$fc93d1d7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 08:45:45.318 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$21e8e9ed] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 08:45:45.321 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 08:45:45.323 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 08:45:45.350 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$3f1166eb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 08:45:45.380 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$be91b41d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 08:45:45.525 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-14 08:45:45.530 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-14 08:45:46.058 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-14 08:45:46.077 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-14 08:45:46.088 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-14 08:45:46.089 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-14 08:45:47.367 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-14 08:45:47.378 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-14 08:45:47.379 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 6287 ms
2023-06-14 08:45:48.373 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@2a6dba5 with name: jasyptStringEncryptor
2023-06-14 08:45:48.444 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-14 08:45:51.038 ERROR [restartedMain] [com.zaxxer.hikari.pool.HikariPool] - H2 - Exception during pool initialization.
org.h2.jdbc.JdbcSQLNonTransientConnectionException: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:622)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.engine.SessionRemote.connectServer(SessionRemote.java:439)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:321)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)
	at org.h2.Driver.connect(Driver.java:69)
	at net.sf.log4jdbc.sql.jdbcapi.DriverSpy.connect(DriverSpy.java:401)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.<init>(HikariDataSource.java:81)
	at com.pjy.dashboard.configuration.H2DataSourceConfiguration.h2DataSource(H2DataSourceConfiguration.java:67)
	at com.pjy.dashboard.configuration.H2DataSourceConfiguration$$EnhancerBySpringCGLIB$$fc617949.CGLIB$h2DataSource$6(<generated>)
	at com.pjy.dashboard.configuration.H2DataSourceConfiguration$$EnhancerBySpringCGLIB$$fc617949$$FastClassBySpringCGLIB$$69abeb9f.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at com.pjy.dashboard.configuration.H2DataSourceConfiguration$$EnhancerBySpringCGLIB$$fc617949.h2DataSource(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1320)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1159)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.addCandidateEntry(DefaultListableBeanFactory.java:1471)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveMultipleBeans(DefaultListableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1213)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1175)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:218)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1340)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1186)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:392)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1320)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1159)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:608)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:596)
	at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1226)
	at org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorRegistryBeans.get(HealthIndicatorRegistryBeans.java:42)
	at org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration.healthIndicatorRegistry(HealthIndicatorAutoConfiguration.java:77)
	at org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration$$EnhancerBySpringCGLIB$$489382ab.CGLIB$healthIndicatorRegistry$0(<generated>)
	at org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration$$EnhancerBySpringCGLIB$$489382ab$$FastClassBySpringCGLIB$$6258b9d7.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration$$EnhancerBySpringCGLIB$$489382ab.healthIndicatorRegistry(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1320)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1159)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1255)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1175)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1320)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1159)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)
	at org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer.createEndpointBean(EndpointDiscoverer.java:141)
	at org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer.createEndpointBeans(EndpointDiscoverer.java:131)
	at org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer.discoverEndpoints(EndpointDiscoverer.java:120)
	at org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer.getEndpoints(EndpointDiscoverer.java:114)
	at org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration.servletEndpointRegistrar(ServletEndpointManagementContextConfiguration.java:72)
	at org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration$$EnhancerBySpringCGLIB$$f545bec6.CGLIB$servletEndpointRegistrar$0(<generated>)
	at org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration$$EnhancerBySpringCGLIB$$f545bec6$$FastClassBySpringCGLIB$$ad498649.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration$$EnhancerBySpringCGLIB$$f545bec6.servletEndpointRegistrar(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1320)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1159)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:211)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:202)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addServletContextInitializerBeans(ServletContextInitializerBeans.java:96)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:85)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:253)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:227)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:53)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5135)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1384)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1374)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:909)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:841)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1384)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1374)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:909)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:262)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:421)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:930)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:459)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:105)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:86)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:416)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:180)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:180)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:153)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:744)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:391)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:312)
	at com.pjy.dashboard.PjyApplication.main(PjyApplication.java:40)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: java.net.ConnectException: Connection refused: no further information
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
	at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:542)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:597)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)
	at java.base/java.net.Socket.connect(Socket.java:633)
	at org.h2.util.NetUtils.createSocket(NetUtils.java:103)
	at org.h2.util.NetUtils.createSocket(NetUtils.java:83)
	at org.h2.engine.SessionRemote.initTransfer(SessionRemote.java:119)
	at org.h2.engine.SessionRemote.connectServer(SessionRemote.java:435)
	... 171 common frames omitted
2023-06-14 08:45:51.052 ERROR [restartedMain] [o.s.b.web.embedded.tomcat.TomcatStarter] - Error starting Tomcat context. Exception: org.springframework.beans.factory.BeanCreationException. Message: Error creating bean with name 'servletEndpointRegistrar' defined in class path resource [org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.endpoint.web.ServletEndpointRegistrar]: Factory method 'servletEndpointRegistrar' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'healthEndpoint' defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthEndpointConfiguration.class]: Unsatisfied dependency expressed through method 'healthEndpoint' parameter 1; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'healthIndicatorRegistry' defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.health.HealthIndicatorRegistry]: Factory method 'healthIndicatorRegistry' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorAutoConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'h2DataSource' defined in class path resource [com/pjy/dashboard/configuration/H2DataSourceConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'h2DataSource' threw exception; nested exception is com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
2023-06-14 08:45:51.098 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Stopping service [Tomcat]
2023-06-14 08:45:51.104 WARN  [restartedMain] [o.a.c.loader.WebappClassLoaderBase] - The web application [ROOT] appears to have started a thread named [ReloadingTrigger-1] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:
 java.base@17.0.6/jdk.internal.misc.Unsafe.park(Native Method)
 java.base@17.0.6/java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:252)
 java.base@17.0.6/java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:1672)
 java.base@17.0.6/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1182)
 java.base@17.0.6/java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:899)
 java.base@17.0.6/java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1062)
 java.base@17.0.6/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1122)
 java.base@17.0.6/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 java.base@17.0.6/java.lang.Thread.run(Thread.java:833)
2023-06-14 08:45:51.106 WARN  [restartedMain] [o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext] - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat
2023-06-14 08:45:51.124 INFO  [restartedMain] [o.s.b.a.l.ConditionEvaluationReportLoggingListener] - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2023-06-14 08:45:51.127 ERROR [restartedMain] [o.springframework.boot.SpringApplication] - Application run failed
org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:156)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:744)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:391)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:312)
	at com.pjy.dashboard.PjyApplication.main(PjyApplication.java:40)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:124)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:86)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:416)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:180)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:180)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:153)
	... 11 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'servletEndpointRegistrar' defined in class path resource [org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.endpoint.web.ServletEndpointRegistrar]: Factory method 'servletEndpointRegistrar' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'healthEndpoint' defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthEndpointConfiguration.class]: Unsatisfied dependency expressed through method 'healthEndpoint' parameter 1; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'healthIndicatorRegistry' defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.health.HealthIndicatorRegistry]: Factory method 'healthIndicatorRegistry' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorAutoConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'h2DataSource' defined in class path resource [com/pjy/dashboard/configuration/H2DataSourceConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'h2DataSource' threw exception; nested exception is com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:627)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1320)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1159)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:204)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:211)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:202)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addServletContextInitializerBeans(ServletContextInitializerBeans.java:96)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:85)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:253)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:227)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:53)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5135)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1384)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1374)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:909)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:841)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1384)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1374)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:909)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:262)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:421)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:930)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:459)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:105)
	... 16 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.endpoint.web.ServletEndpointRegistrar]: Factory method 'servletEndpointRegistrar' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'healthEndpoint' defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthEndpointConfiguration.class]: Unsatisfied dependency expressed through method 'healthEndpoint' parameter 1; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'healthIndicatorRegistry' defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.health.HealthIndicatorRegistry]: Factory method 'healthIndicatorRegistry' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorAutoConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'h2DataSource' defined in class path resource [com/pjy/dashboard/configuration/H2DataSourceConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'h2DataSource' threw exception; nested exception is com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	... 56 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'healthEndpoint' defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthEndpointConfiguration.class]: Unsatisfied dependency expressed through method 'healthEndpoint' parameter 1; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'healthIndicatorRegistry' defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.health.HealthIndicatorRegistry]: Factory method 'healthIndicatorRegistry' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorAutoConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'h2DataSource' defined in class path resource [com/pjy/dashboard/configuration/H2DataSourceConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'h2DataSource' threw exception; nested exception is com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:769)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1320)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1159)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)
	at org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer.createEndpointBean(EndpointDiscoverer.java:141)
	at org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer.createEndpointBeans(EndpointDiscoverer.java:131)
	at org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer.discoverEndpoints(EndpointDiscoverer.java:120)
	at org.springframework.boot.actuate.endpoint.annotation.EndpointDiscoverer.getEndpoints(EndpointDiscoverer.java:114)
	at org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration.servletEndpointRegistrar(ServletEndpointManagementContextConfiguration.java:72)
	at org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration$$EnhancerBySpringCGLIB$$f545bec6.CGLIB$servletEndpointRegistrar$0(<generated>)
	at org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration$$EnhancerBySpringCGLIB$$f545bec6$$FastClassBySpringCGLIB$$ad498649.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration$$EnhancerBySpringCGLIB$$f545bec6.servletEndpointRegistrar(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 57 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'healthIndicatorRegistry' defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthIndicatorAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.health.HealthIndicatorRegistry]: Factory method 'healthIndicatorRegistry' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorAutoConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'h2DataSource' defined in class path resource [com/pjy/dashboard/configuration/H2DataSourceConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'h2DataSource' threw exception; nested exception is com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:627)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1320)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1159)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1255)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1175)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	... 82 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.health.HealthIndicatorRegistry]: Factory method 'healthIndicatorRegistry' threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorAutoConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'h2DataSource' defined in class path resource [com/pjy/dashboard/configuration/H2DataSourceConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'h2DataSource' threw exception; nested exception is com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	... 96 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorAutoConfiguration': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'h2DataSource' defined in class path resource [com/pjy/dashboard/configuration/H2DataSourceConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'h2DataSource' threw exception; nested exception is com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:769)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:218)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1340)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1186)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:392)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1320)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1159)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:608)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:596)
	at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1226)
	at org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorRegistryBeans.get(HealthIndicatorRegistryBeans.java:42)
	at org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration.healthIndicatorRegistry(HealthIndicatorAutoConfiguration.java:77)
	at org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration$$EnhancerBySpringCGLIB$$489382ab.CGLIB$healthIndicatorRegistry$0(<generated>)
	at org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration$$EnhancerBySpringCGLIB$$489382ab$$FastClassBySpringCGLIB$$6258b9d7.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorAutoConfiguration$$EnhancerBySpringCGLIB$$489382ab.healthIndicatorRegistry(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 97 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'h2DataSource' defined in class path resource [com/pjy/dashboard/configuration/H2DataSourceConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'h2DataSource' threw exception; nested exception is com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:627)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1320)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1159)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.addCandidateEntry(DefaultListableBeanFactory.java:1471)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1435)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveMultipleBeans(DefaultListableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1213)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1175)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	... 130 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.sql.DataSource]: Factory method 'h2DataSource' threw exception; nested exception is com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	... 147 common frames omitted
Caused by: com.zaxxer.hikari.pool.HikariPool$PoolInitializationException: Failed to initialize pool: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
	at com.zaxxer.hikari.pool.HikariPool.throwPoolInitializationException(HikariPool.java:576)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:562)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.<init>(HikariDataSource.java:81)
	at com.pjy.dashboard.configuration.H2DataSourceConfiguration.h2DataSource(H2DataSourceConfiguration.java:67)
	at com.pjy.dashboard.configuration.H2DataSourceConfiguration$$EnhancerBySpringCGLIB$$fc617949.CGLIB$h2DataSource$6(<generated>)
	at com.pjy.dashboard.configuration.H2DataSourceConfiguration$$EnhancerBySpringCGLIB$$fc617949$$FastClassBySpringCGLIB$$69abeb9f.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at com.pjy.dashboard.configuration.H2DataSourceConfiguration$$EnhancerBySpringCGLIB$$fc617949.h2DataSource(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 148 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLNonTransientConnectionException: Connection is broken: "java.net.ConnectException: Connection refused: no further information: localhost" [90067-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:622)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.engine.SessionRemote.connectServer(SessionRemote.java:439)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:321)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)
	at org.h2.Driver.connect(Driver.java:69)
	at net.sf.log4jdbc.sql.jdbcapi.DriverSpy.connect(DriverSpy.java:401)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	... 161 common frames omitted
Caused by: java.net.ConnectException: Connection refused: no further information
	at java.base/sun.nio.ch.Net.pollConnect(Native Method)
	at java.base/sun.nio.ch.Net.pollConnectNow(Net.java:672)
	at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:542)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:597)
	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)
	at java.base/java.net.Socket.connect(Socket.java:633)
	at org.h2.util.NetUtils.createSocket(NetUtils.java:103)
	at org.h2.util.NetUtils.createSocket(NetUtils.java:83)
	at org.h2.engine.SessionRemote.initTransfer(SessionRemote.java:119)
	at org.h2.engine.SessionRemote.connectServer(SessionRemote.java:435)
	... 171 common frames omitted
2023-06-14 08:46:39.782 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 18360 (E:\bus\dashboard\dashboard\target\classes started by admin in E:\bus\dashboard\dashboard)
2023-06-14 08:46:39.790 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-14 08:46:39.871 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-14 08:46:39.871 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-14 08:46:41.449 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-14 08:46:41.450 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-14 08:46:41.618 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 158ms. Found 3 JPA repository interfaces.
2023-06-14 08:46:42.071 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-14 08:46:42.072 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-14 08:46:42.160 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 08:46:42.160 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 08:46:42.161 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 08:46:42.161 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 89ms. Found 0 JDBC repository interfaces.
2023-06-14 08:46:42.673 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-14 08:46:42.827 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-14 08:46:42.828 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-14 08:46:42.829 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-14 08:46:42.829 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-14 08:46:42.829 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 08:46:42.830 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-14 08:46:42.831 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-14 08:46:42.832 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 08:46:42.833 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 08:46:42.835 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 08:46:42.835 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-14 08:46:42.836 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 08:46:42.963 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$b75b5c80] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 08:46:43.034 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-14 08:46:43.159 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$a151c0ad] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 08:46:43.250 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 08:46:43.252 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@340fcd73' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 08:46:43.253 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$c626635f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 08:46:43.264 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$eb7b7b75] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 08:46:43.267 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 08:46:43.268 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 08:46:43.290 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$8a3f873] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 08:46:43.321 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$882445a5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 08:46:43.468 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-14 08:46:43.474 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-14 08:46:43.966 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-14 08:46:43.982 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-14 08:46:43.992 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-14 08:46:43.992 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-14 08:46:44.426 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-14 08:46:44.437 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-14 08:46:44.438 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 4566 ms
2023-06-14 08:46:45.344 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@a0094bf with name: jasyptStringEncryptor
2023-06-14 08:46:45.405 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-14 08:46:45.505 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 9 msec}
2023-06-14 08:46:45.509 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-14 08:46:46.285 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-14 08:46:46.831 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-14 08:46:47.003 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-14 08:46:47.006 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-14 08:46:47.344 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-14 08:46:47.740 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 08:46:47.777 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-14 08:46:48.962 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 08:46:48.966 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 2 msec}
2023-06-14 08:46:49.192 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-14 08:46:49.504 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-14 08:46:49.897 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'clientInboundChannelExecutor'
2023-06-14 08:46:49.916 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'clientOutboundChannelExecutor'
2023-06-14 08:46:51.837 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-14 08:46:51.837 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-14 08:46:52.333 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-14 08:46:52.334 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-14 08:46:52.334 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-14 08:46:52.334 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-14 08:46:52.334 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-14 08:46:52.334 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-14 08:46:52.334 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-14 08:46:52.335 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-14 08:46:52.335 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-14 08:46:52.849 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@16a28499, org.springframework.security.web.context.SecurityContextPersistenceFilter@6337d002, org.springframework.security.web.header.HeaderWriterFilter@3085744f, org.springframework.web.filter.CorsFilter@23fbae27, org.springframework.security.web.authentication.logout.LogoutFilter@54d23902, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@2c5088ed, org.springframework.security.web.session.ConcurrentSessionFilter@4d5767b9, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@133f40aa, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@17eedc6e, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6c2664d0, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@671ee4b3, org.springframework.security.web.session.SessionManagementFilter@1c855710, org.springframework.security.web.access.ExceptionTranslationFilter@659fd440, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@45d8961c]
2023-06-14 08:46:52.917 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-14 08:46:53.034 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService 'messageBrokerTaskScheduler'
2023-06-14 08:46:53.198 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'brokerChannelExecutor'
2023-06-14 08:46:54.331 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-14 08:46:54.534 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-14 08:46:55.578 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 08:46:57.724 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-14 08:46:57.797 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-14 08:46:58.149 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Starting...
2023-06-14 08:46:58.149 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2023-06-14 08:46:58.152 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Started.
2023-06-14 08:46:58.181 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-14 08:46:58.188 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-14 08:46:58.307 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-14 08:46:58.316 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 19.138 seconds (JVM running for 20.626)
2023-06-14 08:46:58.317 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-14 08:46:58.318 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-14 08:46:58.318 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-14 08:47:00.520 INFO  [RMI TCP Connection(5)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-14 08:47:00.521 INFO  [RMI TCP Connection(5)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-14 08:47:00.597 INFO  [RMI TCP Connection(5)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 76 ms
2023-06-14 08:47:19.894 WARN  [http-nio-10010-exec-1] [o.a.catalina.util.SessionIdGeneratorBase] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [160] milliseconds.
2023-06-14 08:47:22.548 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 08:47:22.570 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 3 msec}
2023-06-14 08:47:22.632 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-14 08:47:22.840 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$2KBu7T4dy3zW.2lPUMhAmuOGNXL9VzyNYhkBXHUtKrEFAa5oEawcy
2023-06-14 08:47:23.058 INFO  [http-nio-10010-exec-8] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-14 08:47:23.112 INFO  [UserConnection-1] [com.pjy.dashboard.service.ChatService] - # sise thread start : [p00139]
2023-06-14 08:47:23.112 INFO  [UserConnection-1] [com.pjy.dashboard.service.ChatService] - # sise threaditemList = null 
2023-06-14 08:47:26.587 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 08:47:26.599 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 08:47:26.723 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 122 msec}
2023-06-14 08:47:28.584 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 08:47:28.768 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 08:47:28.792 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 15 msec}
2023-06-14 08:47:28.874 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 08:47:28.875 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 08:47:28.881 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 3 msec}
2023-06-14 08:47:28.885 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-14 08:47:28.951 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 08:47:53.195 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2023-06-14 08:48:01.539 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9aedd2f9
2023-06-14 08:48:01.542 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 08:48:01.556 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박준용' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박준용' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박준용' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박준용' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박준용' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박준용'
	order by 1
 {executed in 6 msec}
2023-06-14 08:48:01.604 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@11f931f
2023-06-14 08:48:01.605 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '박준용' order by a.base_year desc,a.acc_time desc
2023-06-14 08:48:01.607 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '박준용' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 08:48:01.610 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '박준용' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 08:48:01.686 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '박준용'
 {executed in 1 msec}
2023-06-14 08:48:08.953 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@830a091a
2023-06-14 08:48:08.957 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 08:48:08.970 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박근호' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박근호' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박근호' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박근호' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박근호' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박근호'
	order by 1
 {executed in 6 msec}
2023-06-14 08:48:09.024 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e93bc940
2023-06-14 08:48:09.025 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '박근호' order by a.base_year desc,a.acc_time desc
2023-06-14 08:48:09.028 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '박근호' order by a.base_year desc,a.acc_time desc
 {executed in 3 msec}
2023-06-14 08:48:09.030 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '박근호' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 08:48:09.093 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '박근호'
 {executed in 1 msec}
2023-06-14 08:48:13.196 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c70045b9
2023-06-14 08:48:13.196 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '박근호' ORDER BY b.base_ym desc
2023-06-14 08:48:13.198 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 08:48:13.208 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '박근호' ORDER BY b.base_ym desc
 {executed in 7 msec}
2023-06-14 08:48:13.215 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '박근호' ORDER BY b.base_ym desc
 {executed in 6 msec}
2023-06-14 08:48:15.629 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5e1f055c
2023-06-14 08:48:15.629 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '박근호' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-14 08:48:15.631 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 08:48:15.634 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '박근호' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 3 msec}
2023-06-14 08:48:15.637 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '박근호' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 2 msec}
2023-06-14 08:48:26.068 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e93bc940
2023-06-14 08:48:26.068 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '박근호' order by a.base_year desc,a.acc_time desc
2023-06-14 08:48:26.071 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 08:48:26.073 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '박근호' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 08:48:26.076 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '박근호' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-14 08:48:26.154 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@483e5e2c
2023-06-14 08:48:26.166 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김종만' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김종만' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김종만' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김종만' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김종만' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김종만'
	order by 1
 {executed in 6 msec}
2023-06-14 08:48:26.222 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ae701e52
2023-06-14 08:48:26.223 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김종만' order by a.base_year desc,a.acc_time desc
2023-06-14 08:48:26.226 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김종만' order by a.base_year desc,a.acc_time desc
 {executed in 3 msec}
2023-06-14 08:48:26.230 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김종만' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-14 08:48:26.291 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '김종만'
 {executed in 1 msec}
2023-06-14 08:48:29.688 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 08:48:29.689 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 08:48:29.702 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 5 msec}
2023-06-14 08:48:29.720 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 08:48:29.751 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 08:48:29.751 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 08:48:29.754 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 08:48:29.756 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 09:17:53.197 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 2, active threads = 1, queued tasks = 0, completed tasks = 1]
2023-06-14 09:47:53.197 INFO  [MessageBroker-2] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 3, active threads = 1, queued tasks = 0, completed tasks = 2]
2023-06-14 10:27:23.262 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 10:27:23.275 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
52. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-06-14 10:27:23.278 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-14 10:27:23.379 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$raKyPZi8eU/RRPMLT5H3fevIDhP2Iwo64R2Axa//XMLmnnXkYtXFC
2023-06-14 10:27:23.473 INFO  [http-nio-10010-exec-5] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-14 10:27:23.474 INFO  [UserConnection-2] [com.pjy.dashboard.service.ChatService] - # sise thread start : [p00139]
2023-06-14 10:27:23.474 INFO  [UserConnection-2] [com.pjy.dashboard.service.ChatService] - # sise threaditemList = null 
2023-06-14 10:27:43.381 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 10:27:43.382 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
52. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 10:27:43.414 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
52. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 32 msec}
2023-06-14 10:47:46.051 INFO  [MessageBroker-3] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 5, active threads = 1, queued tasks = 0, completed tasks = 4]
2023-06-14 11:17:46.042 INFO  [MessageBroker-2] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 6, active threads = 1, queued tasks = 0, completed tasks = 5]
2023-06-14 11:18:01.364 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-14 11:18:01.364 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-14 11:18:01.364 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-14 11:18:01.364 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-14 11:18:01.469 INFO  [UserConnection-2] [com.pjy.dashboard.service.ChatService] - # sise thread stop # 사용자접속정보 없음
2023-06-14 11:18:01.469 INFO  [UserConnection-2] [com.pjy.dashboard.service.ChatService] - ## thread end sise . UserConnection-2[141]
2023-06-14 11:47:49.994 INFO  [MessageBroker-4] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 7, active threads = 1, queued tasks = 0, completed tasks = 6]
2023-06-14 12:17:46.019 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 8, active threads = 1, queued tasks = 0, completed tasks = 7]
2023-06-14 12:27:42.901 INFO  [http-nio-10010-exec-9] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-14 12:27:42.902 INFO  [http-nio-10010-exec-9] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-14 12:27:42.902 INFO  [http-nio-10010-exec-9] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-06-14 12:27:42.902 INFO  [http-nio-10010-exec-9] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-14 12:27:42.902 INFO  [http-nio-10010-exec-9] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-06-14 12:27:42.917 ERROR [http-nio-10010-exec-9] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$ab12fd71.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-14 12:27:42.949 ERROR [http-nio-10010-exec-9] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$ab12fd71.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-14 12:27:42.954 INFO  [http-nio-10010-exec-9] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-14 12:27:42.954 INFO  [http-nio-10010-exec-9] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-14 12:27:42.954 INFO  [http-nio-10010-exec-9] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-14 12:27:42.954 INFO  [http-nio-10010-exec-9] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-14 12:27:42.954 INFO  [http-nio-10010-exec-9] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-14 12:27:43.183 ERROR [http-nio-10010-exec-9] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$ab12fd71.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-14 12:27:43.184 ERROR [http-nio-10010-exec-9] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$ab12fd71.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-14 12:27:43.185 ERROR [http-nio-10010-exec-9] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$ab12fd71.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 97 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 100 common frames omitted
2023-06-14 12:27:44.767 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
112. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 12:27:44.769 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
112. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-06-14 12:27:44.773 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-14 12:27:44.868 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$BeQy.u0seDnp7ocpX8UzjeWIOSUCrTJgwR2o4kJGjx7gH9zJb9eQS
2023-06-14 12:27:44.964 INFO  [http-nio-10010-exec-10] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-14 12:27:44.965 INFO  [UserConnection-3] [com.pjy.dashboard.service.ChatService] - # sise thread start : [p00139]
2023-06-14 12:27:44.965 INFO  [UserConnection-3] [com.pjy.dashboard.service.ChatService] - # sise threaditemList = null 
2023-06-14 12:32:34.936 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:32:34.938 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
112. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 12:32:34.959 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 21 msec}
2023-06-14 12:33:02.626 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:33:02.628 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
112. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 12:33:02.630 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 12:33:26.779 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:33:26.780 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
112. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 12:33:26.782 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 12:33:53.124 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:33:53.127 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
112. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 12:33:53.128 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 12:33:54.628 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:33:54.629 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
112. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 12:33:54.631 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 12:34:24.341 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:34:24.343 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
112. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 12:34:24.344 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 12:34:42.574 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:34:42.575 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
112. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 12:34:42.577 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 12:35:19.961 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:35:19.962 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
112. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 12:35:19.964 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 12:36:51.397 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:36:51.398 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
112. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 12:36:51.400 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 12:36:52.752 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:36:52.753 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
112. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 12:36:52.755 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 12:36:53.424 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:36:53.425 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
112. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 12:36:53.426 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 12:36:54.562 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:36:54.564 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
112. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 12:36:54.565 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 12:36:55.449 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:36:55.450 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
112. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 12:36:55.452 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 12:36:56.187 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:36:56.188 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
112. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 12:36:56.190 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 12:36:57.175 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:36:57.176 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
112. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 12:36:57.178 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 12:36:57.757 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:36:57.758 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
112. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 12:36:57.759 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 12:36:58.580 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:36:58.581 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
112. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 12:36:58.583 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
112. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 12:47:46.019 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 8, active threads = 1, queued tasks = 0, completed tasks = 8]
2023-06-14 12:58:07.519 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:58:07.520 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
122. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 12:58:07.540 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
122. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 19 msec}
2023-06-14 12:58:43.771 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:58:43.772 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
122. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 12:58:43.774 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
122. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 12:59:06.022 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:59:06.024 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
122. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 12:59:06.026 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
122. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 12:59:07.498 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:59:07.499 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
122. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 12:59:07.500 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
122. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 12:59:08.303 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:59:08.304 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
122. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 12:59:08.306 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
122. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 12:59:46.024 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 12:59:46.025 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
122. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 12:59:46.027 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
122. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 13:05:45.676 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:05:45.677 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
132. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 13:05:45.705 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
132. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 27 msec}
2023-06-14 13:05:49.438 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:05:49.440 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
132. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 13:05:49.441 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
132. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 13:05:50.451 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:05:50.453 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
132. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 13:05:50.455 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
132. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 13:06:01.702 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:06:01.705 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
132. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 13:06:01.706 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
132. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 13:06:02.827 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:06:02.828 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
132. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 13:06:02.829 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
132. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 13:06:19.835 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:06:19.837 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
132. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 13:06:19.838 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
132. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 13:07:41.675 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:07:41.676 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
132. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 13:07:41.678 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
132. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 13:07:55.720 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:07:55.721 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
132. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 13:07:55.722 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
132. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 13:17:46.020 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 8, active threads = 1, queued tasks = 0, completed tasks = 9]
2023-06-14 13:32:55.464 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:32:55.466 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
142. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 13:32:55.497 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
142. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 29 msec}
2023-06-14 13:35:44.161 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:35:44.163 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
142. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 13:35:44.164 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
142. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 13:36:05.324 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:36:05.325 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
142. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 13:36:05.326 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
142. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 13:36:25.804 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:36:25.805 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
142. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 13:36:25.807 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
142. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 13:36:57.110 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:36:57.111 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
142. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 13:36:57.112 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
142. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 13:44:10.582 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:44:10.583 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 13:44:10.603 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 19 msec}
2023-06-14 13:45:57.532 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d9026782
2023-06-14 13:45:57.532 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBL_employeeInfo a where   a.company_no = '100' order by a.emp_no
2023-06-14 13:45:57.533 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 13:45:57.537 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   ROWNUM AS no,a.* from    TBL_employeeInfo a where   a.company_no = '100' order by a.emp_no
 {executed in 3 msec}
2023-06-14 13:45:57.539 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   ROWNUM AS no,a.* from    TBL_employeeInfo a where   a.company_no = '100' order by a.emp_no
 {executed in 2 msec}
2023-06-14 13:47:09.426 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d9026782
2023-06-14 13:47:09.426 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBL_employeeInfo a where   a.company_no = '100' order by a.emp_no
2023-06-14 13:47:09.427 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 13:47:09.435 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   ROWNUM AS no,a.* from    TBL_employeeInfo a where   a.company_no = '100' order by a.emp_no
 {executed in 7 msec}
2023-06-14 13:47:09.438 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   ROWNUM AS no,a.* from    TBL_employeeInfo a where   a.company_no = '100' order by a.emp_no
 {executed in 3 msec}
2023-06-14 13:47:15.812 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d9026782
2023-06-14 13:47:15.813 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBL_employeeInfo a where   a.company_no = '100' order by a.emp_no
2023-06-14 13:47:15.814 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 13:47:15.816 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   ROWNUM AS no,a.* from    TBL_employeeInfo a where   a.company_no = '100' order by a.emp_no
 {executed in 2 msec}
2023-06-14 13:47:15.819 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   ROWNUM AS no,a.* from    TBL_employeeInfo a where   a.company_no = '100' order by a.emp_no
 {executed in 3 msec}
2023-06-14 13:47:23.712 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:47:23.713 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 13:47:23.714 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 13:47:46.022 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 8, active threads = 1, queued tasks = 0, completed tasks = 10]
2023-06-14 13:48:18.610 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:48:18.611 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 13:48:18.613 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 13:49:10.878 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:49:10.879 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 13:49:10.880 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 13:49:23.247 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:49:23.248 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 13:49:23.250 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 13:49:32.252 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:49:32.253 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 13:49:32.254 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 13:49:33.813 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:49:33.814 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 13:49:33.815 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 13:49:34.635 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:49:34.636 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 13:49:34.637 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 13:49:35.636 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:49:35.637 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 13:49:35.638 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 13:49:56.947 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:49:56.949 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 13:49:56.950 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 13:50:01.727 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:50:01.728 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 13:50:01.729 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 13:50:25.194 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:50:25.196 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 13:50:25.197 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 13:50:44.129 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:50:44.130 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 13:50:44.132 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 13:51:01.861 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:51:01.863 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 13:51:01.865 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 2 msec}
2023-06-14 13:52:05.487 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:52:05.490 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 13:52:05.493 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 13:52:15.763 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:52:15.765 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 13:52:15.767 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 13:53:22.124 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:53:22.125 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 13:53:22.127 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 13:53:31.174 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 13:53:31.175 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 13:53:31.177 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 2 msec}
2023-06-14 13:53:33.359 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77ee8faa
2023-06-14 13:53:33.360 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 13:53:33.365 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
152. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석'
	order by 1
 {executed in 3 msec}
2023-06-14 13:53:33.393 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de204fd0
2023-06-14 13:53:33.393 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
2023-06-14 13:53:33.395 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-14 13:53:33.397 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 13:53:33.452 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
152. select * from TBL_FILE_INFO where file_id = '강병석'
 {executed in 1 msec}
2023-06-14 13:53:38.428 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2f54e11f
2023-06-14 13:53:38.433 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
152. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 3 msec}
2023-06-14 13:53:38.437 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
152. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵'
	order by 1
 {executed in 2 msec}
2023-06-14 13:53:38.461 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9586a145
2023-06-14 13:53:38.461 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권병묵' order by a.base_year desc,a.acc_time desc
2023-06-14 13:53:38.463 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권병묵' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-14 13:53:38.464 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
152. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권병묵' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 13:53:38.514 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
152. select * from TBL_FILE_INFO where file_id = '권병묵'
 {executed in 1 msec}
2023-06-14 13:53:38.518 ERROR [http-nio-10010-exec-8] [c.p.d.core.error.GlobalExceptionHandler] - handleEntityNotFoundException
java.io.FileNotFoundException: URL [file:c:/bus/image/4a256344-b95b-4497-95d3-5d684c3044df.jpg] cannot be resolved in the file system for checking its content length
	at org.springframework.core.io.AbstractFileResolvingResource.contentLength(AbstractFileResolvingResource.java:232)
	at org.springframework.http.converter.ResourceHttpMessageConverter.getContentLength(ResourceHttpMessageConverter.java:116)
	at org.springframework.http.converter.ResourceHttpMessageConverter.getContentLength(ResourceHttpMessageConverter.java:45)
	at org.springframework.http.converter.AbstractHttpMessageConverter.addDefaultHeaders(AbstractHttpMessageConverter.java:260)
	at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:211)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:294)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:181)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:123)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$ab12fd71.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-14 13:53:38.541 WARN  [http-nio-10010-exec-8] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [java.io.FileNotFoundException: URL [file:c:/bus/image/4a256344-b95b-4497-95d3-5d684c3044df.jpg] cannot be resolved in the file system for checking its content length]
2023-06-14 14:03:57.991 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 20504 (E:\bus\dashboard\dashboard\target\classes started by admin in E:\bus\dashboard\dashboard)
2023-06-14 14:03:57.995 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-14 14:03:58.053 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-14 14:03:58.053 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-14 14:03:59.993 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-14 14:03:59.993 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-14 14:04:00.231 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 215ms. Found 3 JPA repository interfaces.
2023-06-14 14:04:00.640 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-14 14:04:00.641 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-14 14:04:00.756 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 14:04:00.756 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 14:04:00.757 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 14:04:00.757 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 116ms. Found 0 JDBC repository interfaces.
2023-06-14 14:04:01.231 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-14 14:04:01.302 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-14 14:04:01.302 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-14 14:04:01.303 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-14 14:04:01.303 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-14 14:04:01.303 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 14:04:01.303 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-14 14:04:01.303 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-14 14:04:01.303 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 14:04:01.304 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 14:04:01.304 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 14:04:01.304 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-14 14:04:01.304 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 14:04:01.397 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$b042a1c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 14:04:01.459 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-14 14:04:01.594 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$f4fa8e49] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 14:04:01.735 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 14:04:01.742 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@75f7a14f' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 14:04:01.757 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$19cf30fb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 14:04:01.770 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$3f244911] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 14:04:01.774 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 14:04:01.775 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 14:04:01.804 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$5c4cc60f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 14:04:01.831 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$dbcd1341] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 14:04:02.018 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-14 14:04:02.032 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-14 14:04:02.510 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-14 14:04:02.528 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-14 14:04:02.540 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-14 14:04:02.541 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-14 14:04:02.939 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-14 14:04:02.952 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-14 14:04:02.952 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 4898 ms
2023-06-14 14:04:03.941 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@5b8203a8 with name: jasyptStringEncryptor
2023-06-14 14:04:04.024 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-14 14:04:04.117 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 8 msec}
2023-06-14 14:04:04.122 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-14 14:04:04.917 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-14 14:04:05.353 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-14 14:04:05.436 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-14 14:04:05.438 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-14 14:04:05.610 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-14 14:04:05.897 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 14:04:05.916 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-14 14:04:06.788 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 14:04:06.790 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-14 14:04:06.844 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-14 14:04:07.124 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-14 14:04:07.412 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'clientInboundChannelExecutor'
2023-06-14 14:04:07.428 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'clientOutboundChannelExecutor'
2023-06-14 14:04:08.379 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-14 14:04:08.379 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-14 14:04:08.599 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-14 14:04:08.599 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-14 14:04:08.599 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-14 14:04:08.599 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-14 14:04:08.599 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-14 14:04:08.599 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-14 14:04:08.599 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-14 14:04:08.599 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-14 14:04:08.599 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-14 14:04:08.780 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@68fe3422, org.springframework.security.web.context.SecurityContextPersistenceFilter@f5d737b, org.springframework.security.web.header.HeaderWriterFilter@7d4e1ea5, org.springframework.web.filter.CorsFilter@33d9b22a, org.springframework.security.web.authentication.logout.LogoutFilter@19dd15ee, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@5ebfbde9, org.springframework.security.web.session.ConcurrentSessionFilter@3875ac91, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@45aa4e67, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4bbc5a55, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@75eab4c0, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@56bb3775, org.springframework.security.web.session.SessionManagementFilter@36f85e6d, org.springframework.security.web.access.ExceptionTranslationFilter@64eaf0d2, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@3750b15e]
2023-06-14 14:04:08.805 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-14 14:04:08.853 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService 'messageBrokerTaskScheduler'
2023-06-14 14:04:08.917 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'brokerChannelExecutor'
2023-06-14 14:04:09.371 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-14 14:04:09.457 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-14 14:04:09.906 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 14:04:10.789 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-14 14:04:10.829 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-14 14:04:10.979 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Starting...
2023-06-14 14:04:10.979 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2023-06-14 14:04:10.980 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Started.
2023-06-14 14:04:10.992 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-14 14:04:10.997 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-14 14:04:11.049 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-14 14:04:11.053 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 13.631 seconds (JVM running for 15.473)
2023-06-14 14:04:11.054 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-14 14:04:11.054 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-14 14:04:11.054 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-14 14:04:12.291 INFO  [RMI TCP Connection(6)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-14 14:04:12.292 INFO  [RMI TCP Connection(6)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-14 14:04:12.314 INFO  [RMI TCP Connection(6)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 22 ms
2023-06-14 14:05:01.537 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 14:05:01.545 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-06-14 14:05:01.568 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-14 14:05:01.663 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$oqNZBo/oXi/QghMC/Cizm.aDK6qCMQ7KreRWIgjixeaI.tC.HMfuO
2023-06-14 14:05:01.758 INFO  [http-nio-10010-exec-1] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-14 14:05:01.782 INFO  [UserConnection-1] [com.pjy.dashboard.service.ChatService] - # sise thread start : [p00139]
2023-06-14 14:05:01.782 INFO  [UserConnection-1] [com.pjy.dashboard.service.ChatService] - # sise threaditemList = null 
2023-06-14 14:05:06.304 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 14:05:06.321 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 14:05:06.338 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 17 msec}
2023-06-14 14:05:08.264 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77ee8faa
2023-06-14 14:05:08.344 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 14:05:08.351 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석'
	order by 1
 {executed in 2 msec}
2023-06-14 14:05:08.390 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de204fd0
2023-06-14 14:05:08.390 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
2023-06-14 14:05:08.393 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-14 14:05:08.396 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-14 14:05:08.462 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강병석'
 {executed in 0 msec}
2023-06-14 14:05:08.917 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2023-06-14 14:05:12.248 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@625631bf
2023-06-14 14:05:12.249 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 14:05:12.253 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱'
	order by 1
 {executed in 2 msec}
2023-06-14 14:05:12.283 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c887f1e5
2023-06-14 14:05:12.283 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
2023-06-14 14:05:12.285 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-14 14:05:12.287 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 14:05:12.349 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '고상욱'
 {executed in 1 msec}
2023-06-14 14:05:14.118 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f05326b3
2023-06-14 14:05:14.120 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 14:05:14.125 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고현기' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고현기' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고현기' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고현기' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고현기' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고현기'
	order by 1
 {executed in 3 msec}
2023-06-14 14:05:14.151 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5684e6d9
2023-06-14 14:05:14.151 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고현기' order by a.base_year desc,a.acc_time desc
2023-06-14 14:05:14.153 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고현기' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 14:05:14.154 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고현기' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 14:05:14.202 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '고현기'
 {executed in 1 msec}
2023-06-14 14:07:01.921 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 14:07:01.922 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 14:07:01.923 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 14:35:07.610 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 2, active threads = 1, queued tasks = 0, completed tasks = 1]
2023-06-14 14:51:59.486 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 14:51:59.488 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 14:51:59.509 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 21 msec}
2023-06-14 14:52:06.420 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 14:52:06.422 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 14:52:06.424 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 14:52:35.140 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 14:52:35.141 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 14:52:35.144 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 14:56:05.458 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 14:56:05.460 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 14:56:05.461 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 14:56:37.076 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 14:56:37.078 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 14:56:37.079 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 14:56:59.270 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 14:56:59.270 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 14:56:59.272 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 2 msec}
2023-06-14 14:58:26.889 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 14:58:26.890 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 14:58:26.891 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 14:58:39.441 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 14:58:39.443 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 14:58:39.447 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 14:58:39.483 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 14:58:39.484 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 14:58:39.485 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 14:58:39.487 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 14:58:39.547 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
21. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 14:58:59.826 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 14:58:59.828 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 14:58:59.829 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 14:59:04.103 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 14:59:04.105 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 14:59:04.106 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 14:59:22.740 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 14:59:22.742 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 14:59:22.744 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 14:59:29.101 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 14:59:29.102 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 14:59:29.104 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 14:59:35.111 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 14:59:35.113 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 14:59:35.115 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 14:59:56.526 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 14:59:56.527 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 14:59:56.528 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 15:00:03.538 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:00:03.539 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:00:03.540 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 15:00:54.730 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:00:54.731 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:00:54.733 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 2 msec}
2023-06-14 15:00:59.059 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 15:00:59.060 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:00:59.065 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 15:00:59.097 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 15:00:59.097 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 15:00:59.099 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 15:00:59.100 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:00:59.144 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
21. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 15:01:20.214 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@af2626c1
2023-06-14 15:01:20.214 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-14 15:01:20.215 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:01:20.221 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 6 msec}
2023-06-14 15:01:20.224 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-14 15:01:20.805 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4644e664
2023-06-14 15:01:20.805 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-14 15:01:20.806 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:01:20.807 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-14 15:01:20.808 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 0 msec}
2023-06-14 15:04:32.168 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:04:32.170 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:04:32.198 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 28 msec}
2023-06-14 15:05:07.605 INFO  [MessageBroker-2] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 3, active threads = 1, queued tasks = 0, completed tasks = 2]
2023-06-14 15:06:57.739 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:06:57.741 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:06:57.742 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 15:07:46.418 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:07:46.419 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:07:46.421 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 15:08:04.735 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:08:04.736 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:08:04.738 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 15:09:56.694 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:09:56.695 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:09:56.696 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 15:10:00.447 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f22bf622
2023-06-14 15:10:00.449 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:10:00.454 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영'
	order by 1
 {executed in 2 msec}
2023-06-14 15:10:00.485 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@585db648
2023-06-14 15:10:00.485 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '구진영' order by a.base_year desc,a.acc_time desc
2023-06-14 15:10:00.487 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '구진영' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:10:00.488 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '구진영' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:10:00.533 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
31. select * from TBL_FILE_INFO where file_id = '구진영'
 {executed in 0 msec}
2023-06-14 15:10:00.543 ERROR [http-nio-10010-exec-8] [c.p.d.core.error.GlobalExceptionHandler] - handleEntityNotFoundException
java.io.FileNotFoundException: URL [file:c:/bus/image/70627f87-9103-4acb-90cd-360b8bff9bbd.jpg] cannot be resolved in the file system for checking its content length
	at org.springframework.core.io.AbstractFileResolvingResource.contentLength(AbstractFileResolvingResource.java:232)
	at org.springframework.http.converter.ResourceHttpMessageConverter.getContentLength(ResourceHttpMessageConverter.java:116)
	at org.springframework.http.converter.ResourceHttpMessageConverter.getContentLength(ResourceHttpMessageConverter.java:45)
	at org.springframework.http.converter.AbstractHttpMessageConverter.addDefaultHeaders(AbstractHttpMessageConverter.java:260)
	at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:211)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:294)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:181)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:123)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor152.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$4bce7824.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-14 15:10:00.560 WARN  [http-nio-10010-exec-8] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [java.io.FileNotFoundException: URL [file:c:/bus/image/70627f87-9103-4acb-90cd-360b8bff9bbd.jpg] cannot be resolved in the file system for checking its content length]
2023-06-14 15:10:12.145 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9e69650
2023-06-14 15:10:12.147 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:10:12.150 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경배'
	order by 1
 {executed in 2 msec}
2023-06-14 15:10:12.178 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@70185676
2023-06-14 15:10:12.178 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경배' order by a.base_year desc,a.acc_time desc
2023-06-14 15:10:12.179 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경배' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:10:12.181 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김경배' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-14 15:10:12.234 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
31. select * from TBL_FILE_INFO where file_id = '김경배'
 {executed in 1 msec}
2023-06-14 15:35:07.611 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 4, active threads = 1, queued tasks = 0, completed tasks = 3]
2023-06-14 15:41:55.512 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:41:55.514 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:41:55.539 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 25 msec}
2023-06-14 15:42:06.150 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fb1ff283
2023-06-14 15:42:06.151 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:42:06.154 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
41. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박용우' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박용우' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박용우' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박용우' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박용우' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박용우'
	order by 1
 {executed in 2 msec}
2023-06-14 15:42:06.184 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6151b2a9
2023-06-14 15:42:06.184 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '박용우' order by a.base_year desc,a.acc_time desc
2023-06-14 15:42:06.185 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '박용우' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:42:06.187 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '박용우' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 15:42:06.228 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
41. select * from TBL_FILE_INFO where file_id = '박용우'
 {executed in 0 msec}
2023-06-14 15:44:03.709 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:44:03.710 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:44:03.740 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 29 msec}
2023-06-14 15:44:13.103 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:44:13.105 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:44:13.107 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 15:45:07.084 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:45:07.085 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:45:07.086 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 15:45:23.881 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:45:23.882 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:45:23.883 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 15:45:33.456 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:45:33.456 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:45:33.458 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 15:45:34.786 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77ee8faa
2023-06-14 15:45:34.787 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:45:34.791 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석'
	order by 1
 {executed in 2 msec}
2023-06-14 15:45:34.816 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de204fd0
2023-06-14 15:45:34.816 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
2023-06-14 15:45:34.818 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:45:34.819 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 15:45:34.862 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where file_id = '강병석'
 {executed in 0 msec}
2023-06-14 15:45:55.565 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:45:55.566 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:45:55.567 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 15:45:57.797 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 15:45:57.798 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:45:57.801 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 15:45:57.827 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 15:45:57.827 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 15:45:57.829 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:45:57.830 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:45:57.873 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 1 msec}
2023-06-14 15:46:05.999 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:46:06.000 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:46:06.001 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 15:46:08.010 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 15:46:08.012 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:46:08.016 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 3 msec}
2023-06-14 15:46:08.027 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 1 msec}
2023-06-14 15:46:08.049 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 15:46:08.049 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 15:46:08.050 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:46:08.052 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 15:46:50.389 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:46:50.390 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:46:50.392 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 15:46:57.870 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 15:46:57.871 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:46:57.875 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 15:46:57.886 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 15:46:57.905 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 15:46:57.905 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 15:46:57.906 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:46:57.907 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:47:10.245 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:47:10.246 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:47:10.247 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 15:47:11.979 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 15:47:11.980 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:47:11.983 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 15:47:11.994 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 1 msec}
2023-06-14 15:47:12.012 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 15:47:12.012 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 15:47:12.013 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:47:12.014 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:47:25.103 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:47:25.104 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:47:25.105 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 15:47:26.039 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 15:47:26.040 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:47:26.043 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 15:47:26.055 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 15:47:26.077 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 15:47:26.077 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 15:47:26.079 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 15:47:26.080 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 15:47:31.854 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:47:31.855 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:47:31.856 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 15:47:32.894 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 15:47:32.898 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:47:32.902 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 15:47:32.914 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 15:47:32.933 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 15:47:32.933 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 15:47:32.935 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-14 15:47:32.937 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:47:40.546 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:47:40.547 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:47:40.549 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 15:47:41.258 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 15:47:41.260 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:47:41.263 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 15:47:41.273 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 15:47:41.290 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 15:47:41.290 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 15:47:41.291 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:47:41.293 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:48:05.148 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:48:05.150 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:48:05.151 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 15:48:07.653 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@faceefd3
2023-06-14 15:48:07.655 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:48:07.659 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현'
	order by 1
 {executed in 2 msec}
2023-06-14 15:48:07.686 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6100aff9
2023-06-14 15:48:07.687 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
2023-06-14 15:48:07.688 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:48:07.689 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:48:07.735 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where file_id = '권오현'
 {executed in 0 msec}
2023-06-14 15:48:31.042 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:48:31.042 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:48:31.044 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 15:49:01.644 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:49:01.645 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:49:01.647 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 15:49:08.776 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 15:49:08.777 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:49:08.780 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 15:49:08.808 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 15:49:08.808 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 15:49:08.809 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:49:08.810 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:49:08.862 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 15:51:04.183 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:51:04.184 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:51:04.185 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 15:51:06.860 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:51:06.861 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:51:06.863 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 15:51:09.056 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 15:51:09.057 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:51:09.060 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 15:51:09.086 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 15:51:09.086 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 15:51:09.087 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:51:09.089 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:51:09.130 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 15:51:21.112 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:51:21.113 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:51:21.114 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 15:51:22.809 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 15:51:22.810 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:51:22.814 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 15:51:22.826 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 15:51:22.844 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 15:51:22.844 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 15:51:22.845 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:51:22.846 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:51:43.587 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:51:43.588 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:51:43.589 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 15:51:45.003 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 15:51:45.004 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:51:45.007 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 15:51:45.016 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 1 msec}
2023-06-14 15:51:45.035 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 15:51:45.035 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 15:51:45.036 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:51:45.037 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:52:33.447 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:52:33.448 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:52:33.450 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 15:52:35.984 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77ee8faa
2023-06-14 15:52:35.986 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:52:35.989 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석'
	order by 1
 {executed in 2 msec}
2023-06-14 15:52:36.017 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de204fd0
2023-06-14 15:52:36.017 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
2023-06-14 15:52:36.018 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:52:36.019 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:52:36.059 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where file_id = '강병석'
 {executed in 0 msec}
2023-06-14 15:53:04.103 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:53:04.104 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:53:04.105 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 15:53:12.976 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:53:12.977 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:53:12.978 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 15:53:54.697 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:53:54.698 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:53:54.699 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 15:54:09.643 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:54:09.644 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:54:09.645 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 15:54:32.816 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:54:32.816 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:54:32.817 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 15:54:42.066 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:54:42.066 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:54:42.068 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 15:54:43.358 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77ee8faa
2023-06-14 15:54:43.360 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:54:43.363 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석'
	order by 1
 {executed in 2 msec}
2023-06-14 15:54:43.388 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de204fd0
2023-06-14 15:54:43.389 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
2023-06-14 15:54:43.390 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:54:43.391 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:54:43.432 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where file_id = '강병석'
 {executed in 0 msec}
2023-06-14 15:55:41.017 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:55:41.018 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:55:41.019 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 15:55:41.998 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 15:55:41.999 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:55:42.002 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 15:55:42.029 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 15:55:42.029 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 15:55:42.030 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:55:42.031 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:55:42.074 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 15:56:03.664 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:56:03.665 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:56:03.666 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 15:56:23.184 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 15:56:23.185 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:56:23.186 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 15:56:24.460 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 15:56:24.461 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 15:56:24.464 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 15:56:24.491 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 15:56:24.492 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 15:56:24.493 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 15:56:24.494 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:56:24.542 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 15:56:37.174 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@625631bf
2023-06-14 15:56:37.175 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:56:37.178 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱'
	order by 1
 {executed in 2 msec}
2023-06-14 15:56:37.204 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c887f1e5
2023-06-14 15:56:37.204 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
2023-06-14 15:56:37.205 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:56:37.207 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 15:56:37.257 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where file_id = '고상욱'
 {executed in 0 msec}
2023-06-14 15:59:16.640 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@457be797
2023-06-14 15:59:16.642 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 15:59:16.646 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김도근'
	order by 1
 {executed in 2 msec}
2023-06-14 15:59:16.678 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@abada7bd
2023-06-14 15:59:16.678 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김도근' order by a.base_year desc,a.acc_time desc
2023-06-14 15:59:16.680 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김도근' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-14 15:59:16.681 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김도근' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 15:59:16.766 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where file_id = '김도근'
 {executed in 1 msec}
2023-06-14 16:05:07.603 INFO  [MessageBroker-3] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 5, active threads = 1, queued tasks = 0, completed tasks = 4]
2023-06-14 16:21:10.119 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:21:10.120 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:21:10.152 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
61. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 32 msec}
2023-06-14 16:21:12.028 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77ee8faa
2023-06-14 16:21:12.029 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:21:12.034 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석'
	order by 1
 {executed in 3 msec}
2023-06-14 16:21:12.059 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de204fd0
2023-06-14 16:21:12.060 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
2023-06-14 16:21:12.061 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
61. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:21:12.062 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
61. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:21:12.102 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
61. select * from TBL_FILE_INFO where file_id = '강병석'
 {executed in 0 msec}
2023-06-14 16:21:12.953 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 16:21:12.954 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:21:12.958 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 16:21:12.983 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 16:21:12.983 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 16:21:12.984 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
61. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:21:12.986 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
61. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 16:21:13.029 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
61. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 16:22:45.535 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:22:45.536 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
70. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:22:45.558 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
70. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 21 msec}
2023-06-14 16:23:32.949 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:23:32.951 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:23:32.980 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 29 msec}
2023-06-14 16:23:42.368 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:23:42.369 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 16:23:42.370 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 16:23:59.996 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:23:59.997 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:23:59.999 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 16:24:27.525 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:24:27.527 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 16:24:27.528 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 16:25:05.583 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:25:05.584 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:25:05.586 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 16:25:33.155 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:25:33.156 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:25:33.157 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 16:25:41.794 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:25:41.794 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 16:25:41.795 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 16:25:49.373 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:25:49.374 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:25:49.376 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 16:26:21.747 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 16:26:21.748 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 16:26:21.751 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 16:26:21.778 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 16:26:21.778 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 16:26:21.780 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:26:21.781 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:26:21.823 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 1 msec}
2023-06-14 16:27:17.655 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:27:17.656 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 16:27:17.658 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 16:27:19.185 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 16:27:19.186 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 16:27:19.190 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 16:27:19.201 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 1 msec}
2023-06-14 16:27:19.219 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 16:27:19.219 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 16:27:19.220 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:27:19.222 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 16:27:24.890 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@625631bf
2023-06-14 16:27:24.892 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 16:27:24.896 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱'
	order by 1
 {executed in 3 msec}
2023-06-14 16:27:24.932 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c887f1e5
2023-06-14 16:27:24.932 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
2023-06-14 16:27:24.933 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:27:24.935 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 16:27:24.982 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select * from TBL_FILE_INFO where file_id = '고상욱'
 {executed in 1 msec}
2023-06-14 16:27:28.957 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a64c6e5e
2023-06-14 16:27:28.957 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-06-14 16:27:28.958 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 16:27:28.964 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 4 msec}
2023-06-14 16:27:28.967 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-14 16:27:42.868 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:27:42.869 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:27:42.870 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 16:27:44.127 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 16:27:44.128 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:27:44.131 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 16:27:44.157 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 16:27:44.157 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 16:27:44.158 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:27:44.159 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:27:44.207 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 16:27:45.771 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f05326b3
2023-06-14 16:27:45.772 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:27:45.775 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고현기' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고현기' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고현기' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고현기' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고현기' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고현기'
	order by 1
 {executed in 2 msec}
2023-06-14 16:27:45.798 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5684e6d9
2023-06-14 16:27:45.799 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고현기' order by a.base_year desc,a.acc_time desc
2023-06-14 16:27:45.800 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고현기' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:27:45.801 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고현기' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:27:45.844 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select * from TBL_FILE_INFO where file_id = '고현기'
 {executed in 0 msec}
2023-06-14 16:27:46.688 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f5fce072
2023-06-14 16:27:46.689 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:27:46.692 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='국수현'
	order by 1
 {executed in 2 msec}
2023-06-14 16:27:46.726 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5c2ea098
2023-06-14 16:27:46.726 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' order by a.base_year desc,a.acc_time desc
2023-06-14 16:27:46.728 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:27:46.729 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '국수현' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:27:46.789 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select * from TBL_FILE_INFO where file_id = '국수현'
 {executed in 0 msec}
2023-06-14 16:27:48.012 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@39f31d11
2023-06-14 16:27:48.012 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '국수현' ORDER BY b.base_ym desc
2023-06-14 16:27:48.013 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:27:48.018 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '국수현' ORDER BY b.base_ym desc
 {executed in 4 msec}
2023-06-14 16:27:48.019 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '국수현' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-14 16:28:46.934 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:28:46.934 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 16:28:46.935 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 16:28:48.854 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 16:28:48.855 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 16:28:48.859 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 16:28:48.887 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 16:28:48.887 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 16:28:48.888 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:28:48.889 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:28:48.935 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 16:28:52.622 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:28:52.623 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 16:28:52.624 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 16:28:53.626 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 16:28:53.627 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 16:28:53.630 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 16:28:53.639 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 16:28:53.656 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 16:28:53.656 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 16:28:53.657 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:28:53.658 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:28:55.866 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@faceefd3
2023-06-14 16:28:55.867 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:28:55.870 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현'
	order by 1
 {executed in 2 msec}
2023-06-14 16:28:55.894 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6100aff9
2023-06-14 16:28:55.894 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
2023-06-14 16:28:55.896 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:28:55.897 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 16:28:55.942 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select * from TBL_FILE_INFO where file_id = '권오현'
 {executed in 0 msec}
2023-06-14 16:28:56.863 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3ec52c72
2023-06-14 16:28:56.863 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
2023-06-14 16:28:56.864 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:28:56.867 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-14 16:28:56.870 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-14 16:29:07.961 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6100aff9
2023-06-14 16:29:07.961 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
2023-06-14 16:29:07.962 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:29:07.963 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:29:07.964 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 16:29:09.739 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3ec52c72
2023-06-14 16:29:09.739 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
2023-06-14 16:29:09.740 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 16:29:09.743 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-14 16:29:09.745 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권오현' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-14 16:29:10.817 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d5e3ec15
2023-06-14 16:29:10.817 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '권오현' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-14 16:29:10.817 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 16:29:10.818 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '권오현' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 0 msec}
2023-06-14 16:29:10.820 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '권오현' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 0 msec}
2023-06-14 16:29:12.001 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6100aff9
2023-06-14 16:29:12.001 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
2023-06-14 16:29:12.002 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:29:12.003 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 16:29:12.004 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 16:29:34.053 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:29:34.053 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 16:29:34.054 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 16:29:35.418 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 16:29:35.419 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:29:35.425 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 3 msec}
2023-06-14 16:29:35.452 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 16:29:35.452 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 16:29:35.453 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:29:35.454 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:29:35.495 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 16:29:36.653 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@af2626c1
2023-06-14 16:29:36.654 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-14 16:29:36.655 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 16:29:36.658 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-14 16:29:36.660 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-14 16:29:39.589 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4644e664
2023-06-14 16:29:39.589 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-14 16:29:39.590 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:29:39.591 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-14 16:29:39.592 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-14 16:29:42.818 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 16:29:42.818 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 16:29:42.819 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 16:29:42.819 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 16:29:42.820 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:29:42.864 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77ee8faa
2023-06-14 16:29:42.867 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석'
	order by 1
 {executed in 2 msec}
2023-06-14 16:29:42.893 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de204fd0
2023-06-14 16:29:42.893 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
2023-06-14 16:29:42.894 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 16:29:42.895 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 16:29:42.940 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select * from TBL_FILE_INFO where file_id = '강병석'
 {executed in 0 msec}
2023-06-14 16:31:02.257 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:31:02.258 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:31:02.259 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 16:31:06.279 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 16:31:06.280 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 16:31:06.284 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 3 msec}
2023-06-14 16:31:06.311 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 16:31:06.311 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 16:31:06.313 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:31:06.314 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:31:06.359 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 16:31:19.421 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:31:19.422 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:31:19.424 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 16:31:21.711 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 16:31:21.712 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:31:21.715 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 16:31:21.726 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 16:31:21.745 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 16:31:21.745 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 16:31:21.746 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:31:21.747 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 16:31:38.466 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:31:38.470 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 4 msec}
2023-06-14 16:31:38.471 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 16:32:20.831 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:32:20.831 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 16:32:20.833 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
2023-06-14 16:35:07.611 INFO  [MessageBroker-2] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 6, active threads = 1, queued tasks = 0, completed tasks = 5]
2023-06-14 16:38:03.550 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:38:03.551 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 16:38:03.552 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 16:38:08.834 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 16:38:08.835 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:38:08.839 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 3 msec}
2023-06-14 16:38:08.867 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 16:38:08.867 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 16:38:08.868 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:38:08.870 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-14 16:38:08.918 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 16:38:40.567 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:38:40.568 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:38:40.569 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 16:38:54.332 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 16:38:54.333 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 16:38:54.335 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 1 msec}
2023-06-14 16:38:54.363 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 16:38:54.364 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 16:38:54.365 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 16:38:54.366 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:38:54.407 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
71. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 16:39:47.384 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:39:47.385 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:39:47.386 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 16:42:44.114 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 16:42:44.116 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
80. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 16:42:44.137 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
80. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 21 msec}
2023-06-14 16:43:05.998 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ff0b917c
2023-06-14 16:43:05.999 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
81. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 16:43:06.003 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
81. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김성취'
	order by 1
 {executed in 2 msec}
2023-06-14 16:43:06.031 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@653d51a2
2023-06-14 16:43:06.031 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김성취' order by a.base_year desc,a.acc_time desc
2023-06-14 16:43:06.032 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김성취' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 16:43:06.034 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
81. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '김성취' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 16:43:06.090 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
81. select * from TBL_FILE_INFO where file_id = '김성취'
 {executed in 0 msec}
2023-06-14 18:23:58.813 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 8, active threads = 1, queued tasks = 0, completed tasks = 7]
2023-06-14 18:23:58.829 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 8, active threads = 1, queued tasks = 0, completed tasks = 8]
2023-06-14 18:24:18.223 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
111. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-06-14 18:24:18.225 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
111. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-06-14 18:24:18.230 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-14 18:24:18.448 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$GMYfRzDU1T5Fhx240Y4Jguo1t4BDnc1v./Q.4ddAu2g/pzDiqNgAC
2023-06-14 18:24:18.665 INFO  [http-nio-10010-exec-7] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-14 18:24:18.667 INFO  [UserConnection-2] [com.pjy.dashboard.service.ChatService] - # sise thread start : [p00139]
2023-06-14 18:24:18.667 INFO  [UserConnection-2] [com.pjy.dashboard.service.ChatService] - # sise threaditemList = null 
2023-06-14 18:24:21.279 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 18:24:21.280 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
111. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 18:24:21.311 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
111. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 30 msec}
2023-06-14 18:24:35.850 INFO  [RMI TCP Connection(250)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-06-14 18:24:35.875 INFO  [RMI TCP Connection(250)-127.0.0.1] [o.s.m.s.b.SimpleBrokerMessageHandler] - Stopping...
2023-06-14 18:24:35.875 INFO  [RMI TCP Connection(250)-127.0.0.1] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2023-06-14 18:24:35.875 INFO  [RMI TCP Connection(250)-127.0.0.1] [o.s.m.s.b.SimpleBrokerMessageHandler] - Stopped.
2023-06-14 18:24:35.983 INFO  [RMI TCP Connection(250)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'brokerChannelExecutor'
2023-06-14 18:24:35.983 INFO  [RMI TCP Connection(250)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Shutting down ExecutorService 'messageBrokerTaskScheduler'
2023-06-14 18:24:35.986 INFO  [RMI TCP Connection(250)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-06-14 18:24:35.989 INFO  [RMI TCP Connection(250)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'clientOutboundChannelExecutor'
2023-06-14 18:24:35.989 INFO  [RMI TCP Connection(250)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'clientInboundChannelExecutor'
2023-06-14 18:24:35.996 INFO  [RMI TCP Connection(250)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-06-14 18:24:36.012 INFO  [RMI TCP Connection(250)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-06-14 18:24:36.014 INFO  [UserConnection-2] [com.pjy.dashboard.service.ChatService] - ## thread end sise . UserConnection-2[178]
2023-06-14 18:24:36.200 INFO  [RMI TCP Connection(250)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-06-14 18:24:43.494 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 20196 (E:\bus\dashboard\dashboard\target\classes started by admin in E:\bus\dashboard\dashboard)
2023-06-14 18:24:43.501 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-14 18:24:43.571 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-14 18:24:43.571 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-14 18:24:45.796 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-14 18:24:45.797 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-14 18:24:46.012 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 200ms. Found 3 JPA repository interfaces.
2023-06-14 18:24:46.489 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-14 18:24:46.489 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-14 18:24:46.737 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 18:24:46.737 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 18:24:46.738 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 18:24:46.738 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 248ms. Found 0 JDBC repository interfaces.
2023-06-14 18:24:47.274 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-14 18:24:47.348 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-14 18:24:47.349 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-14 18:24:47.349 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-14 18:24:47.349 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-14 18:24:47.349 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 18:24:47.349 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-14 18:24:47.349 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-14 18:24:47.349 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 18:24:47.349 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 18:24:47.350 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 18:24:47.350 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-14 18:24:47.350 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 18:24:47.607 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$db3e03b0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 18:24:47.669 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-14 18:24:47.770 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$c53467dd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 18:24:47.866 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 18:24:47.868 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@4f59b7a2' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 18:24:47.873 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$ea090a8f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 18:24:47.886 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$f5e22a5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 18:24:47.890 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 18:24:47.891 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 18:24:47.914 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$2c869fa3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 18:24:47.946 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$ac06ecd5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 18:24:48.098 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-14 18:24:48.104 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-14 18:24:48.618 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-14 18:24:48.636 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-14 18:24:48.648 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-14 18:24:48.648 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-14 18:24:49.065 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-14 18:24:49.077 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-14 18:24:49.077 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 5506 ms
2023-06-14 18:24:50.009 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@1b6c49b6 with name: jasyptStringEncryptor
2023-06-14 18:24:50.090 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-14 18:24:50.208 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 12 msec}
2023-06-14 18:24:50.214 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-14 18:24:51.028 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-14 18:24:51.707 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-14 18:24:51.818 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-14 18:24:51.821 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-14 18:24:52.012 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-14 18:24:52.579 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 18:24:52.598 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-14 18:24:53.458 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 18:24:53.461 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 2 msec}
2023-06-14 18:24:53.548 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-14 18:24:53.846 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-14 18:24:54.380 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'clientInboundChannelExecutor'
2023-06-14 18:24:54.432 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'clientOutboundChannelExecutor'
2023-06-14 18:24:55.777 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-14 18:24:55.778 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-14 18:24:56.012 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-14 18:24:56.012 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-14 18:24:56.012 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-14 18:24:56.012 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-14 18:24:56.012 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-14 18:24:56.012 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-14 18:24:56.012 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-14 18:24:56.013 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-14 18:24:56.013 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-14 18:24:56.225 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5029c803, org.springframework.security.web.context.SecurityContextPersistenceFilter@874ce59, org.springframework.security.web.header.HeaderWriterFilter@3ec8d012, org.springframework.web.filter.CorsFilter@6b4c0e7a, org.springframework.security.web.authentication.logout.LogoutFilter@53fb32c6, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@722f6cb1, org.springframework.security.web.session.ConcurrentSessionFilter@1d4b2b2e, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@574f8352, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@348bf52b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@205e7ef8, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7aaf9b7b, org.springframework.security.web.session.SessionManagementFilter@67ebe1a0, org.springframework.security.web.access.ExceptionTranslationFilter@767e90e1, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@7d257a72]
2023-06-14 18:24:56.248 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-14 18:24:56.309 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService 'messageBrokerTaskScheduler'
2023-06-14 18:24:56.375 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'brokerChannelExecutor'
2023-06-14 18:24:56.909 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-14 18:24:56.991 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-14 18:24:57.514 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 18:24:58.500 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-14 18:24:58.531 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-14 18:24:58.677 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Starting...
2023-06-14 18:24:58.677 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2023-06-14 18:24:58.679 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Started.
2023-06-14 18:24:58.690 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-14 18:24:58.693 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-14 18:24:58.739 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-14 18:24:58.743 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 15.913 seconds (JVM running for 17.934)
2023-06-14 18:24:58.744 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-14 18:24:58.744 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-14 18:24:58.744 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-14 18:24:59.974 INFO  [RMI TCP Connection(6)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-14 18:24:59.974 INFO  [RMI TCP Connection(6)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-14 18:25:00.002 INFO  [RMI TCP Connection(6)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 28 ms
2023-06-14 18:25:01.998 WARN  [http-nio-10010-exec-1] [o.a.catalina.util.SessionIdGeneratorBase] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [186] milliseconds.
2023-06-14 18:25:05.961 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 18:25:05.979 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-06-14 18:25:06.028 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-14 18:25:06.261 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$ZBsstwZmhPLR5D7dPdsNQuPzbaPL5C2yh7/S.PeFSCyOZV8iGrWRO
2023-06-14 18:25:06.526 INFO  [http-nio-10010-exec-1] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-14 18:25:06.641 INFO  [UserConnection-1] [com.pjy.dashboard.service.ChatService] - # sise thread start : [p00139]
2023-06-14 18:25:06.642 INFO  [UserConnection-1] [com.pjy.dashboard.service.ChatService] - # sise threaditemList = null 
2023-06-14 18:25:10.026 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 18:25:10.061 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 18:25:10.121 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 58 msec}
2023-06-14 18:25:12.977 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 18:25:13.138 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 18:25:13.148 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 4 msec}
2023-06-14 18:25:13.215 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 18:25:13.216 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 18:25:13.220 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 18:25:13.221 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 18:25:13.278 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 1 msec}
2023-06-14 18:25:56.385 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2023-06-14 18:55:56.381 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 2, active threads = 1, queued tasks = 0, completed tasks = 1]
2023-06-14 19:16:35.924 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 9100 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-14 19:16:35.933 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-14 19:16:36.012 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-14 19:16:36.013 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-14 19:16:37.465 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-14 19:16:37.466 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-14 19:16:37.635 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 157ms. Found 3 JPA repository interfaces.
2023-06-14 19:16:38.328 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-14 19:16:38.329 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-14 19:16:38.389 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 19:16:38.390 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 19:16:38.391 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 19:16:38.391 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 61ms. Found 0 JDBC repository interfaces.
2023-06-14 19:16:38.954 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-14 19:16:39.027 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-14 19:16:39.028 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-14 19:16:39.029 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-14 19:16:39.029 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-14 19:16:39.029 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 19:16:39.029 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-14 19:16:39.029 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-14 19:16:39.029 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 19:16:39.029 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 19:16:39.029 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 19:16:39.030 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-14 19:16:39.030 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 19:16:39.102 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$f78ec88] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:16:39.167 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-14 19:16:39.283 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$f96f50b5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:16:39.372 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:16:39.374 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@2ef355f5' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:16:39.380 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$1e43f367] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:16:39.390 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$43990b7d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:16:39.394 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:16:39.396 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:16:39.424 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$60c1887b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:16:39.456 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$e041d5ad] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:16:39.628 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-14 19:16:39.637 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-14 19:16:40.623 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-14 19:16:40.645 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-14 19:16:40.659 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-14 19:16:40.659 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-14 19:16:41.196 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-14 19:16:41.207 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-14 19:16:41.207 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 5194 ms
2023-06-14 19:16:42.177 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@df5132c with name: jasyptStringEncryptor
2023-06-14 19:16:42.242 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-14 19:16:42.344 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 9 msec}
2023-06-14 19:16:42.349 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-14 19:16:43.261 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-14 19:16:43.603 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-14 19:16:43.692 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-14 19:16:43.694 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-14 19:16:43.857 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-14 19:16:44.109 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:16:44.126 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-14 19:16:44.924 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:16:44.927 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 0 msec}
2023-06-14 19:16:45.002 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-14 19:16:45.276 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-14 19:16:45.567 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'clientInboundChannelExecutor'
2023-06-14 19:16:45.583 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'clientOutboundChannelExecutor'
2023-06-14 19:16:46.939 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-14 19:16:46.940 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-14 19:16:47.176 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-14 19:16:47.178 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-14 19:16:47.179 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-14 19:16:47.179 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-14 19:16:47.179 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-14 19:16:47.179 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-14 19:16:47.179 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-14 19:16:47.179 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-14 19:16:47.180 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-14 19:16:47.399 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@29e140e8, org.springframework.security.web.context.SecurityContextPersistenceFilter@50c3a62e, org.springframework.security.web.header.HeaderWriterFilter@aaeb362, org.springframework.web.filter.CorsFilter@54fdeb6d, org.springframework.security.web.authentication.logout.LogoutFilter@3085744f, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@73c39daa, org.springframework.security.web.session.ConcurrentSessionFilter@384dc8a6, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@45c7457a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4955a1f8, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4806144f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1420e4c7, org.springframework.security.web.session.SessionManagementFilter@1a79d328, org.springframework.security.web.access.ExceptionTranslationFilter@79f5950d, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@7576cbac]
2023-06-14 19:16:47.422 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-14 19:16:47.469 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService 'messageBrokerTaskScheduler'
2023-06-14 19:16:47.540 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'brokerChannelExecutor'
2023-06-14 19:16:48.035 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-14 19:16:48.109 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-14 19:16:48.797 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:16:49.909 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-14 19:16:49.939 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-14 19:16:50.077 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Starting...
2023-06-14 19:16:50.078 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2023-06-14 19:16:50.079 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Started.
2023-06-14 19:16:50.092 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-14 19:16:50.094 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-14 19:16:50.147 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-14 19:16:50.151 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 14.988 seconds (JVM running for 16.439)
2023-06-14 19:16:50.152 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-14 19:16:50.152 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-14 19:16:50.152 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-14 19:16:51.264 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-14 19:16:51.265 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-14 19:16:51.294 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 29 ms
2023-06-14 19:17:05.774 WARN  [http-nio-10010-exec-1] [o.a.catalina.util.SessionIdGeneratorBase] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [195] milliseconds.
2023-06-14 19:17:05.918 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-14 19:17:05.919 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-14 19:17:05.919 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-14 19:17:05.919 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-14 19:17:05.920 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-14 19:17:08.064 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:17:08.087 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-06-14 19:17:08.145 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-14 19:17:08.355 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$EQIjTLQE49kW7MQ0QpT5sedaJfArnNa.Oh0ewjEumVtrP1ROWcnAS
2023-06-14 19:17:08.569 INFO  [http-nio-10010-exec-10] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-14 19:17:08.622 INFO  [UserConnection-1] [com.pjy.dashboard.service.ChatService] - # sise thread start : [p00139]
2023-06-14 19:17:08.623 INFO  [UserConnection-1] [com.pjy.dashboard.service.ChatService] - # sise threaditemList = null 
2023-06-14 19:17:13.627 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d9026782
2023-06-14 19:17:13.711 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBL_employeeInfo a where   a.company_no = '100' order by a.emp_no
2023-06-14 19:17:13.739 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 3 msec}
2023-06-14 19:17:13.747 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBL_employeeInfo a where   a.company_no = '100' order by a.emp_no
 {executed in 7 msec}
2023-06-14 19:17:13.761 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBL_employeeInfo a where   a.company_no = '100' order by a.emp_no
 {executed in 4 msec}
2023-06-14 19:17:18.540 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 19:17:18.542 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:17:18.582 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 39 msec}
2023-06-14 19:17:19.963 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 19:17:20.169 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:17:20.180 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 4 msec}
2023-06-14 19:17:20.255 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 19:17:20.255 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 19:17:20.258 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:17:20.261 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:17:20.346 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 19:17:22.569 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@af2626c1
2023-06-14 19:17:22.571 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-14 19:17:22.572 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:17:22.578 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 4 msec}
2023-06-14 19:17:22.584 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 6 msec}
2023-06-14 19:17:26.456 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4644e664
2023-06-14 19:17:26.457 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-14 19:17:26.458 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:17:26.461 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-14 19:17:26.464 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 2 msec}
2023-06-14 19:17:27.623 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 19:17:27.623 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 19:17:27.625 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:17:27.626 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:17:27.629 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:17:29.702 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@af2626c1
2023-06-14 19:17:29.703 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-14 19:17:29.704 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:17:29.708 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-14 19:17:29.712 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-14 19:17:30.254 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4644e664
2023-06-14 19:17:30.255 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-14 19:17:30.256 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:17:30.259 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-14 19:17:30.261 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-14 19:17:31.339 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 19:17:31.339 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 19:17:31.341 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:17:31.343 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:17:31.345 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:17:36.196 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77ee8faa
2023-06-14 19:17:36.198 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:17:36.205 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석'
	order by 1
 {executed in 4 msec}
2023-06-14 19:17:36.253 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de204fd0
2023-06-14 19:17:36.254 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
2023-06-14 19:17:36.256 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:17:36.258 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:17:36.314 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강병석'
 {executed in 0 msec}
2023-06-14 19:17:36.319 ERROR [http-nio-10010-exec-5] [c.p.d.core.error.GlobalExceptionHandler] - handleEntityNotFoundException
java.io.FileNotFoundException: URL [file:c:/bus/image/default.JPG] cannot be resolved in the file system for checking its content length
	at org.springframework.core.io.AbstractFileResolvingResource.contentLength(AbstractFileResolvingResource.java:232)
	at org.springframework.http.converter.ResourceHttpMessageConverter.getContentLength(ResourceHttpMessageConverter.java:116)
	at org.springframework.http.converter.ResourceHttpMessageConverter.getContentLength(ResourceHttpMessageConverter.java:45)
	at org.springframework.http.converter.AbstractHttpMessageConverter.addDefaultHeaders(AbstractHttpMessageConverter.java:260)
	at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:211)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:294)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:181)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:123)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c8112e66.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-14 19:17:36.331 WARN  [http-nio-10010-exec-5] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [java.io.FileNotFoundException: URL [file:c:/bus/image/default.JPG] cannot be resolved in the file system for checking its content length]
2023-06-14 19:17:38.022 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@625631bf
2023-06-14 19:17:38.024 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:17:38.028 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱'
	order by 1
 {executed in 2 msec}
2023-06-14 19:17:38.055 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c887f1e5
2023-06-14 19:17:38.056 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
2023-06-14 19:17:38.059 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-14 19:17:38.061 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-14 19:17:38.129 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '고상욱'
 {executed in 0 msec}
2023-06-14 19:17:38.131 ERROR [http-nio-10010-exec-10] [c.p.d.core.error.GlobalExceptionHandler] - handleEntityNotFoundException
java.io.FileNotFoundException: URL [file:c:/bus/image/default.JPG] cannot be resolved in the file system for checking its content length
	at org.springframework.core.io.AbstractFileResolvingResource.contentLength(AbstractFileResolvingResource.java:232)
	at org.springframework.http.converter.ResourceHttpMessageConverter.getContentLength(ResourceHttpMessageConverter.java:116)
	at org.springframework.http.converter.ResourceHttpMessageConverter.getContentLength(ResourceHttpMessageConverter.java:45)
	at org.springframework.http.converter.AbstractHttpMessageConverter.addDefaultHeaders(AbstractHttpMessageConverter.java:260)
	at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:211)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:294)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:181)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:123)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$c8112e66.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-14 19:17:38.134 WARN  [http-nio-10010-exec-10] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [java.io.FileNotFoundException: URL [file:c:/bus/image/default.JPG] cannot be resolved in the file system for checking its content length]
2023-06-14 19:17:47.542 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2023-06-14 19:18:11.006 INFO  [RMI TCP Connection(14)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-06-14 19:18:11.009 INFO  [RMI TCP Connection(14)-127.0.0.1] [o.s.m.s.b.SimpleBrokerMessageHandler] - Stopping...
2023-06-14 19:18:11.009 INFO  [RMI TCP Connection(14)-127.0.0.1] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2023-06-14 19:18:11.009 INFO  [RMI TCP Connection(14)-127.0.0.1] [o.s.m.s.b.SimpleBrokerMessageHandler] - Stopped.
2023-06-14 19:18:11.051 INFO  [RMI TCP Connection(14)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'brokerChannelExecutor'
2023-06-14 19:18:11.052 INFO  [RMI TCP Connection(14)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Shutting down ExecutorService 'messageBrokerTaskScheduler'
2023-06-14 19:18:11.053 INFO  [RMI TCP Connection(14)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-06-14 19:18:11.053 INFO  [UserConnection-1] [com.pjy.dashboard.service.ChatService] - ## thread end sise . UserConnection-1[72]
2023-06-14 19:18:11.055 INFO  [RMI TCP Connection(14)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'clientOutboundChannelExecutor'
2023-06-14 19:18:11.055 INFO  [RMI TCP Connection(14)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'clientInboundChannelExecutor'
2023-06-14 19:18:11.058 INFO  [RMI TCP Connection(14)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-06-14 19:18:11.068 INFO  [RMI TCP Connection(14)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-06-14 19:18:11.101 INFO  [RMI TCP Connection(14)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-06-14 19:18:15.659 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 17164 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-14 19:18:15.665 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-14 19:18:15.735 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-14 19:18:15.735 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-14 19:18:17.098 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-14 19:18:17.098 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-14 19:18:17.287 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 178ms. Found 3 JPA repository interfaces.
2023-06-14 19:18:17.683 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-14 19:18:17.684 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-14 19:18:17.742 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 19:18:17.742 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 19:18:17.743 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 19:18:17.743 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 59ms. Found 0 JDBC repository interfaces.
2023-06-14 19:18:18.240 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-14 19:18:18.315 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-14 19:18:18.316 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-14 19:18:18.316 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-14 19:18:18.316 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-14 19:18:18.316 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 19:18:18.317 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-14 19:18:18.317 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-14 19:18:18.317 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 19:18:18.317 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 19:18:18.317 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 19:18:18.317 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-14 19:18:18.317 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 19:18:18.401 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$909cda84] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:18:18.476 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-14 19:18:18.624 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$7a933eb1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:18:18.727 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:18:18.732 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@2e75f0f1' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:18:18.733 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$9f67e163] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:18:18.748 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$c4bcf979] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:18:18.752 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:18:18.754 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:18:18.808 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$e1e57677] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:18:18.916 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$6165c3a9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:18:19.219 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-14 19:18:19.226 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-14 19:18:19.867 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-14 19:18:19.886 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-14 19:18:19.898 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-14 19:18:19.898 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-14 19:18:20.312 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-14 19:18:20.328 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-14 19:18:20.328 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 4593 ms
2023-06-14 19:18:21.739 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@260d9ec7 with name: jasyptStringEncryptor
2023-06-14 19:18:21.816 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-14 19:18:21.955 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 11 msec}
2023-06-14 19:18:21.959 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-14 19:18:22.861 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-14 19:18:23.212 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-14 19:18:23.296 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-14 19:18:23.298 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-14 19:18:23.473 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-14 19:18:23.735 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:18:23.755 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-14 19:18:24.511 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:18:24.514 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-14 19:18:24.597 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-14 19:18:24.915 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-14 19:18:25.204 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'clientInboundChannelExecutor'
2023-06-14 19:18:25.226 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'clientOutboundChannelExecutor'
2023-06-14 19:18:26.231 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-14 19:18:26.232 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-14 19:18:26.444 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-14 19:18:26.444 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-14 19:18:26.444 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-14 19:18:26.445 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-14 19:18:26.445 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-14 19:18:26.445 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-14 19:18:26.445 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-14 19:18:26.445 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-14 19:18:26.445 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-14 19:18:26.646 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@46a49e59, org.springframework.security.web.context.SecurityContextPersistenceFilter@f3e5025, org.springframework.security.web.header.HeaderWriterFilter@60617bc7, org.springframework.web.filter.CorsFilter@16fec9fb, org.springframework.security.web.authentication.logout.LogoutFilter@27b1be3e, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@51220c5e, org.springframework.security.web.session.ConcurrentSessionFilter@48e71729, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@eeee7c7, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2ba8e408, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4c777b13, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@157b3da6, org.springframework.security.web.session.SessionManagementFilter@4a635a94, org.springframework.security.web.access.ExceptionTranslationFilter@15b8165c, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4a707d71]
2023-06-14 19:18:26.668 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-14 19:18:26.716 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService 'messageBrokerTaskScheduler'
2023-06-14 19:18:26.788 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'brokerChannelExecutor'
2023-06-14 19:18:27.416 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-14 19:18:27.584 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-14 19:18:28.182 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:18:29.477 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-14 19:18:29.528 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-14 19:18:29.730 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Starting...
2023-06-14 19:18:29.731 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2023-06-14 19:18:29.732 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Started.
2023-06-14 19:18:29.751 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-14 19:18:29.755 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-14 19:18:29.825 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-14 19:18:29.829 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 14.723 seconds (JVM running for 16.187)
2023-06-14 19:18:29.830 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-14 19:18:29.830 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-14 19:18:29.830 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-14 19:18:31.080 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-14 19:18:31.080 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-14 19:18:31.104 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 24 ms
2023-06-14 19:19:26.796 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2023-06-14 19:23:22.179 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 19:23:22.318 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:23:22.330 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 1 msec}
2023-06-14 19:23:22.416 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 19:23:22.457 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 19:23:22.468 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:23:22.472 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 19:23:22.637 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 1 msec}
2023-06-14 19:23:23.652 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77ee8faa
2023-06-14 19:23:23.653 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:23:23.661 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석'
	order by 1
 {executed in 6 msec}
2023-06-14 19:23:23.695 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de204fd0
2023-06-14 19:23:23.695 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
2023-06-14 19:23:23.696 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:23:23.697 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:23:23.767 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강병석'
 {executed in 0 msec}
2023-06-14 19:23:28.481 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f22bf622
2023-06-14 19:23:28.484 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:23:28.491 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='구진영'
	order by 1
 {executed in 4 msec}
2023-06-14 19:23:28.537 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@585db648
2023-06-14 19:23:28.537 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '구진영' order by a.base_year desc,a.acc_time desc
2023-06-14 19:23:28.540 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '구진영' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:23:28.542 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '구진영' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:23:28.614 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '구진영'
 {executed in 0 msec}
2023-06-14 19:23:28.621 ERROR [http-nio-10010-exec-9] [c.p.d.core.error.GlobalExceptionHandler] - handleEntityNotFoundException
java.io.FileNotFoundException: URL [file:c:/bus/image/70627f87-9103-4acb-90cd-360b8bff9bbd.jpg] cannot be resolved in the file system for checking its content length
	at org.springframework.core.io.AbstractFileResolvingResource.contentLength(AbstractFileResolvingResource.java:232)
	at org.springframework.http.converter.ResourceHttpMessageConverter.getContentLength(ResourceHttpMessageConverter.java:116)
	at org.springframework.http.converter.ResourceHttpMessageConverter.getContentLength(ResourceHttpMessageConverter.java:45)
	at org.springframework.http.converter.AbstractHttpMessageConverter.addDefaultHeaders(AbstractHttpMessageConverter.java:260)
	at org.springframework.http.converter.AbstractHttpMessageConverter.write(AbstractHttpMessageConverter.java:211)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:294)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:181)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:123)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$776d3187.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-14 19:23:28.638 WARN  [http-nio-10010-exec-9] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [java.io.FileNotFoundException: URL [file:c:/bus/image/70627f87-9103-4acb-90cd-360b8bff9bbd.jpg] cannot be resolved in the file system for checking its content length]
2023-06-14 19:23:30.016 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77ee8faa
2023-06-14 19:23:30.017 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:23:30.024 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석'
	order by 1
 {executed in 3 msec}
2023-06-14 19:23:30.040 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강병석'
 {executed in 0 msec}
2023-06-14 19:23:30.060 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de204fd0
2023-06-14 19:23:30.060 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
2023-06-14 19:23:30.061 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:23:30.062 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:23:32.720 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 19:23:32.722 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:23:32.727 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 3 msec}
2023-06-14 19:23:32.741 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 19:23:32.764 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 19:23:32.765 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 19:23:32.766 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:23:32.768 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:23:33.723 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77ee8faa
2023-06-14 19:23:33.725 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:23:33.731 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석'
	order by 1
 {executed in 3 msec}
2023-06-14 19:23:33.772 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de204fd0
2023-06-14 19:23:33.773 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
2023-06-14 19:23:33.775 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:23:33.777 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:23:33.836 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강병석'
 {executed in 0 msec}
2023-06-14 19:26:31.438 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@625631bf
2023-06-14 19:26:31.440 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:26:31.448 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱'
	order by 1
 {executed in 3 msec}
2023-06-14 19:26:31.490 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c887f1e5
2023-06-14 19:26:31.490 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
2023-06-14 19:26:31.492 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-14 19:26:31.495 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:26:31.587 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '고상욱'
 {executed in 0 msec}
2023-06-14 19:26:32.661 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77ee8faa
2023-06-14 19:26:32.664 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:26:32.673 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석'
	order by 1
 {executed in 6 msec}
2023-06-14 19:26:32.687 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강병석'
 {executed in 0 msec}
2023-06-14 19:26:32.712 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de204fd0
2023-06-14 19:26:32.713 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
2023-06-14 19:26:32.714 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 19:26:32.715 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:27:27.818 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@625631bf
2023-06-14 19:27:27.820 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:27:27.825 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱'
	order by 1
 {executed in 3 msec}
2023-06-14 19:27:27.843 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '고상욱'
 {executed in 1 msec}
2023-06-14 19:27:27.887 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c887f1e5
2023-06-14 19:27:27.888 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
2023-06-14 19:27:27.889 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:27:27.891 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 19:27:29.262 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77ee8faa
2023-06-14 19:27:29.264 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:27:29.271 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석'
	order by 1
 {executed in 5 msec}
2023-06-14 19:27:29.288 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강병석'
 {executed in 0 msec}
2023-06-14 19:27:29.318 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de204fd0
2023-06-14 19:27:29.318 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
2023-06-14 19:27:29.319 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:27:29.320 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:29:36.880 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@625631bf
2023-06-14 19:29:36.882 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:29:36.888 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='고상욱'
	order by 1
 {executed in 4 msec}
2023-06-14 19:29:36.921 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c887f1e5
2023-06-14 19:29:36.921 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
2023-06-14 19:29:36.922 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:29:36.924 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '고상욱' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 19:29:37.025 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '고상욱'
 {executed in 0 msec}
2023-06-14 19:29:38.560 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77ee8faa
2023-06-14 19:29:38.562 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:29:38.568 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석'
	order by 1
 {executed in 4 msec}
2023-06-14 19:29:38.583 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강병석'
 {executed in 1 msec}
2023-06-14 19:29:38.639 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de204fd0
2023-06-14 19:29:38.639 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
2023-06-14 19:29:38.641 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:29:38.642 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:29:39.852 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 19:29:39.854 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:29:39.858 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 19:29:39.883 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 19:29:39.883 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 19:29:39.884 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:29:39.885 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:29:39.962 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 19:39:58.290 INFO  [RMI TCP Connection(36)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-06-14 19:39:58.294 INFO  [RMI TCP Connection(36)-127.0.0.1] [o.s.m.s.b.SimpleBrokerMessageHandler] - Stopping...
2023-06-14 19:39:58.294 INFO  [RMI TCP Connection(36)-127.0.0.1] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2023-06-14 19:39:58.295 INFO  [RMI TCP Connection(36)-127.0.0.1] [o.s.m.s.b.SimpleBrokerMessageHandler] - Stopped.
2023-06-14 19:39:58.325 INFO  [RMI TCP Connection(36)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'brokerChannelExecutor'
2023-06-14 19:39:58.325 INFO  [RMI TCP Connection(36)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Shutting down ExecutorService 'messageBrokerTaskScheduler'
2023-06-14 19:39:58.326 INFO  [RMI TCP Connection(36)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-06-14 19:39:58.327 INFO  [RMI TCP Connection(36)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'clientOutboundChannelExecutor'
2023-06-14 19:39:58.327 INFO  [RMI TCP Connection(36)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'clientInboundChannelExecutor'
2023-06-14 19:39:58.329 INFO  [RMI TCP Connection(36)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-06-14 19:39:58.338 INFO  [RMI TCP Connection(36)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-06-14 19:39:58.368 INFO  [RMI TCP Connection(36)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-06-14 19:40:02.565 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 16968 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-14 19:40:02.570 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-14 19:40:02.633 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-14 19:40:02.633 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-14 19:40:03.892 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-14 19:40:03.892 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-14 19:40:04.057 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 154ms. Found 3 JPA repository interfaces.
2023-06-14 19:40:04.442 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-14 19:40:04.443 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-14 19:40:04.495 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 19:40:04.496 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 19:40:04.497 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-14 19:40:04.497 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 54ms. Found 0 JDBC repository interfaces.
2023-06-14 19:40:04.970 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-14 19:40:05.054 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-14 19:40:05.054 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-14 19:40:05.054 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-14 19:40:05.054 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-14 19:40:05.054 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 19:40:05.054 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-14 19:40:05.055 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-14 19:40:05.055 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 19:40:05.055 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 19:40:05.055 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 19:40:05.055 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-14 19:40:05.055 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-14 19:40:05.119 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$d95c0b47] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:40:05.173 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-14 19:40:05.266 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$c3526f74] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:40:05.356 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:40:05.358 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@35391aac' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:40:05.364 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$e8271226] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:40:05.376 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$d7c2a3c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:40:05.379 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:40:05.381 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:40:05.407 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$2aa4a73a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:40:05.437 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$aa24f46c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-14 19:40:05.592 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-14 19:40:05.597 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-14 19:40:06.047 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-14 19:40:06.064 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-14 19:40:06.075 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-14 19:40:06.075 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-14 19:40:06.486 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-14 19:40:06.497 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-14 19:40:06.497 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3863 ms
2023-06-14 19:40:07.612 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@7bf3a745 with name: jasyptStringEncryptor
2023-06-14 19:40:07.680 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-14 19:40:07.771 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 8 msec}
2023-06-14 19:40:07.776 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-14 19:40:08.575 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-14 19:40:08.909 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-14 19:40:08.996 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-14 19:40:08.998 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-14 19:40:09.158 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-14 19:40:09.416 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:40:09.436 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-14 19:40:10.489 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:40:10.492 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-14 19:40:10.548 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-14 19:40:10.814 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-14 19:40:11.084 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'clientInboundChannelExecutor'
2023-06-14 19:40:11.100 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'clientOutboundChannelExecutor'
2023-06-14 19:40:12.043 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-14 19:40:12.044 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-14 19:40:12.234 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-14 19:40:12.234 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-14 19:40:12.234 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-14 19:40:12.235 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-14 19:40:12.235 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-14 19:40:12.235 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-14 19:40:12.235 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-14 19:40:12.235 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-14 19:40:12.235 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-14 19:40:12.423 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@36320099, org.springframework.security.web.context.SecurityContextPersistenceFilter@5af54ca0, org.springframework.security.web.header.HeaderWriterFilter@1d34470f, org.springframework.web.filter.CorsFilter@461c6e18, org.springframework.security.web.authentication.logout.LogoutFilter@205506d0, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@343a4944, org.springframework.security.web.session.ConcurrentSessionFilter@4c410caf, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@46c2500b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@74013d7d, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@685ab45, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4bd30b, org.springframework.security.web.session.SessionManagementFilter@2897710f, org.springframework.security.web.access.ExceptionTranslationFilter@29e6eadc, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@78120cf7]
2023-06-14 19:40:12.447 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-14 19:40:12.497 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService 'messageBrokerTaskScheduler'
2023-06-14 19:40:12.567 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'brokerChannelExecutor'
2023-06-14 19:40:13.000 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-14 19:40:13.081 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-14 19:40:13.526 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:40:14.407 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-14 19:40:14.436 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-14 19:40:14.575 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Starting...
2023-06-14 19:40:14.575 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [DefaultSubscriptionRegistry[cache[0 destination(s)], registry[0 sessions]]]]
2023-06-14 19:40:14.576 INFO  [restartedMain] [o.s.m.s.b.SimpleBrokerMessageHandler] - Started.
2023-06-14 19:40:14.588 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-14 19:40:14.592 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-14 19:40:14.654 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-14 19:40:14.658 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 12.578 seconds (JVM running for 14.286)
2023-06-14 19:40:14.659 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-14 19:40:14.659 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-14 19:40:14.659 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-14 19:40:15.491 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-14 19:40:15.492 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-14 19:40:15.519 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 27 ms
2023-06-14 19:40:22.842 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 19:40:22.859 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:40:22.884 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 24 msec}
2023-06-14 19:40:24.366 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77ee8faa
2023-06-14 19:40:24.437 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:40:24.447 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석'
	order by 1
 {executed in 1 msec}
2023-06-14 19:40:24.490 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de204fd0
2023-06-14 19:40:24.491 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
2023-06-14 19:40:24.494 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:40:24.497 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-14 19:40:24.589 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강병석'
 {executed in 1 msec}
2023-06-14 19:40:25.602 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 19:40:25.604 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:40:25.608 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 19:40:25.685 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 19:40:25.685 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 19:40:25.687 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 19:40:25.689 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:40:25.812 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 1 msec}
2023-06-14 19:41:12.577 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0]
2023-06-14 19:45:50.647 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 19:45:50.649 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:45:50.650 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-14 19:45:52.876 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 19:45:52.878 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:45:52.882 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-06-14 19:45:52.897 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 19:45:52.918 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 19:45:52.918 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 19:45:52.920 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:45:52.921 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:45:57.604 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@77ee8faa
2023-06-14 19:45:57.605 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:45:57.609 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강병석'
	order by 1
 {executed in 3 msec}
2023-06-14 19:45:57.640 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de204fd0
2023-06-14 19:45:57.640 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
2023-06-14 19:45:57.641 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:45:57.642 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강병석' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 19:45:57.690 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from TBL_FILE_INFO where file_id = '강병석'
 {executed in 1 msec}
2023-06-14 19:48:47.476 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 19:48:47.477 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:48:47.477 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:48:47.478 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-14 19:48:47.478 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 1 msec}
2023-06-14 19:48:53.364 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 19:48:53.365 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:48:53.365 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:48:53.367 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 1 msec}
2023-06-14 19:48:53.367 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-14 19:48:58.978 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-06-14 19:48:58.979 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:48:58.980 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 19:48:58.981 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:48:58.981 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 2 msec}
2023-06-14 19:48:59.017 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 35 msec}
2023-06-14 19:48:59.018 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 19:48:59.020 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 19:48:59.020 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 19:48:59.023 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 2 msec}
2023-06-14 19:48:59.027 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 19:48:59.080 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 52 msec}
2023-06-14 19:48:59.693 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@91c32170
2023-06-14 19:48:59.694 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
2023-06-14 19:48:59.695 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:48:59.698 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
 {executed in 3 msec}
2023-06-14 19:48:59.739 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 19:48:59.741 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-06-14 19:49:29.212 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 19:49:29.213 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:49:29.214 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:49:29.215 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-14 19:49:29.215 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 0 msec}
2023-06-14 19:49:34.550 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-06-14 19:49:34.551 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:49:34.552 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 19:49:34.552 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:49:34.553 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 0 msec}
2023-06-14 19:49:34.573 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 19 msec}
2023-06-14 19:49:34.574 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 19:49:34.576 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 19:49:34.577 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 19:49:34.579 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 2 msec}
2023-06-14 19:49:34.582 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 19:49:34.620 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 36 msec}
2023-06-14 19:49:35.206 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@91c32170
2023-06-14 19:49:35.206 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
2023-06-14 19:49:35.207 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:49:35.208 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
 {executed in 1 msec}
2023-06-14 19:49:35.246 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 19:49:35.247 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-06-14 19:49:54.528 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 19:49:54.529 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:49:54.529 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:49:54.530 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-14 19:49:54.530 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 0 msec}
2023-06-14 19:49:58.745 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-06-14 19:49:58.745 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 19:49:58.746 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:49:58.746 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:49:58.747 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 1 msec}
2023-06-14 19:49:58.760 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 13 msec}
2023-06-14 19:49:58.761 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 19:49:58.763 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 19:49:58.763 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 19:49:58.766 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 3 msec}
2023-06-14 19:49:58.769 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 19:49:58.800 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 31 msec}
2023-06-14 19:49:59.348 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@91c32170
2023-06-14 19:49:59.348 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
2023-06-14 19:49:59.349 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:49:59.350 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
 {executed in 1 msec}
2023-06-14 19:49:59.388 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 19:49:59.389 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:49:59.391 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-06-14 19:50:16.768 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 19:50:16.769 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:50:16.769 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:50:16.770 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-14 19:50:16.770 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 1 msec}
2023-06-14 19:50:21.172 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-06-14 19:50:21.172 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 19:50:21.173 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:50:21.173 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:50:21.174 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 1 msec}
2023-06-14 19:50:21.184 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 11 msec}
2023-06-14 19:50:21.185 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 19:50:21.186 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 19:50:21.186 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 19:50:21.188 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 1 msec}
2023-06-14 19:50:21.189 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 19:50:21.217 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 26 msec}
2023-06-14 19:50:21.812 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@91c32170
2023-06-14 19:50:21.813 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
2023-06-14 19:50:21.813 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:50:21.816 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
 {executed in 1 msec}
2023-06-14 19:50:21.853 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 19:50:21.854 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-06-14 19:50:36.879 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 19:50:36.880 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:50:36.880 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:50:36.881 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-14 19:50:36.881 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 1 msec}
2023-06-14 19:50:41.143 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-06-14 19:50:41.143 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 19:50:41.144 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:50:41.144 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:50:41.145 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 0 msec}
2023-06-14 19:50:41.152 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 8 msec}
2023-06-14 19:50:41.153 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 19:50:41.154 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 19:50:41.154 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 19:50:41.156 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 2 msec}
2023-06-14 19:50:41.157 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 19:50:41.179 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 22 msec}
2023-06-14 19:50:41.968 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@91c32170
2023-06-14 19:50:41.968 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
2023-06-14 19:50:41.969 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:50:41.970 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
 {executed in 1 msec}
2023-06-14 19:50:42.010 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 19:50:42.012 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:50:42.013 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-06-14 19:51:16.131 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 19:51:16.132 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:51:16.132 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:51:16.133 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 1 msec}
2023-06-14 19:51:16.133 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-14 19:51:22.284 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-06-14 19:51:22.285 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 19:51:22.285 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:51:22.285 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:51:22.286 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 1 msec}
2023-06-14 19:51:22.295 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 8 msec}
2023-06-14 19:51:22.295 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 19:51:22.297 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 19:51:22.297 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 19:51:22.299 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 1 msec}
2023-06-14 19:51:22.300 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 19:51:22.320 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 19 msec}
2023-06-14 19:51:22.915 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@91c32170
2023-06-14 19:51:22.915 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
2023-06-14 19:51:22.916 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:51:22.917 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
 {executed in 1 msec}
2023-06-14 19:51:22.976 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 19:51:22.977 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-06-14 19:52:53.229 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 19:52:53.230 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:52:53.230 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:52:53.231 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-14 19:52:53.232 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 0 msec}
2023-06-14 19:52:57.922 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-06-14 19:52:57.922 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 19:52:57.923 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:52:57.923 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:52:57.924 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 1 msec}
2023-06-14 19:52:57.935 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 11 msec}
2023-06-14 19:52:57.935 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 19:52:57.937 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 19:52:57.937 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 19:52:57.940 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 2 msec}
2023-06-14 19:52:57.941 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 19:52:57.965 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 23 msec}
2023-06-14 19:52:58.542 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@91c32170
2023-06-14 19:52:58.542 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
2023-06-14 19:52:58.543 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:52:58.544 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
 {executed in 1 msec}
2023-06-14 19:52:58.582 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 19:52:58.583 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:52:58.585 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-06-14 19:54:13.775 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 19:54:13.776 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:54:13.776 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:54:13.777 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-14 19:54:13.777 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 1 msec}
2023-06-14 19:54:18.295 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-06-14 19:54:18.296 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 19:54:18.297 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:54:18.297 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 19:54:18.298 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 0 msec}
2023-06-14 19:54:18.308 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 10 msec}
2023-06-14 19:54:18.308 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 19:54:18.310 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 19:54:18.310 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 19:54:18.313 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 1 msec}
2023-06-14 19:54:18.314 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 19:54:18.336 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 20 msec}
2023-06-14 19:54:18.860 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@91c32170
2023-06-14 19:54:18.860 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
2023-06-14 19:54:18.861 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:54:18.862 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
 {executed in 1 msec}
2023-06-14 19:54:18.897 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 19:54:18.898 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:54:18.899 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-06-14 19:57:54.472 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 19:57:54.472 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:57:54.474 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-14 19:57:54.474 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:57:54.475 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 1 msec}
2023-06-14 19:58:02.252 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-06-14 19:58:02.253 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 19:58:02.253 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:58:02.253 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:58:02.254 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 1 msec}
2023-06-14 19:58:02.265 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 12 msec}
2023-06-14 19:58:02.266 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 19:58:02.267 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 19:58:02.268 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 19:58:02.270 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 2 msec}
2023-06-14 19:58:02.272 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 19:58:02.296 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 24 msec}
2023-06-14 19:58:02.880 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@91c32170
2023-06-14 19:58:02.881 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
2023-06-14 19:58:02.882 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:58:02.883 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
 {executed in 1 msec}
2023-06-14 19:58:02.922 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 19:58:02.923 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 19:58:02.925 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-06-14 20:07:30.026 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 20:07:30.027 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 20:07:30.027 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:07:30.028 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-14 20:07:30.028 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 1 msec}
2023-06-14 20:07:34.360 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-06-14 20:07:34.361 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 20:07:34.361 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 20:07:34.365 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 4 msec}
2023-06-14 20:07:34.365 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:07:34.386 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 20 msec}
2023-06-14 20:07:34.386 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 20:07:34.388 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 20:07:34.388 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 20:07:34.391 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 3 msec}
2023-06-14 20:07:34.393 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 20:07:34.495 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 102 msec}
2023-06-14 20:07:35.055 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@91c32170
2023-06-14 20:07:35.055 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
2023-06-14 20:07:35.055 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:07:35.056 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
 {executed in 1 msec}
2023-06-14 20:07:35.095 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 20:07:35.097 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 2 msec}
2023-06-14 20:08:49.005 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:08:49.005 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 20:08:49.006 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-14 20:08:49.006 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 20:08:49.007 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 1 msec}
2023-06-14 20:08:53.236 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-06-14 20:08:53.236 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 20:08:53.237 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:08:53.237 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 20:08:53.238 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 1 msec}
2023-06-14 20:08:53.247 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 9 msec}
2023-06-14 20:08:53.248 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 20:08:53.249 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 0 msec}
2023-06-14 20:08:53.249 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 20:08:53.250 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 1 msec}
2023-06-14 20:08:53.251 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 20:08:53.268 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 15 msec}
2023-06-14 20:08:53.834 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@91c32170
2023-06-14 20:08:53.834 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
2023-06-14 20:08:53.835 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 20:08:53.836 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
 {executed in 1 msec}
2023-06-14 20:08:53.875 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 20:08:53.876 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:08:53.878 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-06-14 20:10:32.458 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 20:10:32.459 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:10:32.459 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:10:32.460 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-14 20:10:32.460 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 1 msec}
2023-06-14 20:10:37.360 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-06-14 20:10:37.361 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 20:10:37.362 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:10:37.362 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 20:10:37.363 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 0 msec}
2023-06-14 20:10:37.369 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 7 msec}
2023-06-14 20:10:37.370 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 20:10:37.371 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 20:10:37.371 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 20:10:37.374 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 2 msec}
2023-06-14 20:10:37.376 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 20:10:37.392 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 15 msec}
2023-06-14 20:10:37.910 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@91c32170
2023-06-14 20:10:37.910 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
2023-06-14 20:10:37.911 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 20:10:37.913 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
 {executed in 1 msec}
2023-06-14 20:10:37.951 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 20:10:37.952 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 20:10:37.953 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-06-14 20:11:12.569 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 2, active threads = 1, queued tasks = 0, completed tasks = 1]
2023-06-14 20:12:26.580 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 20:12:26.581 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:12:26.581 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:12:26.582 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-14 20:12:26.582 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 1 msec}
2023-06-14 20:12:31.734 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-06-14 20:12:31.734 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 20:12:31.735 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:12:31.735 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 20:12:31.736 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 1 msec}
2023-06-14 20:12:31.744 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 9 msec}
2023-06-14 20:12:31.745 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 20:12:31.746 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 20:12:31.746 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 20:12:31.748 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 1 msec}
2023-06-14 20:12:31.749 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 20:12:31.763 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 13 msec}
2023-06-14 20:12:32.321 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@91c32170
2023-06-14 20:12:32.321 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
2023-06-14 20:12:32.321 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:12:32.322 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
 {executed in 1 msec}
2023-06-14 20:12:32.359 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 20:12:32.360 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:12:32.361 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-06-14 20:12:50.163 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 20:12:50.164 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 20:12:50.164 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:12:50.165 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-14 20:12:50.165 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 0 msec}
2023-06-14 20:12:53.567 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-06-14 20:12:53.567 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 20:12:53.568 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:12:53.568 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:12:53.569 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 1 msec}
2023-06-14 20:12:53.580 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 11 msec}
2023-06-14 20:12:53.580 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 20:12:53.582 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 20:12:53.582 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 20:12:53.584 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 2 msec}
2023-06-14 20:12:53.585 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 20:12:53.602 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 16 msec}
2023-06-14 20:12:54.143 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@91c32170
2023-06-14 20:12:54.143 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
2023-06-14 20:12:54.144 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 20:12:54.145 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
 {executed in 1 msec}
2023-06-14 20:12:54.180 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 20:12:54.181 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-06-14 20:13:16.586 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 20:13:16.587 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 20:13:16.587 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 20:13:16.588 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-14 20:13:16.588 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 1 msec}
2023-06-14 20:13:19.921 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-06-14 20:13:19.922 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:13:19.922 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 20:13:19.923 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:13:19.923 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 0 msec}
2023-06-14 20:13:19.931 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 8 msec}
2023-06-14 20:13:19.931 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 20:13:19.933 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 0 msec}
2023-06-14 20:13:19.933 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 20:13:19.935 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 2 msec}
2023-06-14 20:13:19.936 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 20:13:19.952 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 16 msec}
2023-06-14 20:13:20.548 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@91c32170
2023-06-14 20:13:20.548 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
2023-06-14 20:13:20.549 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 20:13:20.550 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
 {executed in 1 msec}
2023-06-14 20:13:20.585 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 20:13:20.586 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-06-14 20:13:54.339 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:13:54.341 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-14 20:13:54.342 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 20:13:54.343 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:13:54.344 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 1 msec}
2023-06-14 20:13:58.520 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-06-14 20:13:58.521 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 20:13:58.521 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 20:13:58.522 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 20:13:58.522 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 1 msec}
2023-06-14 20:13:58.530 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 8 msec}
2023-06-14 20:13:58.530 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 20:13:58.532 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 20:13:58.532 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 20:13:58.534 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 2 msec}
2023-06-14 20:13:58.535 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 20:13:58.549 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 14 msec}
2023-06-14 20:13:59.106 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@91c32170
2023-06-14 20:13:59.106 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
2023-06-14 20:13:59.107 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 20:13:59.108 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
 {executed in 1 msec}
2023-06-14 20:13:59.146 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 20:13:59.147 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:13:59.148 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-06-14 20:14:08.484 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-04' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-06-14 20:14:08.484 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-04' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-04' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 20:14:08.485 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 20:14:08.485 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 20:14:08.486 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-04' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 0 msec}
2023-06-14 20:14:08.491 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-04' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-04' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 6 msec}
2023-06-14 20:14:08.491 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-04월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-04' AND    b.DISPATCH_SEQ = 1
2023-06-14 20:14:08.492 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT '[38번] 2023-04월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-04' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 20:14:08.492 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-04' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 20:14:08.494 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-04' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 2 msec}
2023-06-14 20:14:08.495 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-04' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-04' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 20:14:08.514 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-04' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-04' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 18 msec}
2023-06-14 20:14:09.102 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de136d49
2023-06-14 20:14:09.102 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-04'
2023-06-14 20:14:09.103 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 20:14:09.105 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-04'
 {executed in 0 msec}
2023-06-14 20:14:09.221 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-04' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 20:14:09.222 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 20:14:09.224 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-04' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-06-14 21:59:41.746 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-14 21:59:41.757 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-14 21:59:41.757 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-14 21:59:41.757 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-14 21:59:48.511 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=1h45m10s93ms984µs500ns).
2023-06-14 22:06:14.341 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-14 22:06:14.341 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-14 22:06:14.342 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-14 22:06:14.342 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-14 22:06:14.342 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-14 22:06:16.096 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:06:16.097 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
21. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-06-14 22:06:16.108 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-14 22:06:16.198 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$O2vJuPEgUWL95SjmYm.Bju5YChaZZkFj4F1OKtO.h4BMUQedOTAza
2023-06-14 22:06:16.291 INFO  [http-nio-10010-exec-3] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-14 22:06:16.303 INFO  [UserConnection-1] [com.pjy.dashboard.service.ChatService] - # sise thread start : [p00139]
2023-06-14 22:06:16.304 INFO  [UserConnection-1] [com.pjy.dashboard.service.ChatService] - # sise threaditemList = null 
2023-06-14 22:06:19.482 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 22:06:19.483 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:06:19.483 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 22:06:19.484 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-14 22:06:19.484 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 1 msec}
2023-06-14 22:06:25.256 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-06-14 22:06:25.256 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 22:06:25.257 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:06:25.257 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:06:25.263 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 6 msec}
2023-06-14 22:06:25.268 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 10 msec}
2023-06-14 22:06:25.268 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 22:06:25.269 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 22:06:25.269 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 22:06:25.271 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 2 msec}
2023-06-14 22:06:25.272 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 22:06:25.287 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 14 msec}
2023-06-14 22:06:25.795 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@91c32170
2023-06-14 22:06:25.795 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
2023-06-14 22:06:25.796 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 22:06:25.803 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
 {executed in 6 msec}
2023-06-14 22:06:25.838 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 22:06:25.839 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-06-14 22:06:43.011 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 22:06:43.012 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 22:06:43.012 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 22:06:43.014 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 0 msec}
2023-06-14 22:06:43.014 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-14 22:06:50.481 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 22:06:50.482 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:06:50.482 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:06:50.483 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-14 22:06:50.483 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 0 msec}
2023-06-14 22:06:51.554 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 22:06:51.555 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:06:51.555 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:06:51.556 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-14 22:06:51.556 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 0 msec}
2023-06-14 22:06:53.065 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 22:06:53.066 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 22:06:53.066 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:06:53.067 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-14 22:06:53.067 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 0 msec}
2023-06-14 22:07:01.504 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 22:07:01.504 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 22:07:01.505 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-14 22:07:01.505 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 22:07:01.507 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 1 msec}
2023-06-14 22:07:03.734 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 22:07:03.735 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:07:03.735 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:07:03.736 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-14 22:07:03.736 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 0 msec}
2023-06-14 22:07:07.971 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-06-14 22:07:07.971 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 22:07:07.972 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:07:07.972 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 22:07:07.973 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 1 msec}
2023-06-14 22:07:07.979 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 6 msec}
2023-06-14 22:07:07.979 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 22:07:07.980 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 22:07:07.980 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 22:07:07.981 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 1 msec}
2023-06-14 22:07:07.982 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 22:07:08.000 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 18 msec}
2023-06-14 22:07:08.505 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@91c32170
2023-06-14 22:07:08.505 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
2023-06-14 22:07:08.506 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 22:07:08.507 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
 {executed in 1 msec}
2023-06-14 22:07:08.543 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 22:07:08.544 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 22:07:08.545 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-06-14 22:25:52.627 INFO  [MessageBroker-2] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 3, active threads = 1, queued tasks = 0, completed tasks = 2]
2023-06-14 22:25:52.627 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 4, active threads = 3, queued tasks = 0, completed tasks = 2]
2023-06-14 22:25:52.627 INFO  [MessageBroker-3] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 5, active threads = 5, queued tasks = 0, completed tasks = 2]
2023-06-14 22:25:52.628 INFO  [MessageBroker-2] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 6, active threads = 6, queued tasks = 0, completed tasks = 3]
2023-06-14 22:41:12.552 INFO  [MessageBroker-1] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 7, active threads = 1, queued tasks = 0, completed tasks = 6]
2023-06-14 22:52:19.635 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 22:52:19.636 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:52:19.636 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:52:19.637 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 1 msec}
2023-06-14 22:52:19.638 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-14 22:52:24.092 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-06-14 22:52:24.093 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 22:52:24.093 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 22:52:24.094 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:52:24.094 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 1 msec}
2023-06-14 22:52:24.102 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 8 msec}
2023-06-14 22:52:24.102 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 22:52:24.103 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 22:52:24.103 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 22:52:24.105 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 2 msec}
2023-06-14 22:52:24.106 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 22:52:24.119 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 13 msec}
2023-06-14 22:52:24.637 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@91c32170
2023-06-14 22:52:24.637 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
2023-06-14 22:52:24.638 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 22:52:24.639 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
 {executed in 1 msec}
2023-06-14 22:52:24.682 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 22:52:24.684 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-06-14 22:53:08.708 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 22:53:08.708 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 22:53:08.709 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-14 22:53:08.709 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:53:08.710 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 1 msec}
2023-06-14 22:53:13.581 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-06-14 22:53:13.582 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:53:13.583 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 22:53:13.583 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 0 msec}
2023-06-14 22:53:13.583 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:53:13.591 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 7 msec}
2023-06-14 22:53:13.592 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 22:53:13.594 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 22:53:13.594 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 22:53:13.596 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 2 msec}
2023-06-14 22:53:13.598 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 22:53:13.611 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 13 msec}
2023-06-14 22:53:14.119 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@91c32170
2023-06-14 22:53:14.119 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
2023-06-14 22:53:14.120 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 22:53:14.121 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
 {executed in 1 msec}
2023-06-14 22:53:14.156 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 22:53:14.157 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-06-14 22:53:56.646 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:53:56.646 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
2023-06-14 22:53:56.647 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-14 22:53:56.648 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:53:56.649 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. select   'N' as bit, a.* from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' and		a.code = '휴가종류' order by a.route_nm
 {executed in 1 msec}
2023-06-14 22:54:00.058 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
2023-06-14 22:54:00.058 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 22:54:00.059 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 22:54:00.059 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 22:54:00.060 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. SELECT 	DISTINCT INIT_SEQ  FROM 	TBL_MONTH_ARRANGE_BASIC a WHERE	a.COMPANY_NO = '100' AND 	a.BASE_YM = '2023-05' AND 	a.route_nm = '38번' AND 	a.INIT_SEQ > 0
 {executed in 1 msec}
2023-06-14 22:54:00.066 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 7 msec}
2023-06-14 22:54:00.067 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 22:54:00.068 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 22:54:00.069 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 22:54:00.071 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 1 msec}
2023-06-14 22:54:00.073 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 22:54:00.094 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 21 msec}
2023-06-14 22:54:00.621 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@91c32170
2023-06-14 22:54:00.621 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
2023-06-14 22:54:00.622 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:54:00.623 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT  'N' as bit,CAR_REGNO ,EMP_NM ,prev_daily_seq ,PREV_WORK_PATTERN ,ampm_gubun, off_group, CAR_REGNO||EMP_NM as key FROM TBM_DRIVERINFO_DETAIL where   company_no = '100' AND 	route_nm = '38번' AND     BASE_YM = '2023-05'
 {executed in 1 msec}
2023-06-14 22:54:00.659 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 22:54:00.660 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 22:54:00.661 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-06-14 22:54:39.497 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:54:39.498 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-14 22:54:41.874 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 22:54:41.875 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 22:54:41.876 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-06-14 22:54:45.645 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 22:54:45.646 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 22:54:45.653 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 6 msec}
2023-06-14 22:54:45.653 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 22:54:45.654 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 22:54:45.654 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 22:54:45.656 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 1 msec}
2023-06-14 22:54:45.657 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 22:54:45.675 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 16 msec}
2023-06-14 22:55:20.611 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 22:55:20.612 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 22:55:20.619 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 5 msec}
2023-06-14 22:55:20.619 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 22:55:20.621 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 22:55:20.621 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - WITH RECURSIVE countera(n) AS ( WITH routeCount AS ( SELECT 'a' ampm_gubun, a.AUTO_CNT FROM TBL_ROUTEINFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.ROUTE_NM    = '38번'	 union SELECT 'p' ampm_gubun, a.AUTO_CNT FROM TBL_ROUTEINFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.ROUTE_NM    = '38번' ) SELECT t.n+1,t.n as no,c.ampm_gubun,to_char(t.n,'00') || c.ampm_gubun AS gubun ,  CASE WHEN a.ampm_gubun = '' AND a.d1 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d1 ,'[*@?]') and a.d1  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d1        ,  CASE WHEN a.ampm_gubun = '' AND a.d2  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d2  ,'[*@?]') and a.d2   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d2     ,  CASE WHEN a.ampm_gubun = '' AND a.d3  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d3  ,'[*@?]') and a.d3   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d3     ,  CASE WHEN a.ampm_gubun = '' AND a.d4  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d4  ,'[*@?]') and a.d4   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d4     ,  CASE WHEN a.ampm_gubun = '' AND a.d5  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d5  ,'[*@?]') and a.d5   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d5     ,  CASE WHEN a.ampm_gubun = '' AND a.d6  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d6  ,'[*@?]') and a.d6   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d6     ,  CASE WHEN a.ampm_gubun = '' AND a.d7  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d7  ,'[*@?]') and a.d7   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d7     ,  CASE WHEN a.ampm_gubun = '' AND a.d8  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d8  ,'[*@?]') and a.d8   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d8     ,  CASE WHEN a.ampm_gubun = '' AND a.d9  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d9  ,'[*@?]') and a.d9   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d9     ,  CASE WHEN a.ampm_gubun = '' AND a.d10 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d10 ,'[*@?]') and a.d10  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d10    ,  CASE WHEN a.ampm_gubun = '' AND a.d11 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d11 ,'[*@?]') and a.d11  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d11    ,  CASE WHEN a.ampm_gubun = '' AND a.d12 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d12 ,'[*@?]') and a.d12  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d12    ,  CASE WHEN a.ampm_gubun = '' AND a.d13 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d13 ,'[*@?]') and a.d13  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d13    ,  CASE WHEN a.ampm_gubun = '' AND a.d14 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d14 ,'[*@?]') and a.d14  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d14    ,  CASE WHEN a.ampm_gubun = '' AND a.d15 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d15 ,'[*@?]') and a.d15  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d15    ,  CASE WHEN a.ampm_gubun = '' AND a.d16 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d16 ,'[*@?]') and a.d16  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d16    ,  CASE WHEN a.ampm_gubun = '' AND a.d17 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d17 ,'[*@?]') and a.d17  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d17    ,  CASE WHEN a.ampm_gubun = '' AND a.d18 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d18 ,'[*@?]') and a.d18  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d18    ,  CASE WHEN a.ampm_gubun = '' AND a.d19 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d19 ,'[*@?]') and a.d19  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d19    ,  CASE WHEN a.ampm_gubun = '' AND a.d20 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d20 ,'[*@?]') and a.d20  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d20    ,  CASE WHEN a.ampm_gubun = '' AND a.d21 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d21 ,'[*@?]') and a.d21  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d21    ,  CASE WHEN a.ampm_gubun = '' AND a.d22 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d22 ,'[*@?]') and a.d22  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d22    ,  CASE WHEN a.ampm_gubun = '' AND a.d23 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d23 ,'[*@?]') and a.d23  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d23    ,  CASE WHEN a.ampm_gubun = '' AND a.d24 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d24 ,'[*@?]') and a.d24  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d24    ,  CASE WHEN a.ampm_gubun = '' AND a.d25 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d25 ,'[*@?]') and a.d25  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d25    ,  CASE WHEN a.ampm_gubun = '' AND a.d26 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d26 ,'[*@?]') and a.d26  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d26    ,  CASE WHEN a.ampm_gubun = '' AND a.d27 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d27 ,'[*@?]') and a.d27  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d27    ,  CASE WHEN a.ampm_gubun = '' AND a.d28 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d28 ,'[*@?]') and a.d28  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d28    ,  CASE WHEN a.ampm_gubun = '' AND a.d29 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d29 ,'[*@?]') and a.d29  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d29    ,  CASE WHEN a.ampm_gubun = '' AND a.d30 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d30 ,'[*@?]') and a.d30  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d30    ,  CASE WHEN a.ampm_gubun = '' AND a.d31 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d31 ,'[*@?]') and a.d31  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d31    FROM t ,TBL_MONTH_ARRANGE_DETAIL a , routeCount c WHERE 	a.COMPANY_NO  = '100' AND 	a.ROUTE_NM    = '38번' AND 	a.BASE_YM = '2023-05' AND 	a.dispatch_seq = 6 AND     a.init_seq = 0 AND     t.n <= c.auto_cnt ) SELECT 	decode(ampm_gubun,'a','오전','오후') as ampm_gubun , no as seq,0 as cnt ,	max(d1 ) as d1 ,	max(d2 ) as d2 ,	max(d3 ) as d3 ,	max(d4 ) as d4 ,	max(d5 ) as d5 ,	max(d6 ) as d6 ,	max(d7 ) as d7 ,	max(d8 ) as d8 ,	max(d9 ) as d9 ,	max(d10) as d10 ,	max(d11) as d11 ,	max(d12) as d12 ,	max(d13) as d13 ,	max(d14) as d14 ,	max(d15) as d15 ,	max(d16) as d16 ,	max(d17) as d17 ,	max(d18) as d18 ,	max(d19) as d19 ,	max(d20) as d20 ,	max(d21) as d21 ,	max(d22) as d22 ,	max(d23) as d23 ,	max(d24) as d24 ,	max(d25) as d25 ,	max(d26) as d26 ,	max(d27) as d27 ,	max(d28) as d28 ,	max(d29) as d29 ,	max(d30) as d30 ,	max(d31) as d31 from countera GROUP BY ampm_gubun,gubun
2023-06-14 22:55:20.820 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. WITH RECURSIVE countera(n) AS ( WITH routeCount AS ( SELECT 'a' ampm_gubun, a.AUTO_CNT FROM TBL_ROUTEINFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.ROUTE_NM    = '38번'	 union SELECT 'p' ampm_gubun, a.AUTO_CNT FROM TBL_ROUTEINFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.ROUTE_NM    = '38번' ) SELECT t.n+1,t.n as no,c.ampm_gubun,to_char(t.n,'00') || c.ampm_gubun AS gubun ,  CASE WHEN a.ampm_gubun = '' AND a.d1 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d1 ,'[*@?]') and a.d1  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d1        ,  CASE WHEN a.ampm_gubun = '' AND a.d2  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d2  ,'[*@?]') and a.d2   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d2     ,  CASE WHEN a.ampm_gubun = '' AND a.d3  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d3  ,'[*@?]') and a.d3   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d3     ,  CASE WHEN a.ampm_gubun = '' AND a.d4  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d4  ,'[*@?]') and a.d4   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d4     ,  CASE WHEN a.ampm_gubun = '' AND a.d5  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d5  ,'[*@?]') and a.d5   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d5     ,  CASE WHEN a.ampm_gubun = '' AND a.d6  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d6  ,'[*@?]') and a.d6   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d6     ,  CASE WHEN a.ampm_gubun = '' AND a.d7  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d7  ,'[*@?]') and a.d7   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d7     ,  CASE WHEN a.ampm_gubun = '' AND a.d8  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d8  ,'[*@?]') and a.d8   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d8     ,  CASE WHEN a.ampm_gubun = '' AND a.d9  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d9  ,'[*@?]') and a.d9   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d9     ,  CASE WHEN a.ampm_gubun = '' AND a.d10 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d10 ,'[*@?]') and a.d10  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d10    ,  CASE WHEN a.ampm_gubun = '' AND a.d11 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d11 ,'[*@?]') and a.d11  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d11    ,  CASE WHEN a.ampm_gubun = '' AND a.d12 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d12 ,'[*@?]') and a.d12  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d12    ,  CASE WHEN a.ampm_gubun = '' AND a.d13 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d13 ,'[*@?]') and a.d13  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d13    ,  CASE WHEN a.ampm_gubun = '' AND a.d14 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d14 ,'[*@?]') and a.d14  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d14    ,  CASE WHEN a.ampm_gubun = '' AND a.d15 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d15 ,'[*@?]') and a.d15  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d15    ,  CASE WHEN a.ampm_gubun = '' AND a.d16 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d16 ,'[*@?]') and a.d16  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d16    ,  CASE WHEN a.ampm_gubun = '' AND a.d17 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d17 ,'[*@?]') and a.d17  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d17    ,  CASE WHEN a.ampm_gubun = '' AND a.d18 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d18 ,'[*@?]') and a.d18  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d18    ,  CASE WHEN a.ampm_gubun = '' AND a.d19 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d19 ,'[*@?]') and a.d19  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d19    ,  CASE WHEN a.ampm_gubun = '' AND a.d20 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d20 ,'[*@?]') and a.d20  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d20    ,  CASE WHEN a.ampm_gubun = '' AND a.d21 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d21 ,'[*@?]') and a.d21  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d21    ,  CASE WHEN a.ampm_gubun = '' AND a.d22 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d22 ,'[*@?]') and a.d22  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d22    ,  CASE WHEN a.ampm_gubun = '' AND a.d23 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d23 ,'[*@?]') and a.d23  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d23    ,  CASE WHEN a.ampm_gubun = '' AND a.d24 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d24 ,'[*@?]') and a.d24  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d24    ,  CASE WHEN a.ampm_gubun = '' AND a.d25 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d25 ,'[*@?]') and a.d25  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d25    ,  CASE WHEN a.ampm_gubun = '' AND a.d26 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d26 ,'[*@?]') and a.d26  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d26    ,  CASE WHEN a.ampm_gubun = '' AND a.d27 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d27 ,'[*@?]') and a.d27  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d27    ,  CASE WHEN a.ampm_gubun = '' AND a.d28 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d28 ,'[*@?]') and a.d28  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d28    ,  CASE WHEN a.ampm_gubun = '' AND a.d29 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d29 ,'[*@?]') and a.d29  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d29    ,  CASE WHEN a.ampm_gubun = '' AND a.d30 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d30 ,'[*@?]') and a.d30  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d30    ,  CASE WHEN a.ampm_gubun = '' AND a.d31 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d31 ,'[*@?]') and a.d31  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d31    FROM t ,TBL_MONTH_ARRANGE_DETAIL a , routeCount c WHERE 	a.COMPANY_NO  = '100' AND 	a.ROUTE_NM    = '38번' AND 	a.BASE_YM = '2023-05' AND 	a.dispatch_seq = 6 AND     a.init_seq = 0 AND     t.n <= c.auto_cnt ) SELECT 	decode(ampm_gubun,'a','오전','오후') as ampm_gubun , no as seq,0 as cnt ,	max(d1 ) as d1 ,	max(d2 ) as d2 ,	max(d3 ) as d3 ,	max(d4 ) as d4 ,	max(d5 ) as d5 ,	max(d6 ) as d6 ,	max(d7 ) as d7 ,	max(d8 ) as d8 ,	max(d9 ) as d9 ,	max(d10) as d10 ,	max(d11) as d11 ,	max(d12) as d12 ,	max(d13) as d13 ,	max(d14) as d14 ,	max(d15) as d15 ,	max(d16) as d16 ,	max(d17) as d17 ,	max(d18) as d18 ,	max(d19) as d19 ,	max(d20) as d20 ,	max(d21) as d21 ,	max(d22) as d22 ,	max(d23) as d23 ,	max(d24) as d24 ,	max(d25) as d25 ,	max(d26) as d26 ,	max(d27) as d27 ,	max(d28) as d28 ,	max(d29) as d29 ,	max(d30) as d30 ,	max(d31) as d31 from countera GROUP BY ampm_gubun,gubun
 {executed in 199 msec}
2023-06-14 22:57:51.684 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:57:51.686 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-14 22:57:53.609 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
2023-06-14 22:57:53.610 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:57:53.612 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. SELECT 	a.ROUTE_NM,b.STATUS,b.LAST_CHG_USER,b.LAST_CHG_DATE FROM 	TBL_ROUTEINFO a left outer join TBM_MONTH_ARRANGE_STATUS b on	a.company_no = b.company_no and a.route_nm   = b.route_nm AND b.BASE_YM = '2023-05' AND	b.ROUTE_NM like '' || '%' WHERE 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-06-14 22:57:55.963 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 22:57:55.964 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 22:57:55.973 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 8 msec}
2023-06-14 22:57:55.973 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 22:57:55.975 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 2 msec}
2023-06-14 22:57:55.975 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
2023-06-14 22:57:55.977 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. SELECT b.CAR_REGNO,b.emp_nm , 0 AS tot_work_date ,b.D1  ,b.D2  ,b.D3  ,b.D4  ,b.D5  ,b.D6  ,b.D7  ,b.D8  ,b.D9  ,b.D10 ,b.D11 ,b.D12 ,b.D13 ,b.D14 ,b.D15 ,b.D16 ,b.D17 ,b.D18 ,b.D19 ,b.D20 ,b.D21 ,b.D22 ,b.D23 ,b.D24 ,b.D25 ,b.D26 ,b.D27 ,b.D28 ,b.D29 ,b.D30 ,b.D31 ,'N' AS bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6 AND    b.CAR_REGNO not like 'SP%' order by b.dispatch_seq,b.CAR_REGNO ,b.ampm_gubun,b.prev_daily_seq
 {executed in 2 msec}
2023-06-14 22:57:55.978 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
2023-06-14 22:57:55.997 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
42. WITH sp_maxinfo AS ( SELECT  b.CAR_REGNO,b.EMP_NM ,nvl(max(CASE WHEN nvl(b.D1 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D1   ELSE '#' || b.D1  end),' ') as D1 ,nvl(max(CASE WHEN nvl(b.D2 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' tHEN b.D2   ELSE '#' || b.D2  end),' ') as D2 ,nvl(max(CASE WHEN nvl(b.D3 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D3   ELSE '#' || b.D3   end),' ') as D3 ,nvl(max(CASE WHEN nvl(b.D4 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D4   ELSE '#' || b.D4   end),' ') as D4 ,nvl(max(CASE WHEN nvl(b.D5 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D5   ELSE '#' || b.D5   end),' ') as D5 ,nvl(max(CASE WHEN nvl(b.D6 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D6   ELSE '#' || b.D6   end),' ') as D6 ,nvl(max(CASE WHEN nvl(b.D7 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D7   ELSE '#' || b.D7   end),' ') as D7 ,nvl(max(CASE WHEN nvl(b.D8 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D8   ELSE '#' || b.D8   end),' ') as D8 ,nvl(max(CASE WHEN nvl(b.D9 ,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D9   ELSE '#' || b.D9   end),' ') as D9 ,nvl(max(CASE WHEN nvl(b.D10,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D10  ELSE '#' || b.D10  end),' ') as D10 ,nvl(max(CASE WHEN nvl(b.D11,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D11  ELSE '#' || b.D11  end),' ') as D11 ,nvl(max(CASE WHEN nvl(b.D12,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D12  ELSE '#' || b.D12  end),' ') as D12 ,nvl(max(CASE WHEN nvl(b.D13,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D13  ELSE '#' || b.D13  end),' ') as D13 ,nvl(max(CASE WHEN nvl(b.D14,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D14  ELSE '#' || b.D14  end),' ') as D14 ,nvl(max(CASE WHEN nvl(b.D15,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D15  ELSE '#' || b.D15  end),' ') as D15 ,nvl(max(CASE WHEN nvl(b.D16,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D16  ELSE '#' || b.D16  end),' ') as D16 ,nvl(max(CASE WHEN nvl(b.D17,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D17  ELSE '#' || b.D17  end),' ') as D17 ,nvl(max(CASE WHEN nvl(b.D18,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D18  ELSE '#' || b.D18  end),' ') as D18 ,nvl(max(CASE WHEN nvl(b.D19,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D19  ELSE '#' || b.D19  end),' ') as D19 ,nvl(max(CASE WHEN nvl(b.D20,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D20  ELSE '#' || b.D20  end),' ') as D20 ,nvl(max(CASE WHEN nvl(b.D21,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D21  ELSE '#' || b.D21  end),' ') as D21 ,nvl(max(CASE WHEN nvl(b.D22,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D22  ELSE '#' || b.D22  end),' ') as D22 ,nvl(max(CASE WHEN nvl(b.D23,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D23  ELSE '#' || b.D23  end),' ') as D23 ,nvl(max(CASE WHEN nvl(b.D24,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D24  ELSE '#' || b.D24  end),' ') as D24 ,nvl(max(CASE WHEN nvl(b.D25,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D25  ELSE '#' || b.D25  end),' ') as D25 ,nvl(max(CASE WHEN nvl(b.D26,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D26  ELSE '#' || b.D26  end),' ') as D26 ,nvl(max(CASE WHEN nvl(b.D27,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D27  ELSE '#' || b.D27  end),' ') as D27 ,nvl(max(CASE WHEN nvl(b.D28,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D28  ELSE '#' || b.D28  end),' ') as D28 ,nvl(max(CASE WHEN nvl(b.D29,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D29  ELSE '#' || b.D29  end),' ') as D29 ,nvl(max(CASE WHEN nvl(b.D30,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D30  ELSE '#' || b.D30  end),' ') as D30 ,nvl(max(CASE WHEN nvl(b.D31,' ') = ' ' THEN ' ' WHEN b.route_nm = '38번' THEN b.D31  ELSE '#' || b.D31  end),' ') as D31 FROM 	TBL_MONTH_ARRANGE_DETAIL b where 	b.company_no = '100' AND b.BASE_YM = '2023-05' and b.DISPATCH_SEQ = 6 and b.init_seq = 0 AND b.CAR_REGNO LIKE  'SP%' GROUP BY b.CAR_REGNO,b.emp_nm ) SELECT b.*,'N' as bit ,	LENGTH (REGEXP_REPLACE(b.D1||b.D2||b.D3||b.D4||b.D5||b.D6||b.D7||b.D8||b.D9||b.D10||b.D11||b.D12||b.D13||b.D14||b.D15||b.D16||b.D17||b.D18||b.D19||b.D20||b.D21||b.D22||b.D23||b.D24||b.D25||b.D26||b.D27||b.D28||b.D29||b.D30||b.D31,'[0-9# ]','') ) AS tot_work_date FROM ( SELECT  a.prev_daily_seq,b.* FROM 	TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN sp_maxinfo b ON	a.emp_nm = b.EMP_NM AND  a.car_regno = b.CAR_REGNO where 	a.company_no = '100' AND a.BASE_YM = '2023-05' and a.DISPATCH_SEQ = 6 and a.init_seq = 0 AND a.CAR_REGNO LIKE  'SP%' AND a.emp_nm = decode('','',a.emp_nm,'') AND a.route_nm = '38번' ) b ORDER BY b.prev_daily_seq
 {executed in 19 msec}
2023-06-14 22:58:14.752 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
2023-06-14 22:58:14.753 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
41. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 22:58:14.759 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. WITH carInfo AS ( SELECT '감차후 총 차량댓수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 FROM 	TBL_MONTH_ARRANGE_BASIC b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 2  AND	b.CAR_REGNO  = '-' ), allocateInfo AS ( SELECT  '기사 배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D1 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D1 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D2 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D2 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D3 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D3 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D4 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D4 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D5 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D5 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D6 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D6 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D7 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D7 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D8 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D8 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D9 ,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D9 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D10,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D10 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D11,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D11 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D12,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D12 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D13,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D13 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D14,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D14 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D15,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D15 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D16,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D16 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D17,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D17 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D18,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D18 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D19,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D19 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D20,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D20 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D21,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D21 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D22,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D22 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D23,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D23 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D24,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D24 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D25,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D25 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D26,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D26 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D27,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D27 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.D28,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) D28 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d29,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d29 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d30,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d30 ,sum(CASE WHEN instr(REGEXP_REPLACE(b.d31,'[#!]','*') ,'*') > 0 THEN 0 ELSE 1 END) d31 FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 6  AND 	CAR_REGNO not like 'SP%' ) SELECT * FROM carInfo union all SELECT '감차후 총 운행횟수' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1 *2   , b.D2 *2    , b.D3  *2   , b.D4 *2    , b.D5 *2    , b.D6 *2    , b.D7 *2    , b.D8 *2    , b.D9 *2    , b.D10 *2 , b.D11 *2    , b.D12 *2    , b.D13 *2    , b.D14 *2    , b.D15 *2    , b.D16 *2    , b.D17 *2    , b.D18 *2    , b.D19 *2    , b.D20 *2 , b.D21 *2    , b.D22 *2    , b.D23 *2    , b.D24 *2    , b.D25 *2    , b.D26 *2    , b.D27 *2    , b.D28 *2    , b.D29 *2    , b.D30 *2 , b.D31 *2 FROM 	carInfo b union all SELECT  * FROM 	allocateInfo b union all SELECT  '기사 미배정 건수' as CAR_REGNO,'-' emp_nm,0 AS tot_work_date ,(a.d1  *2)- b.d1 ,(a.D2  *2)- b.D2 ,(a.D3  *2)- b.D3 ,(a.D4  *2)- b.D4 ,(a.D5  *2)- b.D5 ,(a.D6  *2)- b.D6 ,(a.D7  *2)- b.D7 ,(a.D8  *2)- b.D8 ,(a.D9  *2)- b.D9 ,(a.D10 *2)- b.D10 ,(a.D11 *2)- b.D11 ,(a.D12 *2)- b.D12 ,(a.D13 *2)- b.D13 ,(a.D14 *2)- b.D14 ,(a.D15 *2)- b.D15 ,(a.D16 *2)- b.D16 ,(a.D17 *2)- b.D17 ,(a.D18 *2)- b.D18 ,(a.D19 *2)- b.D19 ,(a.D20 *2)- b.D20 ,(a.D21 *2)- b.D21 ,(a.D22 *2)- b.D22 ,(a.D23 *2)- b.D23 ,(a.D24 *2)- b.D24 ,(a.D25 *2)- b.D25 ,(a.D26 *2)- b.D26 ,(a.D27 *2)- b.D27 ,(a.D28 *2)- b.D28 ,(a.d29 *2)- b.d29 ,(a.d30 *2)- b.d30 ,(a.d31 *2)- b.d31 FROM 	allocateInfo b,carInfo a
 {executed in 5 msec}
2023-06-14 22:58:14.760 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
2023-06-14 22:58:14.761 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. SELECT '[38번] 2023-05월'|| ' 배차현황' as CAR_REGNO,b.emp_nm,0 AS tot_work_date , b.D1    , b.D2    , b.D3    , b.D4    , b.D5    , b.D6    , b.D7    , b.D8    , b.D9    , b.D10 , b.D11    , b.D12    , b.D13    , b.D14    , b.D15    , b.D16    , b.D17    , b.D18    , b.D19    , b.D20 , b.D21    , b.D22    , b.D23    , b.D24    , b.D25    , b.D26    , b.D27    , b.D28    , b.D29    , b.D30 , b.D31 ,'N' as bit FROM 	TBL_MONTH_ARRANGE_DETAIL b WHERE 	b.company_no = '100' AND 	b.route_nm = '38번' AND    b.init_seq = 0 AND    b.BASE_YM = '2023-05' AND    b.DISPATCH_SEQ = 1
 {executed in 1 msec}
2023-06-14 22:58:14.762 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - WITH RECURSIVE countera(n) AS ( WITH routeCount AS ( SELECT 'a' ampm_gubun, a.AUTO_CNT FROM TBL_ROUTEINFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.ROUTE_NM    = '38번'	 union SELECT 'p' ampm_gubun, a.AUTO_CNT FROM TBL_ROUTEINFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.ROUTE_NM    = '38번' ) SELECT t.n+1,t.n as no,c.ampm_gubun,to_char(t.n,'00') || c.ampm_gubun AS gubun ,  CASE WHEN a.ampm_gubun = '' AND a.d1 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d1 ,'[*@?]') and a.d1  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d1        ,  CASE WHEN a.ampm_gubun = '' AND a.d2  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d2  ,'[*@?]') and a.d2   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d2     ,  CASE WHEN a.ampm_gubun = '' AND a.d3  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d3  ,'[*@?]') and a.d3   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d3     ,  CASE WHEN a.ampm_gubun = '' AND a.d4  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d4  ,'[*@?]') and a.d4   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d4     ,  CASE WHEN a.ampm_gubun = '' AND a.d5  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d5  ,'[*@?]') and a.d5   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d5     ,  CASE WHEN a.ampm_gubun = '' AND a.d6  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d6  ,'[*@?]') and a.d6   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d6     ,  CASE WHEN a.ampm_gubun = '' AND a.d7  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d7  ,'[*@?]') and a.d7   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d7     ,  CASE WHEN a.ampm_gubun = '' AND a.d8  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d8  ,'[*@?]') and a.d8   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d8     ,  CASE WHEN a.ampm_gubun = '' AND a.d9  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d9  ,'[*@?]') and a.d9   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d9     ,  CASE WHEN a.ampm_gubun = '' AND a.d10 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d10 ,'[*@?]') and a.d10  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d10    ,  CASE WHEN a.ampm_gubun = '' AND a.d11 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d11 ,'[*@?]') and a.d11  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d11    ,  CASE WHEN a.ampm_gubun = '' AND a.d12 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d12 ,'[*@?]') and a.d12  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d12    ,  CASE WHEN a.ampm_gubun = '' AND a.d13 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d13 ,'[*@?]') and a.d13  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d13    ,  CASE WHEN a.ampm_gubun = '' AND a.d14 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d14 ,'[*@?]') and a.d14  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d14    ,  CASE WHEN a.ampm_gubun = '' AND a.d15 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d15 ,'[*@?]') and a.d15  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d15    ,  CASE WHEN a.ampm_gubun = '' AND a.d16 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d16 ,'[*@?]') and a.d16  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d16    ,  CASE WHEN a.ampm_gubun = '' AND a.d17 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d17 ,'[*@?]') and a.d17  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d17    ,  CASE WHEN a.ampm_gubun = '' AND a.d18 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d18 ,'[*@?]') and a.d18  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d18    ,  CASE WHEN a.ampm_gubun = '' AND a.d19 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d19 ,'[*@?]') and a.d19  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d19    ,  CASE WHEN a.ampm_gubun = '' AND a.d20 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d20 ,'[*@?]') and a.d20  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d20    ,  CASE WHEN a.ampm_gubun = '' AND a.d21 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d21 ,'[*@?]') and a.d21  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d21    ,  CASE WHEN a.ampm_gubun = '' AND a.d22 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d22 ,'[*@?]') and a.d22  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d22    ,  CASE WHEN a.ampm_gubun = '' AND a.d23 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d23 ,'[*@?]') and a.d23  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d23    ,  CASE WHEN a.ampm_gubun = '' AND a.d24 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d24 ,'[*@?]') and a.d24  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d24    ,  CASE WHEN a.ampm_gubun = '' AND a.d25 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d25 ,'[*@?]') and a.d25  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d25    ,  CASE WHEN a.ampm_gubun = '' AND a.d26 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d26 ,'[*@?]') and a.d26  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d26    ,  CASE WHEN a.ampm_gubun = '' AND a.d27 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d27 ,'[*@?]') and a.d27  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d27    ,  CASE WHEN a.ampm_gubun = '' AND a.d28 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d28 ,'[*@?]') and a.d28  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d28    ,  CASE WHEN a.ampm_gubun = '' AND a.d29 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d29 ,'[*@?]') and a.d29  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d29    ,  CASE WHEN a.ampm_gubun = '' AND a.d30 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d30 ,'[*@?]') and a.d30  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d30    ,  CASE WHEN a.ampm_gubun = '' AND a.d31 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d31 ,'[*@?]') and a.d31  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d31    FROM t ,TBL_MONTH_ARRANGE_DETAIL a , routeCount c WHERE 	a.COMPANY_NO  = '100' AND 	a.ROUTE_NM    = '38번' AND 	a.BASE_YM = '2023-05' AND 	a.dispatch_seq = 6 AND     a.init_seq = 0 AND     t.n <= c.auto_cnt ) SELECT 	decode(ampm_gubun,'a','오전','오후') as ampm_gubun , no as seq,0 as cnt ,	max(d1 ) as d1 ,	max(d2 ) as d2 ,	max(d3 ) as d3 ,	max(d4 ) as d4 ,	max(d5 ) as d5 ,	max(d6 ) as d6 ,	max(d7 ) as d7 ,	max(d8 ) as d8 ,	max(d9 ) as d9 ,	max(d10) as d10 ,	max(d11) as d11 ,	max(d12) as d12 ,	max(d13) as d13 ,	max(d14) as d14 ,	max(d15) as d15 ,	max(d16) as d16 ,	max(d17) as d17 ,	max(d18) as d18 ,	max(d19) as d19 ,	max(d20) as d20 ,	max(d21) as d21 ,	max(d22) as d22 ,	max(d23) as d23 ,	max(d24) as d24 ,	max(d25) as d25 ,	max(d26) as d26 ,	max(d27) as d27 ,	max(d28) as d28 ,	max(d29) as d29 ,	max(d30) as d30 ,	max(d31) as d31 from countera GROUP BY ampm_gubun,gubun
2023-06-14 22:58:14.833 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
41. WITH RECURSIVE countera(n) AS ( WITH routeCount AS ( SELECT 'a' ampm_gubun, a.AUTO_CNT FROM TBL_ROUTEINFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.ROUTE_NM    = '38번'	 union SELECT 'p' ampm_gubun, a.AUTO_CNT FROM TBL_ROUTEINFO a WHERE 	a.COMPANY_NO  = '100' AND 	a.ROUTE_NM    = '38번' ) SELECT t.n+1,t.n as no,c.ampm_gubun,to_char(t.n,'00') || c.ampm_gubun AS gubun ,  CASE WHEN a.ampm_gubun = '' AND a.d1 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d1 ,'[*@?]') and a.d1  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d1        ,  CASE WHEN a.ampm_gubun = '' AND a.d2  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d2  ,'[*@?]') and a.d2   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d2     ,  CASE WHEN a.ampm_gubun = '' AND a.d3  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d3  ,'[*@?]') and a.d3   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d3     ,  CASE WHEN a.ampm_gubun = '' AND a.d4  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d4  ,'[*@?]') and a.d4   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d4     ,  CASE WHEN a.ampm_gubun = '' AND a.d5  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d5  ,'[*@?]') and a.d5   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d5     ,  CASE WHEN a.ampm_gubun = '' AND a.d6  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d6  ,'[*@?]') and a.d6   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d6     ,  CASE WHEN a.ampm_gubun = '' AND a.d7  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d7  ,'[*@?]') and a.d7   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d7     ,  CASE WHEN a.ampm_gubun = '' AND a.d8  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d8  ,'[*@?]') and a.d8   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d8     ,  CASE WHEN a.ampm_gubun = '' AND a.d9  like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d9  ,'[*@?]') and a.d9   like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d9     ,  CASE WHEN a.ampm_gubun = '' AND a.d10 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d10 ,'[*@?]') and a.d10  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d10    ,  CASE WHEN a.ampm_gubun = '' AND a.d11 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d11 ,'[*@?]') and a.d11  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d11    ,  CASE WHEN a.ampm_gubun = '' AND a.d12 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d12 ,'[*@?]') and a.d12  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d12    ,  CASE WHEN a.ampm_gubun = '' AND a.d13 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d13 ,'[*@?]') and a.d13  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d13    ,  CASE WHEN a.ampm_gubun = '' AND a.d14 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d14 ,'[*@?]') and a.d14  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d14    ,  CASE WHEN a.ampm_gubun = '' AND a.d15 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d15 ,'[*@?]') and a.d15  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d15    ,  CASE WHEN a.ampm_gubun = '' AND a.d16 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d16 ,'[*@?]') and a.d16  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d16    ,  CASE WHEN a.ampm_gubun = '' AND a.d17 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d17 ,'[*@?]') and a.d17  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d17    ,  CASE WHEN a.ampm_gubun = '' AND a.d18 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d18 ,'[*@?]') and a.d18  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d18    ,  CASE WHEN a.ampm_gubun = '' AND a.d19 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d19 ,'[*@?]') and a.d19  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d19    ,  CASE WHEN a.ampm_gubun = '' AND a.d20 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d20 ,'[*@?]') and a.d20  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d20    ,  CASE WHEN a.ampm_gubun = '' AND a.d21 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d21 ,'[*@?]') and a.d21  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d21    ,  CASE WHEN a.ampm_gubun = '' AND a.d22 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d22 ,'[*@?]') and a.d22  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d22    ,  CASE WHEN a.ampm_gubun = '' AND a.d23 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d23 ,'[*@?]') and a.d23  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d23    ,  CASE WHEN a.ampm_gubun = '' AND a.d24 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d24 ,'[*@?]') and a.d24  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d24    ,  CASE WHEN a.ampm_gubun = '' AND a.d25 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d25 ,'[*@?]') and a.d25  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d25    ,  CASE WHEN a.ampm_gubun = '' AND a.d26 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d26 ,'[*@?]') and a.d26  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d26    ,  CASE WHEN a.ampm_gubun = '' AND a.d27 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d27 ,'[*@?]') and a.d27  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d27    ,  CASE WHEN a.ampm_gubun = '' AND a.d28 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d28 ,'[*@?]') and a.d28  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d28    ,  CASE WHEN a.ampm_gubun = '' AND a.d29 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d29 ,'[*@?]') and a.d29  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d29    ,  CASE WHEN a.ampm_gubun = '' AND a.d30 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d30 ,'[*@?]') and a.d30  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d30    ,  CASE WHEN a.ampm_gubun = '' AND a.d31 like t.n || c.ampm_gubun ||'%' THEN emp_nm ||'*' WHEN not REGEXP_LIKE(a.d31 ,'[*@?]') and a.d31  like t.n || c.ampm_gubun  THEN EMP_NM ELSE '' END d31    FROM t ,TBL_MONTH_ARRANGE_DETAIL a , routeCount c WHERE 	a.COMPANY_NO  = '100' AND 	a.ROUTE_NM    = '38번' AND 	a.BASE_YM = '2023-05' AND 	a.dispatch_seq = 6 AND     a.init_seq = 0 AND     t.n <= c.auto_cnt ) SELECT 	decode(ampm_gubun,'a','오전','오후') as ampm_gubun , no as seq,0 as cnt ,	max(d1 ) as d1 ,	max(d2 ) as d2 ,	max(d3 ) as d3 ,	max(d4 ) as d4 ,	max(d5 ) as d5 ,	max(d6 ) as d6 ,	max(d7 ) as d7 ,	max(d8 ) as d8 ,	max(d9 ) as d9 ,	max(d10) as d10 ,	max(d11) as d11 ,	max(d12) as d12 ,	max(d13) as d13 ,	max(d14) as d14 ,	max(d15) as d15 ,	max(d16) as d16 ,	max(d17) as d17 ,	max(d18) as d18 ,	max(d19) as d19 ,	max(d20) as d20 ,	max(d21) as d21 ,	max(d22) as d22 ,	max(d23) as d23 ,	max(d24) as d24 ,	max(d25) as d25 ,	max(d26) as d26 ,	max(d27) as d27 ,	max(d28) as d28 ,	max(d29) as d29 ,	max(d30) as d30 ,	max(d31) as d31 from countera GROUP BY ampm_gubun,gubun
 {executed in 71 msec}
2023-06-14 23:03:12.476 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 23:03:12.477 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 23:03:12.506 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 29 msec}
2023-06-14 23:03:14.180 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b2fea22
2023-06-14 23:03:14.181 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 23:03:14.184 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 1 msec}
2023-06-14 23:03:14.212 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 23:03:14.212 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 23:03:14.213 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 23:03:14.215 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-14 23:03:14.263 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where file_id = '강근원'
 {executed in 0 msec}
2023-06-14 23:03:16.889 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@af2626c1
2023-06-14 23:03:16.890 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-06-14 23:03:16.891 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 23:03:16.898 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 6 msec}
2023-06-14 23:03:16.900 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-14 23:03:17.733 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4644e664
2023-06-14 23:03:17.733 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-14 23:03:17.734 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 23:03:17.736 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-14 23:03:17.737 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '강근원' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 0 msec}
2023-06-14 23:03:19.687 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d161aa48
2023-06-14 23:03:19.687 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
2023-06-14 23:03:19.688 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 23:03:19.689 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 23:03:19.690 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '강근원' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 23:03:19.731 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@faceefd3
2023-06-14 23:03:19.734 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권오현'
	order by 1
 {executed in 2 msec}
2023-06-14 23:03:19.760 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6100aff9
2023-06-14 23:03:19.760 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
2023-06-14 23:03:19.761 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 23:03:19.762 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권오현' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 23:03:19.801 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where file_id = '권오현'
 {executed in 0 msec}
2023-06-14 23:03:23.541 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@830a091a
2023-06-14 23:03:23.543 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 23:03:23.545 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박근호' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박근호' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박근호' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박근호' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박근호' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='박근호'
	order by 1
 {executed in 2 msec}
2023-06-14 23:03:23.570 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e93bc940
2023-06-14 23:03:23.570 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '박근호' order by a.base_year desc,a.acc_time desc
2023-06-14 23:03:23.572 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '박근호' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 23:03:23.573 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '박근호' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-14 23:03:23.623 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from TBL_FILE_INFO where file_id = '박근호'
 {executed in 0 msec}
2023-06-14 23:03:26.963 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c70045b9
2023-06-14 23:03:26.963 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '박근호' ORDER BY b.base_ym desc
2023-06-14 23:03:26.964 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 23:03:26.967 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '박근호' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-14 23:03:26.970 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '박근호' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-14 23:03:28.262 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5e1f055c
2023-06-14 23:03:28.262 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '박근호' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-14 23:03:28.263 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 23:03:28.264 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '박근호' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-14 23:03:28.265 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '박근호' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-14 23:11:12.549 INFO  [MessageBroker-4] [o.s.w.s.c.WebSocketMessageBrokerStats] - WebSocketSession[0 current WS(0)-HttpStream(0)-HttpPoll(0), 0 total, 0 closed abnormally (0 connect failure, 0 send limit, 0 transport error)], stompSubProtocol[processed CONNECT(0)-CONNECTED(0)-DISCONNECT(0)], stompBrokerRelay[null], inboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], outboundChannel[pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0], sockJsScheduler[pool size = 8, active threads = 1, queued tasks = 0, completed tasks = 7]
2023-06-14 23:11:53.564 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 23:11:53.565 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-14 23:11:53.581 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 16 msec}
2023-06-14 23:12:06.757 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
2023-06-14 23:12:06.758 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-14 23:12:06.759 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' order by a.emp_nm
 {executed in 0 msec}
