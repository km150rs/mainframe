2023-06-22 08:45:37.739 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=10h6m48s22ms367Âµs).
2023-06-22 08:45:58.247 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-22 08:45:58.247 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-22 08:45:58.247 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-22 08:45:58.248 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-22 09:22:07.173 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-22 09:22:07.175 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-22 09:22:07.175 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-06-22 09:22:07.175 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-22 09:22:07.175 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-06-22 09:22:07.848 ERROR [http-nio-10010-exec-7] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$93b6435.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 09:22:07.853 ERROR [http-nio-10010-exec-7] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$93b6435.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 09:22:07.856 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-22 09:22:07.856 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-22 09:22:07.856 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-22 09:22:07.856 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-22 09:22:07.856 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-22 09:22:07.979 ERROR [http-nio-10010-exec-7] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$93b6435.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 09:22:07.980 ERROR [http-nio-10010-exec-7] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$93b6435.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 09:22:07.981 ERROR [http-nio-10010-exec-7] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$93b6435.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 97 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 100 common frames omitted
2023-06-22 09:22:08.257 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-22 09:22:08.258 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-22 09:22:08.258 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-22 09:22:08.258 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-22 09:22:08.258 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-22 09:22:10.103 ERROR [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {FAILED after 2 msec}
org.h2.jdbc.JdbcSQLNonTransientConnectionException: The database has been closed [90098-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:622)
	at org.h2.engine.SessionRemote.done(SessionRemote.java:611)
	at org.h2.command.CommandRemote.executeQuery(CommandRemote.java:178)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:222)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at net.sf.log4jdbc.sql.jdbcapi.StatementSpy.execute(StatementSpy.java:923)
	at com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
	at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:179)
	at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:155)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:100)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.obtainConnection(NonContextualJdbcConnectionAccess.java:35)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.acquireConnectionIfNeeded(LogicalConnectionManagedImpl.java:106)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.getPhysicalConnection(LogicalConnectionManagedImpl.java:136)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.connection(StatementPreparerImpl.java:50)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$5.doPrepare(StatementPreparerImpl.java:149)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:176)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareQueryStatement(StatementPreparerImpl.java:151)
	at org.hibernate.loader.Loader.prepareQueryStatement(Loader.java:2082)
	at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:2012)
	at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1990)
	at org.hibernate.loader.Loader.doQuery(Loader.java:949)
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:351)
	at org.hibernate.loader.Loader.doList(Loader.java:2787)
	at org.hibernate.loader.Loader.doList(Loader.java:2770)
	at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2604)
	at org.hibernate.loader.Loader.list(Loader.java:2599)
	at org.hibernate.loader.custom.CustomLoader.list(CustomLoader.java:338)
	at org.hibernate.internal.SessionImpl.listCustomQuery(SessionImpl.java:2243)
	at org.hibernate.internal.AbstractSharedSessionContract.list(AbstractSharedSessionContract.java:1069)
	at org.hibernate.query.internal.NativeQueryImpl.doList(NativeQueryImpl.java:170)
	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1506)
	at org.hibernate.query.internal.AbstractProducedQuery.getSingleResult(AbstractProducedQuery.java:1554)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$DeferredQueryInvocationHandler.invoke(SharedEntityManagerCreator.java:404)
	at jdk.proxy2/jdk.proxy2.$Proxy165.getSingleResult(Unknown Source)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:221)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:91)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:136)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:125)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:605)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:144)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$ExposeRepositoryInvocationInterceptor.invoke(CrudMethodMetadataPostProcessor.java:364)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy141.testserId(Unknown Source)
	at com.pjy.dashboard.service.MemberServiceImpl.loadUserByUsername(MemberServiceImpl.java:41)
	at com.pjy.dashboard.service.MemberServiceImpl$$FastClassBySpringCGLIB$$6a5d756c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at com.pjy.dashboard.service.MemberServiceImpl$$EnhancerBySpringCGLIB$$8c102b3c.loadUserByUsername(<generated>)
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108)
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:200)
	at org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.attemptAuthentication(UsernamePasswordAuthenticationFilter.java:94)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$93b6435.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 09:22:10.104 WARN  [http-nio-10010-exec-7] [com.zaxxer.hikari.pool.PoolBase] - H2 - Failed to validate connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@496ec976 (The database has been closed [90098-200]). Possibly consider using a shorter maxLifetime value.
2023-06-22 09:22:10.105 ERROR [H2 connection closer] [jdbc.sqltiming] - 31. Connection.close()
org.h2.jdbc.JdbcSQLNonTransientConnectionException: The database has been closed [90098-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:622)
	at org.h2.engine.SessionRemote.done(SessionRemote.java:611)
	at org.h2.engine.SessionRemote.close(SessionRemote.java:557)
	at org.h2.jdbc.JdbcConnection.close(JdbcConnection.java:453)
	at net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy.close(ConnectionSpy.java:1018)
	at com.zaxxer.hikari.pool.PoolBase.quietlyCloseConnection(PoolBase.java:135)
	at com.zaxxer.hikari.pool.HikariPool.lambda$closeConnection$1(HikariPool.java:441)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 09:22:10.106 ERROR [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {FAILED after 1 msec}
org.h2.jdbc.JdbcSQLNonTransientConnectionException: The database has been closed [90098-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:622)
	at org.h2.engine.SessionRemote.done(SessionRemote.java:611)
	at org.h2.command.CommandRemote.executeQuery(CommandRemote.java:178)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:222)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at net.sf.log4jdbc.sql.jdbcapi.StatementSpy.execute(StatementSpy.java:923)
	at com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
	at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:179)
	at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:155)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:100)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.obtainConnection(NonContextualJdbcConnectionAccess.java:35)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.acquireConnectionIfNeeded(LogicalConnectionManagedImpl.java:106)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.getPhysicalConnection(LogicalConnectionManagedImpl.java:136)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.connection(StatementPreparerImpl.java:50)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$5.doPrepare(StatementPreparerImpl.java:149)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:176)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareQueryStatement(StatementPreparerImpl.java:151)
	at org.hibernate.loader.Loader.prepareQueryStatement(Loader.java:2082)
	at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:2012)
	at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1990)
	at org.hibernate.loader.Loader.doQuery(Loader.java:949)
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:351)
	at org.hibernate.loader.Loader.doList(Loader.java:2787)
	at org.hibernate.loader.Loader.doList(Loader.java:2770)
	at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2604)
	at org.hibernate.loader.Loader.list(Loader.java:2599)
	at org.hibernate.loader.custom.CustomLoader.list(CustomLoader.java:338)
	at org.hibernate.internal.SessionImpl.listCustomQuery(SessionImpl.java:2243)
	at org.hibernate.internal.AbstractSharedSessionContract.list(AbstractSharedSessionContract.java:1069)
	at org.hibernate.query.internal.NativeQueryImpl.doList(NativeQueryImpl.java:170)
	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1506)
	at org.hibernate.query.internal.AbstractProducedQuery.getSingleResult(AbstractProducedQuery.java:1554)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$DeferredQueryInvocationHandler.invoke(SharedEntityManagerCreator.java:404)
	at jdk.proxy2/jdk.proxy2.$Proxy165.getSingleResult(Unknown Source)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:221)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:91)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:136)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:125)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:605)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:144)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$ExposeRepositoryInvocationInterceptor.invoke(CrudMethodMetadataPostProcessor.java:364)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy141.testserId(Unknown Source)
	at com.pjy.dashboard.service.MemberServiceImpl.loadUserByUsername(MemberServiceImpl.java:41)
	at com.pjy.dashboard.service.MemberServiceImpl$$FastClassBySpringCGLIB$$6a5d756c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at com.pjy.dashboard.service.MemberServiceImpl$$EnhancerBySpringCGLIB$$8c102b3c.loadUserByUsername(<generated>)
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108)
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:200)
	at org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.attemptAuthentication(UsernamePasswordAuthenticationFilter.java:94)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$93b6435.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 09:22:10.107 WARN  [http-nio-10010-exec-7] [com.zaxxer.hikari.pool.PoolBase] - H2 - Failed to validate connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@46c3f730 (The database has been closed [90098-200]). Possibly consider using a shorter maxLifetime value.
2023-06-22 09:22:10.108 ERROR [H2 connection closer] [jdbc.sqltiming] - 32. Connection.close()
org.h2.jdbc.JdbcSQLNonTransientConnectionException: The database has been closed [90098-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:622)
	at org.h2.engine.SessionRemote.done(SessionRemote.java:611)
	at org.h2.engine.SessionRemote.close(SessionRemote.java:557)
	at org.h2.jdbc.JdbcConnection.close(JdbcConnection.java:453)
	at net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy.close(ConnectionSpy.java:1018)
	at com.zaxxer.hikari.pool.PoolBase.quietlyCloseConnection(PoolBase.java:135)
	at com.zaxxer.hikari.pool.HikariPool.lambda$closeConnection$1(HikariPool.java:441)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 09:22:10.109 ERROR [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {FAILED after 1 msec}
org.h2.jdbc.JdbcSQLNonTransientConnectionException: The database has been closed [90098-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:622)
	at org.h2.engine.SessionRemote.done(SessionRemote.java:611)
	at org.h2.command.CommandRemote.executeQuery(CommandRemote.java:178)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:222)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at net.sf.log4jdbc.sql.jdbcapi.StatementSpy.execute(StatementSpy.java:923)
	at com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
	at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:179)
	at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:155)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:100)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.obtainConnection(NonContextualJdbcConnectionAccess.java:35)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.acquireConnectionIfNeeded(LogicalConnectionManagedImpl.java:106)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.getPhysicalConnection(LogicalConnectionManagedImpl.java:136)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.connection(StatementPreparerImpl.java:50)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$5.doPrepare(StatementPreparerImpl.java:149)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:176)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareQueryStatement(StatementPreparerImpl.java:151)
	at org.hibernate.loader.Loader.prepareQueryStatement(Loader.java:2082)
	at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:2012)
	at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1990)
	at org.hibernate.loader.Loader.doQuery(Loader.java:949)
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:351)
	at org.hibernate.loader.Loader.doList(Loader.java:2787)
	at org.hibernate.loader.Loader.doList(Loader.java:2770)
	at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2604)
	at org.hibernate.loader.Loader.list(Loader.java:2599)
	at org.hibernate.loader.custom.CustomLoader.list(CustomLoader.java:338)
	at org.hibernate.internal.SessionImpl.listCustomQuery(SessionImpl.java:2243)
	at org.hibernate.internal.AbstractSharedSessionContract.list(AbstractSharedSessionContract.java:1069)
	at org.hibernate.query.internal.NativeQueryImpl.doList(NativeQueryImpl.java:170)
	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1506)
	at org.hibernate.query.internal.AbstractProducedQuery.getSingleResult(AbstractProducedQuery.java:1554)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$DeferredQueryInvocationHandler.invoke(SharedEntityManagerCreator.java:404)
	at jdk.proxy2/jdk.proxy2.$Proxy165.getSingleResult(Unknown Source)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:221)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:91)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:136)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:125)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:605)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:144)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$ExposeRepositoryInvocationInterceptor.invoke(CrudMethodMetadataPostProcessor.java:364)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy141.testserId(Unknown Source)
	at com.pjy.dashboard.service.MemberServiceImpl.loadUserByUsername(MemberServiceImpl.java:41)
	at com.pjy.dashboard.service.MemberServiceImpl$$FastClassBySpringCGLIB$$6a5d756c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at com.pjy.dashboard.service.MemberServiceImpl$$EnhancerBySpringCGLIB$$8c102b3c.loadUserByUsername(<generated>)
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108)
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:200)
	at org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.attemptAuthentication(UsernamePasswordAuthenticationFilter.java:94)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$93b6435.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 09:22:10.110 WARN  [http-nio-10010-exec-7] [com.zaxxer.hikari.pool.PoolBase] - H2 - Failed to validate connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@2cabd410 (The database has been closed [90098-200]). Possibly consider using a shorter maxLifetime value.
2023-06-22 09:22:10.111 ERROR [H2 connection closer] [jdbc.sqltiming] - 33. Connection.close()
org.h2.jdbc.JdbcSQLNonTransientConnectionException: The database has been closed [90098-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:622)
	at org.h2.engine.SessionRemote.done(SessionRemote.java:611)
	at org.h2.engine.SessionRemote.close(SessionRemote.java:557)
	at org.h2.jdbc.JdbcConnection.close(JdbcConnection.java:453)
	at net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy.close(ConnectionSpy.java:1018)
	at com.zaxxer.hikari.pool.PoolBase.quietlyCloseConnection(PoolBase.java:135)
	at com.zaxxer.hikari.pool.HikariPool.lambda$closeConnection$1(HikariPool.java:441)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 09:22:10.111 ERROR [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
34. SELECT SYSTIMESTAMP FROM DUAL
 {FAILED after 1 msec}
org.h2.jdbc.JdbcSQLNonTransientConnectionException: The database has been closed [90098-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:622)
	at org.h2.engine.SessionRemote.done(SessionRemote.java:611)
	at org.h2.command.CommandRemote.executeQuery(CommandRemote.java:178)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:222)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at net.sf.log4jdbc.sql.jdbcapi.StatementSpy.execute(StatementSpy.java:923)
	at com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
	at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:179)
	at com.zaxxer.hikari.pool.HikariPool.getConnection(HikariPool.java:155)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:100)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.internal.NonContextualJdbcConnectionAccess.obtainConnection(NonContextualJdbcConnectionAccess.java:35)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.acquireConnectionIfNeeded(LogicalConnectionManagedImpl.java:106)
	at org.hibernate.resource.jdbc.internal.LogicalConnectionManagedImpl.getPhysicalConnection(LogicalConnectionManagedImpl.java:136)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.connection(StatementPreparerImpl.java:50)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$5.doPrepare(StatementPreparerImpl.java:149)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:176)
	at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareQueryStatement(StatementPreparerImpl.java:151)
	at org.hibernate.loader.Loader.prepareQueryStatement(Loader.java:2082)
	at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:2012)
	at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1990)
	at org.hibernate.loader.Loader.doQuery(Loader.java:949)
	at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:351)
	at org.hibernate.loader.Loader.doList(Loader.java:2787)
	at org.hibernate.loader.Loader.doList(Loader.java:2770)
	at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2604)
	at org.hibernate.loader.Loader.list(Loader.java:2599)
	at org.hibernate.loader.custom.CustomLoader.list(CustomLoader.java:338)
	at org.hibernate.internal.SessionImpl.listCustomQuery(SessionImpl.java:2243)
	at org.hibernate.internal.AbstractSharedSessionContract.list(AbstractSharedSessionContract.java:1069)
	at org.hibernate.query.internal.NativeQueryImpl.doList(NativeQueryImpl.java:170)
	at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1506)
	at org.hibernate.query.internal.AbstractProducedQuery.getSingleResult(AbstractProducedQuery.java:1554)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.orm.jpa.SharedEntityManagerCreator$DeferredQueryInvocationHandler.invoke(SharedEntityManagerCreator.java:404)
	at jdk.proxy2/jdk.proxy2.$Proxy165.getSingleResult(Unknown Source)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:221)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:91)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:136)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:125)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:605)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:295)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:144)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$ExposeRepositoryInvocationInterceptor.invoke(CrudMethodMetadataPostProcessor.java:364)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at jdk.proxy3/jdk.proxy3.$Proxy141.testserId(Unknown Source)
	at com.pjy.dashboard.service.MemberServiceImpl.loadUserByUsername(MemberServiceImpl.java:41)
	at com.pjy.dashboard.service.MemberServiceImpl$$FastClassBySpringCGLIB$$6a5d756c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at com.pjy.dashboard.service.MemberServiceImpl$$EnhancerBySpringCGLIB$$8c102b3c.loadUserByUsername(<generated>)
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:108)
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:144)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:175)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:200)
	at org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.attemptAuthentication(UsernamePasswordAuthenticationFilter.java:94)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:212)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$93b6435.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 09:22:10.112 WARN  [http-nio-10010-exec-7] [com.zaxxer.hikari.pool.PoolBase] - H2 - Failed to validate connection net.sf.log4jdbc.sql.jdbcapi.ConnectionSpy@63416c2 (The database has been closed [90098-200]). Possibly consider using a shorter maxLifetime value.
2023-06-22 09:22:36.538 INFO  [RMI TCP Connection(78)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-06-22 09:22:36.572 INFO  [RMI TCP Connection(78)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-06-22 09:22:36.575 INFO  [RMI TCP Connection(78)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-06-22 09:23:16.584 INFO  [RMI TCP Connection(78)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-06-22 09:23:18.899 INFO  [RMI TCP Connection(78)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-06-22 09:23:32.875 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 22944 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-22 09:23:32.882 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-22 09:23:33.024 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-22 09:23:33.024 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-22 09:23:36.314 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-22 09:23:36.315 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-22 09:23:36.488 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 164ms. Found 3 JPA repository interfaces.
2023-06-22 09:23:36.880 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-22 09:23:36.880 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-22 09:23:36.933 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 09:23:36.934 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 09:23:36.935 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 09:23:36.935 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 55ms. Found 0 JDBC repository interfaces.
2023-06-22 09:23:37.421 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-22 09:23:37.496 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-22 09:23:37.497 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-22 09:23:37.497 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-22 09:23:37.497 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-22 09:23:37.497 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 09:23:37.497 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-22 09:23:37.497 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-22 09:23:37.497 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 09:23:37.498 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 09:23:37.498 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 09:23:37.498 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-22 09:23:37.498 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 09:23:37.580 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$65f092cd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:23:37.638 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-22 09:23:37.736 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$4fe6f6fa] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:23:37.819 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:23:37.822 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@1bd4d4b7' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:23:37.823 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$74bb99ac] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:23:37.834 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$9a10b1c2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:23:37.838 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:23:37.840 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:23:37.863 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$b7392ec0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:23:37.892 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$36b97bf2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:23:38.031 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-22 09:23:38.036 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-22 09:23:38.492 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-22 09:23:38.509 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-22 09:23:38.520 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-22 09:23:38.520 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-22 09:23:38.925 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-22 09:23:38.937 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-22 09:23:38.937 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 5913 ms
2023-06-22 09:23:39.825 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@24171206 with name: jasyptStringEncryptor
2023-06-22 09:23:39.868 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-22 09:51:58.806 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 3460 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-22 09:51:58.808 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-22 09:51:58.867 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-22 09:51:58.867 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-22 09:52:01.550 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-22 09:52:01.550 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-22 09:52:01.696 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 134ms. Found 3 JPA repository interfaces.
2023-06-22 09:52:02.031 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-22 09:52:02.031 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-22 09:52:02.075 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 09:52:02.076 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 09:52:02.077 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 09:52:02.077 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 46ms. Found 0 JDBC repository interfaces.
2023-06-22 09:52:02.520 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-22 09:52:02.587 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-22 09:52:02.588 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-22 09:52:02.588 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-22 09:52:02.588 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-22 09:52:02.588 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 09:52:02.589 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-22 09:52:02.589 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-22 09:52:02.589 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 09:52:02.589 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 09:52:02.589 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 09:52:02.589 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-22 09:52:02.590 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 09:52:02.651 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$c2b396e6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:52:02.700 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-22 09:52:02.783 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$aca9fb13] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:52:02.869 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:52:02.872 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@3cc7b600' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:52:02.877 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$d17e9dc5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:52:02.888 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$f6d3b5db] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:52:02.893 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:52:02.894 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:52:02.914 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$13fc32d9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:52:02.943 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$937c800b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:52:03.062 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-22 09:52:03.067 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-22 09:52:03.481 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-22 09:52:03.498 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-22 09:52:03.510 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-22 09:52:03.510 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-22 09:52:04.180 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-22 09:52:04.192 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-22 09:52:04.192 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 5325 ms
2023-06-22 09:52:04.986 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@a64660b with name: jasyptStringEncryptor
2023-06-22 09:52:05.063 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-22 09:52:05.157 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 8 msec}
2023-06-22 09:52:05.163 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-22 09:52:05.916 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-22 09:52:06.379 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-22 09:52:06.500 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-22 09:52:06.502 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-22 09:52:06.702 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-22 09:52:07.029 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 09:52:07.053 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-22 09:52:07.823 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 09:52:07.826 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-22 09:52:07.927 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-22 09:52:08.188 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-22 09:52:09.267 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-22 09:52:09.278 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-22 09:52:09.457 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-22 09:52:09.458 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-22 09:52:09.458 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-22 09:52:09.458 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-22 09:52:09.458 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-22 09:52:09.458 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-22 09:52:09.458 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-22 09:52:09.458 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-22 09:52:09.458 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-22 09:52:09.607 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3da72474, org.springframework.security.web.context.SecurityContextPersistenceFilter@3bf36c92, org.springframework.security.web.header.HeaderWriterFilter@578dde48, org.springframework.web.filter.CorsFilter@3ae8bbc3, org.springframework.security.web.authentication.logout.LogoutFilter@4648f1d7, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@7dd83beb, org.springframework.security.web.session.ConcurrentSessionFilter@79fa3034, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@54e0dd48, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@995ce51, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@27961a9, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4b8fe5ba, org.springframework.security.web.session.SessionManagementFilter@11522bbb, org.springframework.security.web.access.ExceptionTranslationFilter@ecc02f8, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6cdfbdf2]
2023-06-22 09:52:09.629 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-22 09:52:09.979 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-22 09:52:10.104 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-22 09:52:10.522 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 09:52:11.346 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-22 09:52:11.373 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-22 09:52:11.506 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-22 09:52:11.509 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-22 09:52:11.572 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-22 09:52:11.578 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 13.409 seconds (JVM running for 16.056)
2023-06-22 09:52:11.578 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-22 09:52:11.579 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-22 09:52:11.579 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-22 09:52:12.905 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-22 09:52:12.905 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-22 09:52:12.927 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 22 ms
2023-06-22 09:55:28.722 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-22 09:55:28.723 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-22 09:55:28.723 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-22 09:55:28.723 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-22 09:55:28.723 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-22 09:55:30.913 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 09:55:30.927 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 2 msec}
2023-06-22 09:55:30.960 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-22 09:55:31.050 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$H0htvnOBi9uhD9/QEUnrs.vOF7eLma5/X1e7FQHRo2P/b0eCt89xe
2023-06-22 09:55:31.140 INFO  [http-nio-10010-exec-10] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-22 09:59:06.582 INFO  [RMI TCP Connection(18)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-06-22 09:59:06.614 INFO  [RMI TCP Connection(18)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-06-22 09:59:06.620 INFO  [RMI TCP Connection(18)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-06-22 09:59:06.634 INFO  [RMI TCP Connection(18)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-06-22 09:59:06.684 INFO  [RMI TCP Connection(18)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-06-22 09:59:10.611 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 4552 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-22 09:59:10.616 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-22 09:59:10.677 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-22 09:59:10.677 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-22 09:59:11.922 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-22 09:59:11.922 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-22 09:59:12.074 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 140ms. Found 3 JPA repository interfaces.
2023-06-22 09:59:12.427 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-22 09:59:12.427 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-22 09:59:12.473 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 09:59:12.474 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 09:59:12.474 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 09:59:12.474 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 46ms. Found 0 JDBC repository interfaces.
2023-06-22 09:59:12.930 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-22 09:59:13.001 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-22 09:59:13.001 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-22 09:59:13.001 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-22 09:59:13.002 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-22 09:59:13.002 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 09:59:13.002 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-22 09:59:13.002 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-22 09:59:13.002 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 09:59:13.002 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 09:59:13.003 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 09:59:13.003 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-22 09:59:13.003 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 09:59:13.065 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$49836b29] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:59:13.117 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-22 09:59:13.207 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$3379cf56] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:59:13.292 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:59:13.296 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@12d11d11' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:59:13.300 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$584e7208] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:59:13.313 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$7da38a1e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:59:13.317 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:59:13.318 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:59:13.339 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$9acc071c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:59:13.370 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$1a4c544e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 09:59:13.508 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-22 09:59:13.514 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-22 09:59:13.949 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-22 09:59:13.966 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-22 09:59:13.976 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-22 09:59:13.977 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-22 09:59:14.349 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-22 09:59:14.362 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-22 09:59:14.362 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3685 ms
2023-06-22 09:59:15.198 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@8c86cbc with name: jasyptStringEncryptor
2023-06-22 09:59:15.248 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-22 09:59:15.334 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-06-22 09:59:15.339 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-22 09:59:16.098 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-22 09:59:16.427 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-22 09:59:16.499 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-22 09:59:16.501 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-22 09:59:16.650 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-22 09:59:16.881 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 09:59:16.899 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-22 09:59:17.609 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 09:59:17.612 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-22 09:59:17.698 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-22 09:59:17.952 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-22 09:59:19.002 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-22 09:59:19.014 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-22 09:59:19.191 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-22 09:59:19.192 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-22 09:59:19.192 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-22 09:59:19.192 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-22 09:59:19.192 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-22 09:59:19.192 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-22 09:59:19.192 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-22 09:59:19.192 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-22 09:59:19.192 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-22 09:59:19.355 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@47e677e0, org.springframework.security.web.context.SecurityContextPersistenceFilter@413465a9, org.springframework.security.web.header.HeaderWriterFilter@c5aee5e, org.springframework.web.filter.CorsFilter@74188968, org.springframework.security.web.authentication.logout.LogoutFilter@159265f8, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@695f7d63, org.springframework.security.web.session.ConcurrentSessionFilter@77106126, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@26ee6b18, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1bd23883, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3549a31c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@319a4f56, org.springframework.security.web.session.SessionManagementFilter@43f5c3ad, org.springframework.security.web.access.ExceptionTranslationFilter@6d03cee4, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@22fb5df9]
2023-06-22 09:59:19.384 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-22 09:59:19.735 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-22 09:59:19.808 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-22 09:59:20.214 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 09:59:21.014 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-22 09:59:21.043 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-22 09:59:21.188 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-22 09:59:21.191 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-22 09:59:21.245 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-22 09:59:21.250 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.147 seconds (JVM running for 12.478)
2023-06-22 09:59:21.250 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-22 09:59:21.251 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-22 09:59:21.251 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-22 09:59:22.236 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-22 09:59:22.237 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-22 09:59:22.258 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 21 ms
2023-06-22 10:00:12.904 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-06-22 10:00:12.937 INFO  [RMI TCP Connection(11)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-06-22 10:00:12.940 INFO  [RMI TCP Connection(11)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-06-22 10:00:12.951 INFO  [RMI TCP Connection(11)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-06-22 10:00:12.992 INFO  [RMI TCP Connection(11)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-06-22 10:00:16.714 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 17924 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-22 10:00:16.719 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-22 10:00:16.777 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-22 10:00:16.777 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-22 10:00:17.925 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-22 10:00:17.925 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-22 10:00:18.078 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 142ms. Found 3 JPA repository interfaces.
2023-06-22 10:00:18.417 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-22 10:00:18.417 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-22 10:00:18.462 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 10:00:18.463 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 10:00:18.464 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 10:00:18.464 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 47ms. Found 0 JDBC repository interfaces.
2023-06-22 10:00:18.903 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-22 10:00:18.976 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-22 10:00:18.976 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-22 10:00:18.976 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-22 10:00:18.977 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-22 10:00:18.977 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 10:00:18.977 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-22 10:00:18.977 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-22 10:00:18.978 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 10:00:18.978 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 10:00:18.978 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 10:00:18.978 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-22 10:00:18.978 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 10:00:19.038 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$a3ed78c1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:00:19.095 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-22 10:00:19.181 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$8de3dcee] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:00:19.261 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:00:19.264 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@6a823bbb' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:00:19.269 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$b2b87fa0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:00:19.281 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$d80d97b6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:00:19.286 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:00:19.287 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:00:19.308 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$f53614b4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:00:19.338 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$74b661e6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:00:19.475 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-22 10:00:19.480 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-22 10:00:19.905 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-22 10:00:19.921 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-22 10:00:19.932 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-22 10:00:19.933 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-22 10:00:20.297 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-22 10:00:20.308 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-22 10:00:20.309 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3532 ms
2023-06-22 10:00:21.132 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@799f9419 with name: jasyptStringEncryptor
2023-06-22 10:00:21.190 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-22 10:00:21.278 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 9 msec}
2023-06-22 10:00:21.283 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-22 10:00:22.051 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-22 10:00:22.375 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-22 10:00:22.455 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-22 10:00:22.457 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-22 10:00:22.606 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-22 10:00:22.836 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 10:00:22.853 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-22 10:00:23.553 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 10:00:23.557 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-22 10:00:23.611 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-22 10:00:23.870 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-22 10:00:24.920 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-22 10:00:24.931 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-22 10:00:25.116 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-22 10:00:25.117 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-22 10:00:25.117 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-22 10:00:25.117 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-22 10:00:25.117 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-22 10:00:25.117 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-22 10:00:25.117 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-22 10:00:25.117 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-22 10:00:25.117 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-22 10:00:25.279 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3756e9b7, org.springframework.security.web.context.SecurityContextPersistenceFilter@2f839284, org.springframework.security.web.header.HeaderWriterFilter@2e5ad795, org.springframework.web.filter.CorsFilter@1d99bdd1, org.springframework.security.web.authentication.logout.LogoutFilter@4dc09bf4, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@25854888, org.springframework.security.web.session.ConcurrentSessionFilter@1bd23883, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@6a53b0b4, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5e9fd4f5, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@71aff158, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4c9a0da2, org.springframework.security.web.session.SessionManagementFilter@70702ac8, org.springframework.security.web.access.ExceptionTranslationFilter@5c6b24a2, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@176ab7c6]
2023-06-22 10:00:25.302 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-22 10:00:25.660 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-22 10:00:25.734 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-22 10:00:26.160 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-06-22 10:00:26.958 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-22 10:00:26.985 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-22 10:00:27.134 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-22 10:00:27.137 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-22 10:00:27.181 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-22 10:00:27.186 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 10.93 seconds (JVM running for 12.258)
2023-06-22 10:00:27.186 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-22 10:00:27.186 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-22 10:00:27.186 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-22 10:00:27.933 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-22 10:00:27.933 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-22 10:00:27.954 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 21 ms
2023-06-22 10:05:39.872 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 10:05:39.887 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
1. DELETE FROM TBL_ISC_DRIVER_INFO WHERE company_no = '100'
 {executed in 2 msec}
2023-06-22 10:05:39.902 INFO  [http-nio-10010-exec-5] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBL_ISC_DRIVER_INFO (company_no,emp_nm,driver_id,sex,regulargb) values ( '100' , :emp_nm , :driver_id , :sex , :regulargb )
2023-06-22 10:05:39.917 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 3 msec}
2023-06-22 10:05:39.927 ERROR [http-nio-10010-exec-5] [c.p.d.core.error.GlobalExceptionHandler] - handleEntityNotFoundException
org.springframework.dao.InvalidDataAccessApiUsageException: No value supplied for the SQL parameter 'regulargb': No value registered for key 'regulargb'
	at org.springframework.jdbc.core.namedparam.NamedParameterUtils.buildValueArray(NamedParameterUtils.java:355)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$2.setValues(NamedParameterJdbcTemplate.java:371)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$2(JdbcTemplate.java:944)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:617)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:647)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:936)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:366)
	at com.pjy.dashboard.dao.DynamicSqlDao.batchInsert(DynamicSqlDao.java:737)
	at com.pjy.dashboard.dao.DynamicSqlDao$$FastClassBySpringCGLIB$$8af24191.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at com.pjy.dashboard.dao.DynamicSqlH2Dao$$EnhancerBySpringCGLIB$$f3eff80.batchInsert(<generated>)
	at com.pjy.dashboard.service.DynamicSqlService.insertInfo(DynamicSqlService.java:597)
	at com.pjy.dashboard.controller.TestController.BUS_insertInfo(TestController.java:397)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$cedb64d9.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 10:05:39.958 WARN  [http-nio-10010-exec-5] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [org.springframework.dao.InvalidDataAccessApiUsageException: No value supplied for the SQL parameter 'regulargb': No value registered for key 'regulargb']
2023-06-22 10:07:01.279 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 10:07:01.282 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
2. DELETE FROM TBL_ISC_DRIVER_INFO WHERE company_no = '100'
 {executed in 0 msec}
2023-06-22 10:07:01.297 INFO  [http-nio-10010-exec-10] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBL_ISC_DRIVER_INFO (company_no,emp_nm,driver_id,sex,regular_gb) values ( '100' , :emp_nm , :driver_id , :sex , :regular_gb )
2023-06-22 10:07:01.299 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 10:10:07.490 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 9656 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-22 10:10:07.495 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-22 10:10:07.550 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-22 10:10:07.550 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-22 10:10:08.715 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-22 10:10:08.715 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-22 10:10:08.870 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 144ms. Found 3 JPA repository interfaces.
2023-06-22 10:10:09.220 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-22 10:10:09.221 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-22 10:10:09.266 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 10:10:09.267 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 10:10:09.268 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 10:10:09.268 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 47ms. Found 0 JDBC repository interfaces.
2023-06-22 10:10:09.710 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-22 10:10:09.778 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-22 10:10:09.778 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-22 10:10:09.779 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-22 10:10:09.779 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-22 10:10:09.779 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 10:10:09.779 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-22 10:10:09.779 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-22 10:10:09.780 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 10:10:09.780 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 10:10:09.780 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 10:10:09.780 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-22 10:10:09.780 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 10:10:09.841 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$af4896f9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:10:09.895 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-22 10:10:09.982 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$993efb26] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:10:10.064 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:10:10.066 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@27c911b1' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:10:10.071 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$be139dd8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:10:10.083 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$e368b5ee] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:10:10.087 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:10:10.089 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:10:10.112 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$9132ec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:10:10.138 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$8011801e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:10:10.269 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-22 10:10:10.275 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-22 10:10:10.708 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-22 10:10:10.725 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-22 10:10:10.735 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-22 10:10:10.736 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-22 10:10:11.122 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-22 10:10:11.134 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-22 10:10:11.134 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3584 ms
2023-06-22 10:10:11.967 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@6b006035 with name: jasyptStringEncryptor
2023-06-22 10:10:12.025 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-22 10:10:12.120 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-06-22 10:10:12.125 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-22 10:10:12.883 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-22 10:10:13.230 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-22 10:10:13.303 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-22 10:10:13.306 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-22 10:10:13.469 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-22 10:10:13.698 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 10:10:13.715 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-22 10:10:14.421 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-06-22 10:10:14.423 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-22 10:10:14.476 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-22 10:10:14.728 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-22 10:10:15.804 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-22 10:10:15.816 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-22 10:10:16.014 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-22 10:10:16.014 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-22 10:10:16.014 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-22 10:10:16.014 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-22 10:10:16.014 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-22 10:10:16.015 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-22 10:10:16.015 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-22 10:10:16.015 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-22 10:10:16.015 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-22 10:10:16.185 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@56d8fc96, org.springframework.security.web.context.SecurityContextPersistenceFilter@508e21c2, org.springframework.security.web.header.HeaderWriterFilter@46589ac9, org.springframework.web.filter.CorsFilter@3e974bd6, org.springframework.security.web.authentication.logout.LogoutFilter@94b40a7, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@7e6677c8, org.springframework.security.web.session.ConcurrentSessionFilter@507b3d59, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@6dc381a9, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2f6f74a8, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@24ac1965, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1cd26f28, org.springframework.security.web.session.SessionManagementFilter@3ddd5131, org.springframework.security.web.access.ExceptionTranslationFilter@1899cd53, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@7f9de76b]
2023-06-22 10:10:16.207 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-22 10:10:16.563 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-22 10:10:16.638 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-22 10:10:17.052 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 10:10:17.850 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-22 10:10:17.880 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-22 10:10:18.027 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-22 10:10:18.031 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-22 10:10:18.079 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-22 10:10:18.084 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.073 seconds (JVM running for 12.46)
2023-06-22 10:10:18.085 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-22 10:10:18.085 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-22 10:10:18.085 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-22 10:10:19.253 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-22 10:10:19.253 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-22 10:10:19.274 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 21 ms
2023-06-22 10:10:27.294 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-22 10:10:27.295 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-22 10:10:27.295 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-22 10:10:27.295 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-22 10:10:27.295 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-22 10:10:28.790 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-06-22 10:10:28.796 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-06-22 10:10:28.819 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-22 10:10:28.914 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$mgyWLRoULUUkBoPEgHaKe..MCDrF/NR5MRFAiLaLVn/pjD1QNgMse
2023-06-22 10:10:29.010 INFO  [http-nio-10010-exec-5] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-22 10:10:40.355 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 10:10:40.374 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
1. DELETE FROM TBL_ISC_DRIVER_INFO WHERE company_no = '100'
 {executed in 6 msec}
2023-06-22 10:10:40.390 INFO  [http-nio-10010-exec-4] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBL_ISC_DRIVER_INFO (company_no,emp_nm,driver_id,sex,regular_gb) values ( '100' , :emp_nm , :driver_id , :sex , :regular_gb )
2023-06-22 10:10:40.400 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 10:12:42.435 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 10:12:42.443 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
2. DELETE FROM TBL_ISC_DRIVER_INFO WHERE company_no = '100'
 {executed in 7 msec}
2023-06-22 10:12:42.461 INFO  [http-nio-10010-exec-2] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBL_ISC_DRIVER_INFO (company_no,emp_nm,driver_id,sex,regular_gb) values ( '100' , :emp_nm , :driver_id , :sex , :regular_gb )
2023-06-22 10:12:42.463 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 10:21:51.878 INFO  [RMI TCP Connection(24)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-06-22 10:21:51.912 INFO  [RMI TCP Connection(24)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-06-22 10:21:51.916 INFO  [RMI TCP Connection(24)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-06-22 10:21:51.925 INFO  [RMI TCP Connection(24)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-06-22 10:21:51.960 INFO  [RMI TCP Connection(24)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-06-22 10:21:55.623 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 3136 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-22 10:21:55.629 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-22 10:21:55.682 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-22 10:21:55.682 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-22 10:21:56.857 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-22 10:21:56.858 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-22 10:21:57.011 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 142ms. Found 3 JPA repository interfaces.
2023-06-22 10:21:57.363 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-22 10:21:57.364 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-22 10:21:57.407 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 10:21:57.408 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 10:21:57.408 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 10:21:57.409 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 45ms. Found 0 JDBC repository interfaces.
2023-06-22 10:21:57.844 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-22 10:21:57.913 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-22 10:21:57.913 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-22 10:21:57.913 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-22 10:21:57.913 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-22 10:21:57.914 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 10:21:57.914 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-22 10:21:57.914 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-22 10:21:57.914 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 10:21:57.914 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 10:21:57.914 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 10:21:57.914 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-22 10:21:57.914 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 10:21:57.979 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$1e4334af] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:21:58.036 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-22 10:21:58.126 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$83998dc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:21:58.211 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:21:58.214 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@12d11d11' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:21:58.215 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$2d0e3b8e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:21:58.225 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$526353a4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:21:58.229 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:21:58.231 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:21:58.251 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$6f8bd0a2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:21:58.280 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$ef0c1dd4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 10:21:58.411 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-22 10:21:58.416 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-22 10:21:58.838 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-22 10:21:58.855 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-22 10:21:58.865 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-22 10:21:58.865 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-22 10:21:59.240 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-22 10:21:59.252 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-22 10:21:59.252 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3570 ms
2023-06-22 10:22:00.104 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@3743ea2a with name: jasyptStringEncryptor
2023-06-22 10:22:00.166 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-22 10:22:00.257 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 9 msec}
2023-06-22 10:22:00.261 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-22 10:22:01.140 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-22 10:22:01.543 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-22 10:22:01.623 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-22 10:22:01.626 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-22 10:22:01.782 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-22 10:22:02.057 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 10:22:02.075 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-22 10:22:02.804 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 10:22:02.807 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 2 msec}
2023-06-22 10:22:02.871 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-22 10:22:03.124 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-22 10:22:04.201 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-22 10:22:04.212 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-22 10:22:04.410 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-22 10:22:04.410 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-22 10:22:04.410 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-22 10:22:04.410 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-22 10:22:04.410 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-22 10:22:04.410 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-22 10:22:04.411 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-22 10:22:04.411 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-22 10:22:04.411 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-22 10:22:04.573 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@dd2d588, org.springframework.security.web.context.SecurityContextPersistenceFilter@1bd23883, org.springframework.security.web.header.HeaderWriterFilter@15906c74, org.springframework.web.filter.CorsFilter@79ffeaa5, org.springframework.security.web.authentication.logout.LogoutFilter@7714f7e7, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@2575c4d0, org.springframework.security.web.session.ConcurrentSessionFilter@abafc36, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@4209b234, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@147c00ee, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6dbb6a10, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@499c6f3b, org.springframework.security.web.session.SessionManagementFilter@6b4b42da, org.springframework.security.web.access.ExceptionTranslationFilter@54eb2114, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5e82f1a4]
2023-06-22 10:22:04.595 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-22 10:22:04.959 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-22 10:22:05.034 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-22 10:22:05.457 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 10:22:06.312 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-22 10:22:06.341 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-22 10:22:06.486 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-22 10:22:06.489 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-22 10:22:06.533 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-22 10:22:06.539 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.38 seconds (JVM running for 12.709)
2023-06-22 10:22:06.540 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-22 10:22:06.540 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-22 10:22:06.540 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-22 10:22:07.384 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-22 10:22:07.385 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-22 10:22:07.407 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 22 ms
2023-06-22 10:22:27.951 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 10:22:27.966 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
1. DELETE FROM TBL_ISC_DRIVER_INFO WHERE company_no = '100'
 {executed in 3 msec}
2023-06-22 10:22:27.982 INFO  [http-nio-10010-exec-10] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBL_ISC_DRIVER_INFO (company_no,emp_nm,driver_id,sex,regular_gb) values ( '100' , :emp_nm , :driver_id , :sex , :regular_gb )
2023-06-22 10:22:27.991 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 10:24:54.683 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 10:24:54.686 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
2. DELETE FROM TBL_ISC_DRIVER_INFO WHERE company_no = '100'
 {executed in 2 msec}
2023-06-22 10:24:54.701 INFO  [http-nio-10010-exec-7] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBL_ISC_DRIVER_INFO (company_no,emp_nm,driver_id,sex,regular_gb) values ( '100' , :emp_nm , :driver_id , :sex , :regular_gb )
2023-06-22 10:24:54.703 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 10:25:22.058 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 10:25:22.060 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
3. DELETE FROM TBL_ISC_DRIVER_INFO WHERE company_no = '100'
 {executed in 2 msec}
2023-06-22 10:25:22.073 INFO  [http-nio-10010-exec-7] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBL_ISC_DRIVER_INFO (company_no,emp_nm,driver_id,sex,regular_gb) values ( '100' , :emp_nm , :driver_id , :sex , :regular_gb )
2023-06-22 10:25:22.075 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 10:26:54.125 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3d88806c
2023-06-22 10:26:54.125 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ISC_DRIVER_INFO} 
2023-06-22 10:26:54.209 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBL_ISC_DRIVER_INFO a where   a.company_no = '100' order by a.emp_nm
2023-06-22 10:26:54.212 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 10:26:54.216 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   ROWNUM AS no,a.* from    TBL_ISC_DRIVER_INFO a where   a.company_no = '100' order by a.emp_nm
 {executed in 4 msec}
2023-06-22 10:26:54.225 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   ROWNUM AS no,a.* from    TBL_ISC_DRIVER_INFO a where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-06-22 10:27:02.332 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3d88806c
2023-06-22 10:27:02.332 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ISC_DRIVER_INFO} 
2023-06-22 10:27:02.332 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBL_ISC_DRIVER_INFO a where   a.company_no = '100' order by a.emp_nm
2023-06-22 10:27:02.333 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
4. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 10:27:02.336 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   ROWNUM AS no,a.* from    TBL_ISC_DRIVER_INFO a where   a.company_no = '100' order by a.emp_nm
 {executed in 2 msec}
2023-06-22 10:27:02.339 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
4. select   ROWNUM AS no,a.* from    TBL_ISC_DRIVER_INFO a where   a.company_no = '100' order by a.emp_nm
 {executed in 3 msec}
2023-06-22 11:17:03.366 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-22 11:17:03.366 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-22 11:17:03.366 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-22 11:17:03.366 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-22 12:25:57.763 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=37m26s205ms5Âµs900ns).
2023-06-22 12:31:18.004 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-22 12:31:18.004 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-22 12:31:18.004 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-06-22 12:31:18.004 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-22 12:31:18.004 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-06-22 12:31:18.231 ERROR [http-nio-10010-exec-7] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$7a037e64.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 12:31:18.236 ERROR [http-nio-10010-exec-7] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$7a037e64.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 12:31:18.239 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-22 12:31:18.239 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-22 12:31:18.239 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-22 12:31:18.239 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-22 12:31:18.239 INFO  [http-nio-10010-exec-7] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-22 12:31:18.377 ERROR [http-nio-10010-exec-7] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$7a037e64.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 12:31:18.379 ERROR [http-nio-10010-exec-7] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$7a037e64.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 12:31:18.380 ERROR [http-nio-10010-exec-7] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$7a037e64.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 97 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 100 common frames omitted
2023-06-22 12:31:18.748 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-22 12:31:18.748 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-22 12:31:18.748 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-22 12:31:18.748 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-22 12:31:18.748 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-22 12:31:20.274 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
54. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 12:31:20.278 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
54. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-06-22 12:31:20.302 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-22 12:31:20.392 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$MMyMUGK.se56yE4PtF09Ku0afY4k6bnyZwgdpiiqy7b5FCMc2vRXS
2023-06-22 12:31:20.482 INFO  [http-nio-10010-exec-7] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-22 12:31:48.268 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 12:31:48.270 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
54. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 12:31:48.346 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 76 msec}
2023-06-22 12:32:01.652 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 12:32:01.654 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
54. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 12:32:01.655 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 12:32:12.252 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 12:32:12.254 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
54. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 12:32:12.255 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 12:32:19.717 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@42f588df
2023-06-22 12:32:19.717 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-22 12:32:19.718 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '@empNm' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-22 12:32:19.719 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
54. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 12:32:19.725 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '@empNm' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 6 msec}
2023-06-22 12:32:19.727 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '@empNm' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 12:32:21.897 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@42f588df
2023-06-22 12:32:21.897 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-22 12:32:21.897 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '@empNm' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-22 12:32:21.898 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
54. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 12:32:21.899 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '@empNm' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 12:32:21.901 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '@empNm' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 0 msec}
2023-06-22 12:32:23.279 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@42f588df
2023-06-22 12:32:23.279 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-22 12:32:23.279 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '@empNm' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-22 12:32:23.280 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
54. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 12:32:23.281 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '@empNm' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 12:32:23.282 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '@empNm' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 12:32:26.085 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@42f588df
2023-06-22 12:32:26.085 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-22 12:32:26.085 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '@empNm' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-22 12:32:26.086 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
54. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 12:32:26.088 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '@empNm' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 12:32:26.090 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '@empNm' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 2 msec}
2023-06-22 12:32:26.804 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@abd6c93c
2023-06-22 12:32:26.804 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-22 12:32:26.804 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '@empNm' ORDER BY b.base_ym desc
2023-06-22 12:32:26.806 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
54. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 12:32:26.809 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '@empNm' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-22 12:32:26.812 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '@empNm' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-22 12:32:27.376 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ce124cc3
2023-06-22 12:32:27.376 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 12:32:27.376 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '@empNm' order by a.base_year desc,a.acc_time desc
2023-06-22 12:32:27.377 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
54. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 12:32:27.379 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '@empNm' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 12:32:27.380 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '@empNm' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 12:32:28.301 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@42f588df
2023-06-22 12:32:28.301 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-22 12:32:28.301 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '@empNm' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-22 12:32:28.303 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
54. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 12:32:28.305 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '@empNm' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 12:32:28.306 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '@empNm' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 12:32:37.695 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@42f588df
2023-06-22 12:32:37.695 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-22 12:32:37.695 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '@empNm' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-22 12:32:37.696 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
54. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 12:32:37.698 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '@empNm' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 0 msec}
2023-06-22 12:32:37.700 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '@empNm' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 12:32:39.402 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@abd6c93c
2023-06-22 12:32:39.402 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-22 12:32:39.402 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '@empNm' ORDER BY b.base_ym desc
2023-06-22 12:32:39.403 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
54. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 12:32:39.406 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '@empNm' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-22 12:32:39.409 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '@empNm' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-22 12:32:41.221 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ce124cc3
2023-06-22 12:32:41.221 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 12:32:41.221 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '@empNm' order by a.base_year desc,a.acc_time desc
2023-06-22 12:32:41.222 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
54. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 12:32:41.223 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '@empNm' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 12:32:41.224 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
54. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '@empNm' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 12:51:46.033 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 12:51:46.034 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 12:51:46.055 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 21 msec}
2023-06-22 12:51:48.891 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 12:51:48.975 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 12:51:48.982 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
64. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 3 msec}
2023-06-22 12:51:49.027 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 12:51:49.028 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 12:51:49.028 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 12:51:49.030 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 12:51:49.031 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 12:51:49.085 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
64. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 1 msec}
2023-06-22 12:51:51.176 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8c713736
2023-06-22 12:51:51.176 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-22 12:51:51.177 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
2023-06-22 12:51:51.178 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 12:51:51.182 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
 {executed in 4 msec}
2023-06-22 12:51:51.186 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-22 12:52:35.898 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 12:52:35.899 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 12:52:35.901 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 12:52:37.116 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@33f61355
2023-06-22 12:52:37.117 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 12:52:37.121 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
64. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì'
	order by 1
 {executed in 2 msec}
2023-06-22 12:52:37.156 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fb059105
2023-06-22 12:52:37.157 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 12:52:37.157 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
2023-06-22 12:52:37.158 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 12:52:37.160 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 12:52:37.203 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
64. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ë³ì'
 {executed in 0 msec}
2023-06-22 12:52:38.442 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 12:52:38.445 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 12:52:38.450 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
64. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 12:52:38.463 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
64. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 1 msec}
2023-06-22 12:52:38.483 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 12:52:38.483 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 12:52:38.483 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 12:52:38.484 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 12:52:38.486 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 12:52:40.081 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8c713736
2023-06-22 12:52:40.081 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-22 12:52:40.082 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
2023-06-22 12:52:40.083 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 12:52:40.086 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-22 12:52:40.091 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-22 12:52:56.748 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 12:52:56.749 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 12:52:56.751 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 12:52:57.774 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 12:52:57.775 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 12:52:57.779 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
64. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 3 msec}
2023-06-22 12:52:57.793 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
64. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 12:52:57.817 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 12:52:57.817 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 12:52:57.817 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 12:52:57.818 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 12:52:57.820 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 12:52:58.929 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 12:52:58.930 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 12:52:58.930 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 12:52:58.931 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 12:52:59.329 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT 	BASE_YM ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 398 msec}
2023-06-22 12:52:59.711 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT 	BASE_YM ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 382 msec}
2023-06-22 12:54:22.920 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 12:54:22.921 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 12:54:22.922 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 12:54:23.945 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 12:54:23.946 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 12:54:23.951 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
64. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 12:54:23.963 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
64. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 12:54:23.989 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 12:54:23.989 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 12:54:23.990 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 12:54:23.991 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 12:54:23.993 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 12:54:25.033 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8c713736
2023-06-22 12:54:25.033 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-22 12:54:25.033 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
2023-06-22 12:54:25.034 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 12:54:25.039 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-22 12:54:25.043 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-22 12:54:25.555 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@238ff6d9
2023-06-22 12:54:25.555 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-22 12:54:25.555 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-22 12:54:25.556 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 12:54:25.558 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 12:54:25.559 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 12:54:26.360 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 12:54:26.360 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 12:54:26.360 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 12:54:26.361 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 12:54:26.735 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT 	BASE_YM ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 374 msec}
2023-06-22 12:54:27.121 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT 	BASE_YM ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 386 msec}
2023-06-22 12:54:31.306 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6af01c2d
2023-06-22 12:54:31.307 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-22 12:54:31.307 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-22 12:54:31.308 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 12:54:31.309 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 12:54:31.311 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 12:54:32.266 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 12:54:32.266 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 12:54:32.266 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 12:54:32.269 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-06-22 12:54:32.678 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT 	BASE_YM ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 409 msec}
2023-06-22 12:54:33.042 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT 	BASE_YM ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 363 msec}
2023-06-22 12:58:30.489 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 12:58:30.490 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 12:58:30.492 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 12:58:31.405 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 12:58:31.407 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 12:58:31.411 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
64. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 12:58:31.422 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
64. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 12:58:31.446 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 12:58:31.446 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 12:58:31.446 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 12:58:31.448 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 12:58:31.449 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 12:58:32.520 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 12:58:32.520 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 12:58:32.521 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 12:58:32.522 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 12:58:32.925 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT 	BASE_YM ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 403 msec}
2023-06-22 12:58:33.351 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT 	BASE_YM ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 426 msec}
2023-06-22 12:59:07.932 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 12:59:07.933 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 12:59:07.934 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 12:59:09.532 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 12:59:09.533 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 12:59:09.536 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
64. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 12:59:09.550 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
64. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 1 msec}
2023-06-22 12:59:09.571 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 12:59:09.571 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 12:59:09.571 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 12:59:09.573 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 12:59:09.574 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 12:59:10.505 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 12:59:10.505 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 12:59:10.506 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 12:59:10.507 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 12:59:10.907 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT 	BASE_YM ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 400 msec}
2023-06-22 12:59:11.268 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT 	BASE_YM ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 361 msec}
2023-06-22 12:59:47.413 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 12:59:47.414 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 12:59:47.415 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 12:59:48.639 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 12:59:48.641 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 12:59:48.645 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
64. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 3 msec}
2023-06-22 12:59:48.658 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
64. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 12:59:48.681 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 12:59:48.681 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 12:59:48.681 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 12:59:48.682 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 12:59:48.684 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 12:59:49.663 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 12:59:49.663 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 12:59:49.663 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 12:59:49.665 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 12:59:50.043 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT 	BASE_YM ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 378 msec}
2023-06-22 12:59:50.459 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT 	BASE_YM ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 416 msec}
2023-06-22 13:05:49.664 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:05:49.666 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:05:49.693 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 27 msec}
2023-06-22 13:05:50.762 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:05:50.763 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:05:50.767 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
72. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 1 msec}
2023-06-22 13:05:50.780 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
72. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 1 msec}
2023-06-22 13:05:50.806 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:05:50.806 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:05:50.806 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:05:50.808 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:05:50.809 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:05:51.821 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:05:51.821 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:05:51.821 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt
2023-06-22 13:05:51.822 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
72. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:05:51.825 ERROR [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
72. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt
 {FAILED after 2 msec}
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "BASE_YM" not found; SQL statement:
SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt [42122-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.engine.SessionRemote.done(SessionRemote.java:611)
	at org.h2.command.CommandRemote.prepare(CommandRemote.java:85)
	at org.h2.command.CommandRemote.<init>(CommandRemote.java:51)
	at org.h2.engine.SessionRemote.prepareCommand(SessionRemote.java:481)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeQuery(JdbcStatement.java:78)
	at net.sf.log4jdbc.sql.jdbcapi.StatementSpy.executeQuery(StatementSpy.java:731)
	at com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
	at com.zaxxer.hikari.pool.HikariProxyStatement.executeQuery(HikariProxyStatement.java)
	at org.springframework.jdbc.core.JdbcTemplate$1QueryStatementCallback.doInStatement(JdbcTemplate.java:439)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:376)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:452)
	at com.pjy.dashboard.dao.DynamicSqlDao.getHeaderBySql(DynamicSqlDao.java:209)
	at com.pjy.dashboard.dao.DynamicSqlDao$$FastClassBySpringCGLIB$$8af24191.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:685)
	at com.pjy.dashboard.dao.DynamicSqlH2Dao$$EnhancerBySpringCGLIB$$770ea943.getHeaderBySql(<generated>)
	at com.pjy.dashboard.service.DynamicSqlService.getHeaderBySql(DynamicSqlService.java:69)
	at com.pjy.dashboard.service.DynamicSqlService.getSqlFilter(DynamicSqlService.java:129)
	at com.pjy.dashboard.controller.TestController.dynamicSqlFilter(TestController.java:205)
	at jdk.internal.reflect.GeneratedMethodAccessor162.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$7a037e64.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 13:05:51.828 ERROR [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - jdbcTemplate error: StatementCallback; bad SQL grammar [SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt]; nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "BASE_YM" not found; SQL statement:
SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt [42122-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.expression.ExpressionColumn.getColumnException(ExpressionColumn.java:163)
	at org.h2.expression.ExpressionColumn.optimize(ExpressionColumn.java:145)
	at org.h2.command.dml.Select.prepare(Select.java:1206)
	at org.h2.command.Parser.prepareCommand(Parser.java:744)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.server.TcpServerThread.process(TcpServerThread.java:278)
	at org.h2.server.TcpServerThread.run(TcpServerThread.java:183)
	at java.lang.Thread.run(Unknown Source)

2023-06-22 13:05:51.838 WARN  [http-nio-10010-exec-10] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [com.pjy.dashboard.core.error.exception.BusinessException: jdbcTemplate query error]
2023-06-22 13:06:54.988 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f60ce011
2023-06-22 13:06:54.988 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:06:54.994 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:06:54.995 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:06:54.997 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:06:54.999 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:06:55.040 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7b5638a9
2023-06-22 13:06:55.044 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì'
	order by 1
 {executed in 2 msec}
2023-06-22 13:06:55.079 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4265b659
2023-06-22 13:06:55.079 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:06:55.079 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:06:55.080 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:06:55.081 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:06:55.123 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
74. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ë³ì'
 {executed in 1 msec}
2023-06-22 13:06:56.255 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2efd6261
2023-06-22 13:06:56.256 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:06:56.259 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 13:06:56.272 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
74. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 1 msec}
2023-06-22 13:06:56.296 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f60ce011
2023-06-22 13:06:56.296 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:06:56.296 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:06:56.297 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 13:06:56.298 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:06:57.384 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:06:57.384 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:06:57.384 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:06:57.386 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:06:57.778 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 392 msec}
2023-06-22 13:06:58.163 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 385 msec}
2023-06-22 13:07:39.218 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:07:39.219 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:07:39.239 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 20 msec}
2023-06-22 13:07:41.720 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:07:41.722 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:07:41.726 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 13:07:41.737 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
74. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 1 msec}
2023-06-22 13:07:41.768 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:07:41.768 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:07:41.768 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:07:41.769 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:07:41.771 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 13:07:42.927 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:07:42.927 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:07:42.927 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:07:42.928 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:07:43.396 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 467 msec}
2023-06-22 13:07:43.749 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 353 msec}
2023-06-22 13:09:37.284 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:09:37.285 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:09:37.287 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 13:09:38.668 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:09:38.669 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:09:38.675 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 4 msec}
2023-06-22 13:09:38.686 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
74. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 13:09:38.717 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:09:38.717 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:09:38.717 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:09:38.719 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 2 msec}
2023-06-22 13:09:38.720 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:09:39.799 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:09:39.800 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:09:39.800 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:09:39.801 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:09:40.210 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 408 msec}
2023-06-22 13:09:40.632 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 422 msec}
2023-06-22 13:10:16.062 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:10:16.063 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:10:16.064 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 13:10:18.219 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:10:18.220 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:10:18.222 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 1 msec}
2023-06-22 13:10:18.232 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
74. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 13:10:18.248 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:10:18.248 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:10:18.248 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:10:18.249 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:10:18.251 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 13:10:20.009 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:10:20.009 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:10:20.009 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:10:20.010 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:10:20.387 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 377 msec}
2023-06-22 13:10:20.758 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 371 msec}
2023-06-22 13:10:26.838 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6af01c2d
2023-06-22 13:10:26.838 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-22 13:10:26.838 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-22 13:10:26.839 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:10:26.839 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 0 msec}
2023-06-22 13:10:26.840 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 0 msec}
2023-06-22 13:10:28.926 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:10:28.926 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:10:28.927 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:10:28.928 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:10:29.326 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 398 msec}
2023-06-22 13:10:29.718 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 392 msec}
2023-06-22 13:18:22.743 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:18:22.744 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:18:22.746 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 13:18:23.504 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:18:23.505 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:18:23.508 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 13:18:23.517 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
74. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 1 msec}
2023-06-22 13:18:23.541 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:18:23.541 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:18:23.541 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:18:23.543 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:18:23.544 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:18:24.733 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2c6fcb39
2023-06-22 13:18:24.733 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:18:24.733 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '@baseYear' || '%' GROUP BY BASE_YM
2023-06-22 13:18:24.734 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:18:24.740 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '@baseYear' || '%' GROUP BY BASE_YM
 {executed in 6 msec}
2023-06-22 13:18:24.744 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '@baseYear' || '%' GROUP BY BASE_YM
 {executed in 3 msec}
2023-06-22 13:21:01.285 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:21:01.286 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:21:01.288 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 13:21:02.109 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:21:02.111 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:21:02.115 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 13:21:02.126 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
74. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 13:21:02.146 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:21:02.146 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:21:02.146 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:21:02.146 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 13:21:02.147 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:21:03.308 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2c6fcb39
2023-06-22 13:21:03.308 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:21:03.308 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '@baseYear' || '%' GROUP BY BASE_YM
2023-06-22 13:21:03.310 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:21:03.314 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '@baseYear' || '%' GROUP BY BASE_YM
 {executed in 4 msec}
2023-06-22 13:21:03.319 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '@baseYear' || '%' GROUP BY BASE_YM
 {executed in 5 msec}
2023-06-22 13:24:03.801 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:24:03.802 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:24:03.804 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-06-22 13:24:04.998 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:24:04.999 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:24:05.003 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 13:24:05.012 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
74. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 13:24:05.032 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:24:05.032 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:24:05.032 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:24:05.033 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:24:05.035 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 13:24:06.053 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2c6fcb39
2023-06-22 13:24:06.053 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:24:06.053 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '@baseYear' || '%' GROUP BY BASE_YM
2023-06-22 13:24:06.054 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:24:06.058 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '@baseYear' || '%' GROUP BY BASE_YM
 {executed in 4 msec}
2023-06-22 13:24:06.062 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '@baseYear' || '%' GROUP BY BASE_YM
 {executed in 3 msec}
2023-06-22 13:25:12.708 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:25:12.709 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
76. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:25:12.727 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
76. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 18 msec}
2023-06-22 13:25:13.755 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:25:13.757 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
79. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-06-22 13:25:13.760 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
79. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 1 msec}
2023-06-22 13:25:13.769 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
79. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 13:25:13.794 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:25:13.794 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:25:13.794 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:25:13.795 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
79. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:25:13.796 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
79. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 13:25:14.741 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2c6fcb39
2023-06-22 13:25:14.742 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:25:14.742 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '@baseYear' || '%' GROUP BY BASE_YM
2023-06-22 13:25:14.743 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
79. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:25:14.749 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
79. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '@baseYear' || '%' GROUP BY BASE_YM
 {executed in 6 msec}
2023-06-22 13:25:14.753 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
79. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '@baseYear' || '%' GROUP BY BASE_YM
 {executed in 4 msec}
2023-06-22 13:25:39.509 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:25:39.510 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:25:39.534 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 24 msec}
2023-06-22 13:25:40.265 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:25:40.266 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:25:40.271 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 13:25:40.281 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
84. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 1 msec}
2023-06-22 13:25:40.300 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:25:40.300 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:25:40.300 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:25:40.301 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:25:40.302 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 13:25:41.248 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2c6fcb39
2023-06-22 13:25:41.248 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:25:41.248 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '@baseYear' || '%' GROUP BY BASE_YM
2023-06-22 13:25:41.249 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:25:41.256 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '@baseYear' || '%' GROUP BY BASE_YM
 {executed in 5 msec}
2023-06-22 13:25:41.261 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '@baseYear' || '%' GROUP BY BASE_YM
 {executed in 5 msec}
2023-06-22 13:26:22.943 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:26:22.944 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:26:22.946 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 13:26:23.776 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:26:23.777 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:26:23.780 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 13:26:23.789 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
84. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 13:26:23.808 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:26:23.808 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:26:23.808 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:26:23.809 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:26:23.810 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:26:24.703 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2c6fcb39
2023-06-22 13:26:24.704 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:26:24.704 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '@baseYear' || '%' GROUP BY BASE_YM
2023-06-22 13:26:24.705 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:26:24.711 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '@baseYear' || '%' GROUP BY BASE_YM
 {executed in 5 msec}
2023-06-22 13:26:24.715 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '@baseYear' || '%' GROUP BY BASE_YM
 {executed in 4 msec}
2023-06-22 13:30:14.199 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:30:14.201 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:30:14.202 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 13:30:15.357 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:30:15.358 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:30:15.363 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 3 msec}
2023-06-22 13:30:15.399 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:30:15.399 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:30:15.399 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:30:15.400 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 13:30:15.402 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:30:15.435 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
84. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 13:30:16.473 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:30:16.473 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:30:16.473 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:30:16.475 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:30:16.873 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 398 msec}
2023-06-22 13:30:17.263 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 389 msec}
2023-06-22 13:30:26.663 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 13:30:26.663 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 13:30:26.663 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 13:30:26.664 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:30:27.046 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 382 msec}
2023-06-22 13:30:27.047 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 13:31:00.991 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:31:00.992 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:31:00.993 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 13:31:02.372 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:31:02.373 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:31:02.377 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 4 msec}
2023-06-22 13:31:02.386 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
84. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 13:31:02.406 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:31:02.406 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:31:02.406 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:31:02.407 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:31:02.408 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:31:03.460 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:31:03.460 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:31:03.460 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:31:03.461 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:31:03.842 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 380 msec}
2023-06-22 13:31:04.252 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 409 msec}
2023-06-22 13:31:05.461 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 13:31:05.461 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 13:31:05.461 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 13:31:05.462 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:31:05.463 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 13:31:05.464 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 13:31:17.300 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e047421f
2023-06-22 13:31:17.300 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-22 13:31:17.300 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-22 13:31:17.301 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:31:17.302 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 13:31:17.303 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 13:31:18.225 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b640603
2023-06-22 13:31:18.225 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:31:18.225 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:31:18.226 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:31:18.227 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:31:18.228 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 13:31:19.366 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e927167f
2023-06-22 13:31:19.366 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:31:19.366 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:31:19.367 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:31:19.761 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 394 msec}
2023-06-22 13:31:20.139 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 377 msec}
2023-06-22 13:31:36.769 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:31:36.770 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:31:36.772 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 13:31:37.575 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:31:37.576 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:31:37.580 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 3 msec}
2023-06-22 13:31:37.589 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
84. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 13:31:37.607 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:31:37.607 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:31:37.607 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:31:37.608 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:31:37.609 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:31:38.652 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:31:38.652 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:31:38.652 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:31:38.653 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:31:39.072 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 419 msec}
2023-06-22 13:31:39.464 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 392 msec}
2023-06-22 13:31:41.336 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 13:31:41.337 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 13:31:41.337 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 13:31:41.338 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:31:41.339 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-22 13:31:41.340 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 13:31:58.732 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:31:58.734 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:31:58.735 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-06-22 13:31:59.415 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:31:59.416 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:31:59.421 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 13:31:59.431 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
84. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 1 msec}
2023-06-22 13:31:59.453 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:31:59.453 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:31:59.453 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:31:59.454 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 13:31:59.455 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:32:00.466 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:32:00.466 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:32:00.467 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:32:00.468 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:32:00.848 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 380 msec}
2023-06-22 13:32:01.222 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 374 msec}
2023-06-22 13:32:16.878 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:32:16.879 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:32:16.880 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 13:32:18.257 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:32:18.258 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:32:18.261 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 13:32:18.270 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
84. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 13:32:18.289 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:32:18.289 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:32:18.289 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:32:18.290 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:32:18.291 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:32:19.251 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:32:19.252 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:32:19.252 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:32:19.253 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:32:19.665 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 412 msec}
2023-06-22 13:32:20.112 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 446 msec}
2023-06-22 13:33:05.416 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:33:05.417 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:33:05.418 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-06-22 13:33:06.344 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:33:06.346 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:33:06.349 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 13:33:06.360 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
84. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 13:33:06.379 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:33:06.380 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:33:06.380 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:33:06.381 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:33:06.382 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:33:07.514 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:33:07.514 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:33:07.515 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:33:07.516 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:33:07.888 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 372 msec}
2023-06-22 13:33:08.283 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 395 msec}
2023-06-22 13:33:12.417 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f60ce011
2023-06-22 13:33:12.417 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:33:12.417 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:33:12.418 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:33:12.419 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:33:12.420 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:33:13.705 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:33:13.706 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:33:13.706 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:33:13.707 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:33:14.085 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 378 msec}
2023-06-22 13:33:14.480 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 394 msec}
2023-06-22 13:33:41.684 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:33:41.685 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:33:41.686 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 13:33:43.076 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:33:43.077 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:33:43.081 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 1 msec}
2023-06-22 13:33:43.090 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
84. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 1 msec}
2023-06-22 13:33:43.113 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:33:43.113 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:33:43.113 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:33:43.114 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:33:43.115 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:33:44.121 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:33:44.122 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:33:44.122 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:33:44.123 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:33:44.523 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 400 msec}
2023-06-22 13:33:44.943 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 419 msec}
2023-06-22 13:33:52.002 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f60ce011
2023-06-22 13:33:52.002 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:33:52.002 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:33:52.003 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:33:52.004 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 13:33:52.005 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:33:55.847 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d3d15c8a
2023-06-22 13:33:55.847 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-22 13:33:55.847 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
2023-06-22 13:33:55.849 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:33:55.853 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-22 13:33:55.856 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-22 13:33:56.916 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6af01c2d
2023-06-22 13:33:56.916 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-22 13:33:56.917 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-22 13:33:56.917 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:33:56.918 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 13:33:56.920 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 13:33:57.883 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:33:57.883 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:33:57.883 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:33:57.884 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:33:58.325 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 440 msec}
2023-06-22 13:33:58.696 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 371 msec}
2023-06-22 13:34:05.011 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f60ce011
2023-06-22 13:34:05.011 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:34:05.011 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:34:05.012 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:34:05.013 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:34:05.014 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:34:11.431 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d3d15c8a
2023-06-22 13:34:11.431 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-22 13:34:11.431 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
2023-06-22 13:34:11.432 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:34:11.435 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-22 13:34:11.438 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-22 13:34:12.588 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6af01c2d
2023-06-22 13:34:12.589 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-22 13:34:12.589 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-22 13:34:12.589 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:34:12.591 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 13:34:12.592 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 13:34:13.415 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:34:13.415 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:34:13.415 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:34:13.416 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:34:13.835 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 419 msec}
2023-06-22 13:34:14.201 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 365 msec}
2023-06-22 13:34:17.240 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f60ce011
2023-06-22 13:34:17.240 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:34:17.240 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:34:17.241 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:34:17.242 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:34:17.243 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:34:18.876 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d3d15c8a
2023-06-22 13:34:18.876 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-22 13:34:18.876 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
2023-06-22 13:34:18.877 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:34:18.880 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-22 13:34:18.883 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-22 13:34:20.355 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6af01c2d
2023-06-22 13:34:20.355 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-22 13:34:20.355 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-22 13:34:20.357 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:34:20.358 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 0 msec}
2023-06-22 13:34:20.359 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 13:34:21.161 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:34:21.161 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:34:21.162 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:34:21.163 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:34:21.566 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 403 msec}
2023-06-22 13:34:21.962 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 396 msec}
2023-06-22 13:34:26.676 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f60ce011
2023-06-22 13:34:26.676 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:34:26.676 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:34:26.677 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:34:26.678 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:34:26.679 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:34:31.763 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d3d15c8a
2023-06-22 13:34:31.763 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-22 13:34:31.763 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
2023-06-22 13:34:31.764 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:34:31.767 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-22 13:34:31.770 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-22 13:34:34.271 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6af01c2d
2023-06-22 13:34:34.271 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-22 13:34:34.271 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-22 13:34:34.272 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:34:34.273 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 13:34:34.275 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 13:34:35.992 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:34:35.992 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:34:35.992 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:34:35.993 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:34:36.393 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 400 msec}
2023-06-22 13:34:36.789 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 396 msec}
2023-06-22 13:34:40.774 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f60ce011
2023-06-22 13:34:40.774 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:34:40.774 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:34:40.775 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:34:40.776 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:34:40.777 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:34:43.286 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:34:43.286 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:34:43.286 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:34:43.287 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:34:43.669 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 381 msec}
2023-06-22 13:34:44.082 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 413 msec}
2023-06-22 13:35:08.090 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:35:08.091 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:35:08.092 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 13:35:09.183 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:35:09.184 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:35:09.187 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 1 msec}
2023-06-22 13:35:09.195 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
84. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 13:35:09.216 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:35:09.216 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:35:09.216 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:35:09.217 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:35:09.218 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 13:35:10.470 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:35:10.470 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:35:10.470 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:35:10.472 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:35:10.881 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 408 msec}
2023-06-22 13:35:11.249 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 368 msec}
2023-06-22 13:35:18.480 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:35:18.481 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:35:18.482 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 13:35:19.506 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:35:19.507 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:35:19.511 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 3 msec}
2023-06-22 13:35:19.519 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
84. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 13:35:19.538 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:35:19.538 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:35:19.538 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:35:19.539 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:35:19.541 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 13:35:20.736 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:35:20.737 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:35:20.737 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:35:20.738 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:35:21.126 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 388 msec}
2023-06-22 13:35:21.515 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 389 msec}
2023-06-22 13:35:24.714 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6af01c2d
2023-06-22 13:35:24.714 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-22 13:35:24.714 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-22 13:35:24.715 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:35:24.716 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 13:35:24.717 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 13:35:25.467 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:35:25.468 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:35:25.468 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:35:25.469 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:35:25.827 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 358 msec}
2023-06-22 13:35:26.208 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 381 msec}
2023-06-22 13:35:26.827 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f60ce011
2023-06-22 13:35:26.827 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:35:26.827 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:35:26.828 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:35:26.829 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:35:26.830 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:35:27.725 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d3d15c8a
2023-06-22 13:35:27.725 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-22 13:35:27.725 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
2023-06-22 13:35:27.726 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:35:27.729 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-06-22 13:35:27.731 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-22 13:35:28.757 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6af01c2d
2023-06-22 13:35:28.758 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-22 13:35:28.758 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-22 13:35:28.758 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:35:28.759 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 13:35:28.760 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 13:35:29.411 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:35:29.411 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:35:29.412 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:35:29.413 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:35:29.781 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 368 msec}
2023-06-22 13:35:30.193 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 412 msec}
2023-06-22 13:35:31.088 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f60ce011
2023-06-22 13:35:31.088 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:35:31.088 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:35:31.089 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:35:31.090 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:35:31.091 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:35:31.809 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:35:31.809 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:35:31.809 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:35:31.811 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:35:32.259 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 448 msec}
2023-06-22 13:35:32.681 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 422 msec}
2023-06-22 13:35:32.904 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 13:35:32.904 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 13:35:32.905 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 13:35:32.906 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:35:32.907 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 13:35:32.908 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 13:36:30.807 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:36:30.808 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:36:30.809 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 13:36:31.990 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:36:31.991 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:36:31.995 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 1 msec}
2023-06-22 13:36:32.004 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
84. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 1 msec}
2023-06-22 13:36:32.024 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:36:32.024 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:36:32.024 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:36:32.025 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:36:32.026 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 13:36:32.929 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:36:32.929 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:36:32.929 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:36:32.930 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:36:33.303 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 372 msec}
2023-06-22 13:36:33.680 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 377 msec}
2023-06-22 13:36:34.774 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 13:36:34.774 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 13:36:34.774 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 13:36:34.776 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:36:34.777 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 13:36:34.778 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 13:37:11.199 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:37:11.200 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:37:11.202 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 13:37:12.402 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:37:12.403 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:37:12.406 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 1 msec}
2023-06-22 13:37:12.414 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
84. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 13:37:12.433 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:37:12.433 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:37:12.433 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:37:12.434 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:37:12.435 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:37:13.191 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:37:13.191 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:37:13.191 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:37:13.192 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:37:13.618 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 426 msec}
2023-06-22 13:37:14.041 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 423 msec}
2023-06-22 13:37:14.890 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 13:37:14.891 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 13:37:14.891 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 13:37:14.892 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:37:14.893 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 13:37:14.894 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 13:37:41.281 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:37:41.281 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:37:41.283 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-06-22 13:37:42.396 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:37:42.398 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:37:42.401 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 13:37:42.413 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
84. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 1 msec}
2023-06-22 13:37:42.432 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:37:42.432 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:37:42.432 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:37:42.433 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:37:42.434 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:37:43.262 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:37:43.262 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:37:43.262 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:37:43.263 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:37:43.667 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 404 msec}
2023-06-22 13:37:44.067 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 400 msec}
2023-06-22 13:37:44.802 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 13:37:44.803 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 13:37:44.803 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 13:37:44.804 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:37:44.805 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 13:37:44.806 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 13:37:56.180 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:37:56.181 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:37:56.182 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 13:37:56.930 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:37:56.931 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:37:56.934 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 13:37:56.943 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
84. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 13:37:56.961 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:37:56.961 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:37:56.961 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:37:56.962 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:37:56.963 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:37:57.840 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:37:57.840 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:37:57.840 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:37:57.841 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:37:58.203 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 362 msec}
2023-06-22 13:37:58.583 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 379 msec}
2023-06-22 13:37:59.430 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 13:37:59.430 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 13:37:59.430 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 13:37:59.431 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:37:59.433 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 13:37:59.433 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-22 13:38:41.482 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:38:41.483 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:38:41.485 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 13:38:42.289 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:38:42.291 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:38:42.294 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 13:38:42.303 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
84. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 13:38:42.329 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:38:42.329 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:38:42.329 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:38:42.330 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:38:42.331 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:38:43.305 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:38:43.305 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:38:43.305 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:38:43.306 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:38:43.723 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 416 msec}
2023-06-22 13:38:44.119 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 396 msec}
2023-06-22 13:38:45.079 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 13:38:45.079 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 13:38:45.079 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 13:38:45.080 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:38:45.081 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 13:38:45.082 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 13:39:45.990 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 13:39:45.991 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:39:45.997 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 2 msec}
2023-06-22 13:39:46.870 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 13:39:46.871 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:39:46.875 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 13:39:46.886 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
84. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 13:39:46.905 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 13:39:46.905 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 13:39:46.905 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 13:39:46.906 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:39:46.907 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 13:39:47.927 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 13:39:47.927 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 13:39:47.927 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 13:39:47.928 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 13:39:48.306 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 378 msec}
2023-06-22 13:39:48.691 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 385 msec}
2023-06-22 13:39:49.578 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 13:39:49.578 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 13:39:49.578 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 13:39:49.579 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 13:39:49.580 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 13:39:49.581 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 14:09:37.105 INFO  [RMI TCP Connection(205)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-06-22 14:09:37.134 INFO  [RMI TCP Connection(205)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-06-22 14:09:37.137 INFO  [RMI TCP Connection(205)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-06-22 14:09:37.146 INFO  [RMI TCP Connection(205)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-06-22 14:09:37.190 INFO  [RMI TCP Connection(205)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-06-22 16:14:24.204 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 15844 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-22 16:14:24.210 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-22 16:14:24.267 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-22 16:14:24.267 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-22 16:14:25.459 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-22 16:14:25.459 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-22 16:14:25.607 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 137ms. Found 3 JPA repository interfaces.
2023-06-22 16:14:25.950 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-22 16:14:25.951 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-22 16:14:25.998 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 16:14:25.998 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 16:14:25.999 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 16:14:25.999 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 48ms. Found 0 JDBC repository interfaces.
2023-06-22 16:14:26.446 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-22 16:14:26.514 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-22 16:14:26.514 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-22 16:14:26.514 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-22 16:14:26.514 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-22 16:14:26.514 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 16:14:26.515 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-22 16:14:26.515 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-22 16:14:26.515 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 16:14:26.515 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 16:14:26.515 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 16:14:26.515 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-22 16:14:26.515 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 16:14:26.577 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$19086649] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 16:14:26.629 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-22 16:14:26.717 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$2feca76] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 16:14:26.803 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 16:14:26.805 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@480534a8' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 16:14:26.813 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$27d36d28] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 16:14:26.823 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$4d28853e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 16:14:26.827 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 16:14:26.829 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 16:14:26.850 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$6a51023c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 16:14:26.880 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$e9d14f6e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 16:14:27.022 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-22 16:14:27.027 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-22 16:14:27.436 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-22 16:14:27.452 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-22 16:14:27.464 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-22 16:14:27.464 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-22 16:14:27.839 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-22 16:14:27.850 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-22 16:14:27.850 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3583 ms
2023-06-22 16:14:28.683 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@355d9d9 with name: jasyptStringEncryptor
2023-06-22 16:14:28.745 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-22 16:14:31.043 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 8 msec}
2023-06-22 16:14:31.049 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-22 16:14:31.895 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-22 16:14:32.211 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-22 16:14:32.292 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-22 16:14:32.294 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-22 16:14:32.486 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-22 16:14:32.713 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:14:32.730 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-22 16:14:33.447 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:14:33.449 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-22 16:14:33.499 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-22 16:14:33.747 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-22 16:14:34.805 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-22 16:14:34.816 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-22 16:14:34.995 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-22 16:14:34.995 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-22 16:14:34.995 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-22 16:14:34.995 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-22 16:14:34.995 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-22 16:14:34.995 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-22 16:14:34.995 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-22 16:14:34.995 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-22 16:14:34.995 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-22 16:14:35.159 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@22451151, org.springframework.security.web.context.SecurityContextPersistenceFilter@5c2feac8, org.springframework.security.web.header.HeaderWriterFilter@19bad7bd, org.springframework.web.filter.CorsFilter@6f5900d8, org.springframework.security.web.authentication.logout.LogoutFilter@55590240, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@582e1228, org.springframework.security.web.session.ConcurrentSessionFilter@750624ab, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@61ac7af3, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@754d69fb, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5de3e437, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5e59c224, org.springframework.security.web.session.SessionManagementFilter@13578527, org.springframework.security.web.access.ExceptionTranslationFilter@1f8657f2, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@67fbd40a]
2023-06-22 16:14:35.181 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-22 16:14:35.528 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-22 16:14:35.612 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-22 16:14:36.022 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:14:36.837 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-22 16:14:36.864 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-22 16:14:37.003 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-22 16:14:37.006 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-22 16:14:37.055 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-22 16:14:37.061 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 13.387 seconds (JVM running for 14.722)
2023-06-22 16:14:37.061 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-22 16:14:37.062 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-22 16:14:37.062 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-22 16:14:37.795 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-22 16:14:37.796 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-22 16:14:37.825 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 29 ms
2023-06-22 16:14:43.961 INFO  [http-nio-10010-exec-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-22 16:14:43.962 INFO  [http-nio-10010-exec-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-22 16:14:43.962 INFO  [http-nio-10010-exec-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-22 16:14:43.962 INFO  [http-nio-10010-exec-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-22 16:14:44.036 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-22 16:14:44.036 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-22 16:14:44.036 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-06-22 16:14:44.036 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-22 16:14:44.036 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-06-22 16:14:44.750 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$e1299d7.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 16:14:44.760 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$e1299d7.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 16:14:44.766 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-22 16:14:44.767 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-22 16:14:44.767 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-22 16:14:44.767 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-22 16:14:44.767 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-22 16:14:44.912 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$e1299d7.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 16:14:44.913 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$e1299d7.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 16:14:44.914 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$e1299d7.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 98 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 101 common frames omitted
2023-06-22 16:14:45.273 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-22 16:14:45.273 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-22 16:14:45.273 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-22 16:14:45.273 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-22 16:14:45.273 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-22 16:14:48.442 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:14:48.450 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-06-22 16:14:48.473 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-22 16:14:48.570 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$v8AeIPjjEsW5XSWG4NKF5ep3MlmELH21/o0fOvVkQ.WWV21Rg4cL2
2023-06-22 16:14:48.663 INFO  [http-nio-10010-exec-1] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-22 16:14:51.331 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:14:51.332 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-22 16:16:07.451 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:16:07.452 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-22 16:16:54.101 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:16:54.102 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-22 16:17:09.130 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a87f8c4e
2023-06-22 16:17:09.130 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-22 16:17:09.130 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
2023-06-22 16:17:09.132 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:17:09.135 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 1 msec}
2023-06-22 16:17:09.136 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 1 msec}
2023-06-22 16:17:09.160 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e31569a3
2023-06-22 16:17:09.160 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_DETAIL} 
2023-06-22 16:17:09.161 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d2, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d2, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d2 NOT LIKE '%*%' AND a.d2 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d2, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d2, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d2 <> '' AND a.d2 LIKE b.d2 || '%' WHERE a.company_no = '100' AND a.route_nm = '5ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d2 LIKE '%*%'			OR a.d2 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5ë²' AND     BASE_YMD = '2023-05-02' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5ë²' AND     a.BASE_YMD = '2023-05-02' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
2023-06-22 16:17:09.189 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d2, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d2, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d2 NOT LIKE '%*%' AND a.d2 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d2, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d2, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d2 <> '' AND a.d2 LIKE b.d2 || '%' WHERE a.company_no = '100' AND a.route_nm = '5ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d2 LIKE '%*%'			OR a.d2 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5ë²' AND     BASE_YMD = '2023-05-02' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5ë²' AND     a.BASE_YMD = '2023-05-02' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
 {executed in 26 msec}
2023-06-22 16:17:09.212 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d2, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d2, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d2 NOT LIKE '%*%' AND a.d2 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d2, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d2, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d2 <> '' AND a.d2 LIKE b.d2 || '%' WHERE a.company_no = '100' AND a.route_nm = '5ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d2 LIKE '%*%'			OR a.d2 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5ë²' AND     BASE_YMD = '2023-05-02' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5ë²' AND     a.BASE_YMD = '2023-05-02' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
 {executed in 21 msec}
2023-06-22 16:17:17.843 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@db9339fc
2023-06-22 16:17:17.844 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-22 16:17:17.844 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
2023-06-22 16:17:17.845 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:17:17.847 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 1 msec}
2023-06-22 16:17:17.847 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '20ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 0 msec}
2023-06-22 16:17:17.866 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@50a94b10
2023-06-22 16:17:17.867 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_DETAIL} 
2023-06-22 16:17:17.868 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d2, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d2, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '20ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d2 NOT LIKE '%*%' AND a.d2 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d2, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d2, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d2 <> '' AND a.d2 LIKE b.d2 || '%' WHERE a.company_no = '100' AND a.route_nm = '20ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d2 LIKE '%*%'			OR a.d2 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '20ë²' AND     BASE_YMD = '2023-05-02' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '20ë²' AND     a.BASE_YMD = '2023-05-02' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
2023-06-22 16:17:17.888 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d2, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d2, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '20ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d2 NOT LIKE '%*%' AND a.d2 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d2, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d2, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d2 <> '' AND a.d2 LIKE b.d2 || '%' WHERE a.company_no = '100' AND a.route_nm = '20ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d2 LIKE '%*%'			OR a.d2 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '20ë²' AND     BASE_YMD = '2023-05-02' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '20ë²' AND     a.BASE_YMD = '2023-05-02' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
 {executed in 18 msec}
2023-06-22 16:17:17.906 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d2, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d2, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '20ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d2 NOT LIKE '%*%' AND a.d2 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d2, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d2, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d2 <> '' AND a.d2 LIKE b.d2 || '%' WHERE a.company_no = '100' AND a.route_nm = '20ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d2 LIKE '%*%'			OR a.d2 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '20ë²' AND     BASE_YMD = '2023-05-02' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '20ë²' AND     a.BASE_YMD = '2023-05-02' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
 {executed in 17 msec}
2023-06-22 16:17:31.905 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@272e546d
2023-06-22 16:17:31.905 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-22 16:17:31.905 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'ì¼',2,'ì',3,'í',4,'ì',5,'ëª©',6,'ê¸',7,'í ') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230501')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-22 16:17:31.907 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:17:31.947 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'ì¼',2,'ì',3,'í',4,'ì',5,'ëª©',6,'ê¸',7,'í ') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230501')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 39 msec}
2023-06-22 16:17:31.975 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'ì¼',2,'ì',3,'í',4,'ì',5,'ëª©',6,'ê¸',7,'í ') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230501')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 27 msec}
2023-06-22 16:17:45.711 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a6f17599
2023-06-22 16:17:45.711 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-22 16:17:45.711 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
2023-06-22 16:17:45.712 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:17:45.714 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 1 msec}
2023-06-22 16:17:45.715 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 1 msec}
2023-06-22 16:17:45.729 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fad372f
2023-06-22 16:17:45.729 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_DETAIL} 
2023-06-22 16:17:45.729 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d28, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d28 NOT LIKE '%*%' AND a.d28 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d28, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d28 <> '' AND a.d28 LIKE b.d28 || '%' WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d28 LIKE '%*%'			OR a.d28 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1ë²' AND     BASE_YMD = '2023-05-28' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5-1ë²' AND     a.BASE_YMD = '2023-05-28' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
2023-06-22 16:17:45.751 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d28, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d28 NOT LIKE '%*%' AND a.d28 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d28, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d28 <> '' AND a.d28 LIKE b.d28 || '%' WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d28 LIKE '%*%'			OR a.d28 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1ë²' AND     BASE_YMD = '2023-05-28' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5-1ë²' AND     a.BASE_YMD = '2023-05-28' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
 {executed in 20 msec}
2023-06-22 16:17:45.769 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d28, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d28 NOT LIKE '%*%' AND a.d28 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d28, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d28 <> '' AND a.d28 LIKE b.d28 || '%' WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d28 LIKE '%*%'			OR a.d28 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1ë²' AND     BASE_YMD = '2023-05-28' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5-1ë²' AND     a.BASE_YMD = '2023-05-28' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
 {executed in 17 msec}
2023-06-22 16:17:47.405 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e20debae
2023-06-22 16:17:47.405 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-22 16:17:47.405 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
2023-06-22 16:17:47.406 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:17:47.408 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 1 msec}
2023-06-22 16:17:47.409 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 1 msec}
2023-06-22 16:17:47.424 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5723fcc2
2023-06-22 16:17:47.424 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_DETAIL} 
2023-06-22 16:17:47.424 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d28, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d28 NOT LIKE '%*%' AND a.d28 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d28, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d28 <> '' AND a.d28 LIKE b.d28 || '%' WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d28 LIKE '%*%'			OR a.d28 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1ë²' AND     BASE_YMD = '2023-05-28' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5-1ë²' AND     a.BASE_YMD = '2023-05-28' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
2023-06-22 16:17:47.444 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d28, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d28 NOT LIKE '%*%' AND a.d28 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d28, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d28 <> '' AND a.d28 LIKE b.d28 || '%' WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d28 LIKE '%*%'			OR a.d28 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1ë²' AND     BASE_YMD = '2023-05-28' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5-1ë²' AND     a.BASE_YMD = '2023-05-28' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
 {executed in 20 msec}
2023-06-22 16:17:47.471 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d28, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d28 NOT LIKE '%*%' AND a.d28 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d28, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d28 <> '' AND a.d28 LIKE b.d28 || '%' WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d28 LIKE '%*%'			OR a.d28 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1ë²' AND     BASE_YMD = '2023-05-28' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5-1ë²' AND     a.BASE_YMD = '2023-05-28' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
 {executed in 26 msec}
2023-06-22 16:17:49.987 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e20debae
2023-06-22 16:17:49.987 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-22 16:17:49.987 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
2023-06-22 16:17:49.988 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:17:49.990 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 0 msec}
2023-06-22 16:17:49.991 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 1 msec}
2023-06-22 16:21:12.378 INFO  [RMI TCP Connection(19)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-06-22 16:21:12.406 INFO  [RMI TCP Connection(19)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-06-22 16:21:12.410 INFO  [RMI TCP Connection(19)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-06-22 16:21:12.768 INFO  [RMI TCP Connection(19)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-06-22 16:21:12.817 INFO  [RMI TCP Connection(19)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-06-22 16:24:02.149 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 13692 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-06-22 16:24:02.155 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-06-22 16:24:02.213 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-06-22 16:24:02.214 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-06-22 16:24:03.438 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-22 16:24:03.439 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-06-22 16:24:03.596 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 148ms. Found 3 JPA repository interfaces.
2023-06-22 16:24:03.969 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-06-22 16:24:03.969 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-06-22 16:24:04.017 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 16:24:04.017 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 16:24:04.018 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-06-22 16:24:04.018 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 49ms. Found 0 JDBC repository interfaces.
2023-06-22 16:24:04.473 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-06-22 16:24:04.544 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-06-22 16:24:04.545 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-22 16:24:04.545 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-22 16:24:04.545 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-06-22 16:24:04.545 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 16:24:04.545 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-06-22 16:24:04.545 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-06-22 16:24:04.546 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 16:24:04.546 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 16:24:04.546 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 16:24:04.546 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-06-22 16:24:04.546 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-06-22 16:24:04.610 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$46fc84f1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 16:24:04.662 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-06-22 16:24:04.753 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$30f2e91e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 16:24:04.834 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 16:24:04.837 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@62b85656' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 16:24:04.838 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$55c78bd0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 16:24:04.849 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$7b1ca3e6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 16:24:04.853 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 16:24:04.855 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 16:24:04.876 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$984520e4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 16:24:04.911 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$17c56e16] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-06-22 16:24:05.046 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-06-22 16:24:05.053 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-06-22 16:24:05.555 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-06-22 16:24:05.574 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-06-22 16:24:05.588 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-06-22 16:24:05.588 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-06-22 16:24:06.085 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-06-22 16:24:06.098 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-06-22 16:24:06.099 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3885 ms
2023-06-22 16:24:07.143 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@2188c0f with name: jasyptStringEncryptor
2023-06-22 16:24:07.216 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-06-22 16:24:07.320 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 9 msec}
2023-06-22 16:24:07.326 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-06-22 16:24:08.238 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-06-22 16:24:08.599 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-06-22 16:24:08.682 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-06-22 16:24:08.684 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-06-22 16:24:08.838 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-06-22 16:24:09.105 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:24:09.126 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-06-22 16:24:09.978 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:24:09.981 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-06-22 16:24:10.053 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-06-22 16:24:10.340 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-06-22 16:24:11.421 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-06-22 16:24:11.433 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-06-22 16:24:11.615 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-06-22 16:24:11.616 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-06-22 16:24:11.616 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-06-22 16:24:11.616 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-06-22 16:24:11.616 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-06-22 16:24:11.616 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-06-22 16:24:11.616 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-06-22 16:24:11.616 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-06-22 16:24:11.617 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-06-22 16:24:11.781 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5e82f1a4, org.springframework.security.web.context.SecurityContextPersistenceFilter@7f88524e, org.springframework.security.web.header.HeaderWriterFilter@411400b1, org.springframework.web.filter.CorsFilter@26ee6b18, org.springframework.security.web.authentication.logout.LogoutFilter@4418a828, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@45d8cbb, org.springframework.security.web.session.ConcurrentSessionFilter@662e4d48, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@267c73cb, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1c894ea8, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6d03cee4, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@147a8a8d, org.springframework.security.web.session.SessionManagementFilter@59e10db4, org.springframework.security.web.access.ExceptionTranslationFilter@2225e34d, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4dc09bf4]
2023-06-22 16:24:11.804 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-06-22 16:24:12.169 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-06-22 16:24:12.251 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-06-22 16:24:12.678 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:24:13.491 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-06-22 16:24:13.518 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-06-22 16:24:13.657 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-06-22 16:24:13.660 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-06-22 16:24:13.704 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-06-22 16:24:13.718 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 12.068 seconds (JVM running for 13.488)
2023-06-22 16:24:13.720 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-22 16:24:13.720 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-06-22 16:24:13.720 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-06-22 16:24:14.833 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-06-22 16:24:14.833 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-06-22 16:24:14.853 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 20 ms
2023-06-22 16:24:31.918 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:24:31.926 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-06-22 16:24:31.947 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-22 16:24:32.036 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$XB84BRpUPrikvW6soKjB0.T6j9OP6ilyNg1y4ke.QU5juN/PzJCDq
2023-06-22 16:24:32.212 INFO  [http-nio-10010-exec-10] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-22 16:24:44.161 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@272e546d
2023-06-22 16:24:44.161 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-22 16:24:44.200 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'ì¼',2,'ì',3,'í',4,'ì',5,'ëª©',6,'ê¸',7,'í ') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230501')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-22 16:24:44.210 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:24:44.234 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'ì¼',2,'ì',3,'í',4,'ì',5,'ëª©',6,'ê¸',7,'í ') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230501')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 23 msec}
2023-06-22 16:24:44.254 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'ì¼',2,'ì',3,'í',4,'ì',5,'ëª©',6,'ê¸',7,'í ') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230501')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 14 msec}
2023-06-22 16:24:45.406 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a6f17599
2023-06-22 16:24:45.406 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-22 16:24:45.406 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
2023-06-22 16:24:45.407 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:24:45.408 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 0 msec}
2023-06-22 16:24:45.409 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 1 msec}
2023-06-22 16:24:45.425 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fad372f
2023-06-22 16:24:45.425 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_DETAIL} 
2023-06-22 16:24:45.426 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d28, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d28 NOT LIKE '%*%' AND a.d28 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d28, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d28 <> '' AND a.d28 LIKE b.d28 || '%' WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d28 LIKE '%*%'			OR a.d28 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1ë²' AND     BASE_YMD = '2023-05-28' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5-1ë²' AND     a.BASE_YMD = '2023-05-28' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
2023-06-22 16:24:45.444 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d28, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d28 NOT LIKE '%*%' AND a.d28 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d28, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d28 <> '' AND a.d28 LIKE b.d28 || '%' WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d28 LIKE '%*%'			OR a.d28 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1ë²' AND     BASE_YMD = '2023-05-28' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5-1ë²' AND     a.BASE_YMD = '2023-05-28' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
 {executed in 17 msec}
2023-06-22 16:24:45.457 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d28, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d28 NOT LIKE '%*%' AND a.d28 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d28, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d28 <> '' AND a.d28 LIKE b.d28 || '%' WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d28 LIKE '%*%'			OR a.d28 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1ë²' AND     BASE_YMD = '2023-05-28' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5-1ë²' AND     a.BASE_YMD = '2023-05-28' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
 {executed in 12 msec}
2023-06-22 16:24:51.326 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e20debae
2023-06-22 16:24:51.326 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-22 16:24:51.326 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
2023-06-22 16:24:51.327 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:24:51.329 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 1 msec}
2023-06-22 16:24:51.331 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 0 msec}
2023-06-22 16:26:38.073 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@272e546d
2023-06-22 16:26:38.073 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-22 16:26:38.074 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'ì¼',2,'ì',3,'í',4,'ì',5,'ëª©',6,'ê¸',7,'í ') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230501')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-22 16:26:38.075 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:26:38.095 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'ì¼',2,'ì',3,'í',4,'ì',5,'ëª©',6,'ê¸',7,'í ') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230501')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 18 msec}
2023-06-22 16:26:38.111 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'ì¼',2,'ì',3,'í',4,'ì',5,'ëª©',6,'ê¸',7,'í ') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230501')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 16 msec}
2023-06-22 16:26:43.307 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a6f17599
2023-06-22 16:26:43.307 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-22 16:26:43.307 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
2023-06-22 16:26:43.308 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:26:43.310 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 0 msec}
2023-06-22 16:26:43.311 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 1 msec}
2023-06-22 16:26:43.327 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fad372f
2023-06-22 16:26:43.327 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_DETAIL} 
2023-06-22 16:26:43.329 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d28, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d28 NOT LIKE '%*%' AND a.d28 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d28, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d28 <> '' AND a.d28 LIKE b.d28 || '%' WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d28 LIKE '%*%'			OR a.d28 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1ë²' AND     BASE_YMD = '2023-05-28' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5-1ë²' AND     a.BASE_YMD = '2023-05-28' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
2023-06-22 16:26:43.340 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d28, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d28 NOT LIKE '%*%' AND a.d28 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d28, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d28 <> '' AND a.d28 LIKE b.d28 || '%' WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d28 LIKE '%*%'			OR a.d28 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1ë²' AND     BASE_YMD = '2023-05-28' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5-1ë²' AND     a.BASE_YMD = '2023-05-28' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
 {executed in 10 msec}
2023-06-22 16:26:43.352 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d28, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d28 NOT LIKE '%*%' AND a.d28 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d28, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d28 <> '' AND a.d28 LIKE b.d28 || '%' WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d28 LIKE '%*%'			OR a.d28 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1ë²' AND     BASE_YMD = '2023-05-28' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5-1ë²' AND     a.BASE_YMD = '2023-05-28' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
 {executed in 12 msec}
2023-06-22 16:26:45.721 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e20debae
2023-06-22 16:26:45.721 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-22 16:26:45.721 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
2023-06-22 16:26:45.722 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:26:45.723 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 1 msec}
2023-06-22 16:26:45.724 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 0 msec}
2023-06-22 16:28:20.501 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@272e546d
2023-06-22 16:28:20.501 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-22 16:28:20.501 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'ì¼',2,'ì',3,'í',4,'ì',5,'ëª©',6,'ê¸',7,'í ') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230501')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-22 16:28:20.503 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:28:20.528 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'ì¼',2,'ì',3,'í',4,'ì',5,'ëª©',6,'ê¸',7,'í ') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230501')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 25 msec}
2023-06-22 16:28:20.545 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'ì¼',2,'ì',3,'í',4,'ì',5,'ëª©',6,'ê¸',7,'í ') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230501')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 16 msec}
2023-06-22 16:28:22.061 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a6f17599
2023-06-22 16:28:22.061 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-22 16:28:22.061 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
2023-06-22 16:28:22.062 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:28:22.063 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 0 msec}
2023-06-22 16:28:22.064 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 0 msec}
2023-06-22 16:28:22.079 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fad372f
2023-06-22 16:28:22.079 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_DETAIL} 
2023-06-22 16:28:22.080 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d28, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d28 NOT LIKE '%*%' AND a.d28 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d28, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d28 <> '' AND a.d28 LIKE b.d28 || '%' WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d28 LIKE '%*%'			OR a.d28 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1ë²' AND     BASE_YMD = '2023-05-28' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5-1ë²' AND     a.BASE_YMD = '2023-05-28' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
2023-06-22 16:28:22.096 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d28, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d28 NOT LIKE '%*%' AND a.d28 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d28, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d28 <> '' AND a.d28 LIKE b.d28 || '%' WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d28 LIKE '%*%'			OR a.d28 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1ë²' AND     BASE_YMD = '2023-05-28' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5-1ë²' AND     a.BASE_YMD = '2023-05-28' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
 {executed in 12 msec}
2023-06-22 16:28:22.109 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d28, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d28 NOT LIKE '%*%' AND a.d28 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d28, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d28 <> '' AND a.d28 LIKE b.d28 || '%' WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d28 LIKE '%*%'			OR a.d28 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1ë²' AND     BASE_YMD = '2023-05-28' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5-1ë²' AND     a.BASE_YMD = '2023-05-28' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
 {executed in 13 msec}
2023-06-22 16:28:23.272 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e20debae
2023-06-22 16:28:23.272 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-22 16:28:23.272 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
2023-06-22 16:28:23.273 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:28:23.275 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 0 msec}
2023-06-22 16:28:23.276 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 1 msec}
2023-06-22 16:28:23.293 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5723fcc2
2023-06-22 16:28:23.293 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_DETAIL} 
2023-06-22 16:28:23.294 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d28, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d28 NOT LIKE '%*%' AND a.d28 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d28, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d28 <> '' AND a.d28 LIKE b.d28 || '%' WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d28 LIKE '%*%'			OR a.d28 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1ë²' AND     BASE_YMD = '2023-05-28' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5-1ë²' AND     a.BASE_YMD = '2023-05-28' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
2023-06-22 16:28:23.307 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d28, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d28 NOT LIKE '%*%' AND a.d28 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d28, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d28 <> '' AND a.d28 LIKE b.d28 || '%' WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d28 LIKE '%*%'			OR a.d28 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1ë²' AND     BASE_YMD = '2023-05-28' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5-1ë²' AND     a.BASE_YMD = '2023-05-28' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
 {executed in 12 msec}
2023-06-22 16:28:23.320 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d28, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d28 NOT LIKE '%*%' AND a.d28 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d28, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d28 <> '' AND a.d28 LIKE b.d28 || '%' WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d28 LIKE '%*%'			OR a.d28 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1ë²' AND     BASE_YMD = '2023-05-28' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5-1ë²' AND     a.BASE_YMD = '2023-05-28' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
 {executed in 13 msec}
2023-06-22 16:28:27.123 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e20debae
2023-06-22 16:28:27.124 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-22 16:28:27.124 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
2023-06-22 16:28:27.125 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:28:27.127 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 1 msec}
2023-06-22 16:28:27.128 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 0 msec}
2023-06-22 16:28:29.120 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:28:29.128 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
1. DELETE FROM TBL_ARRANGE_PUNCTUALITY_ANALIZE WHERE company_no = '100'  AND base_ymd = '2023-05-28'  AND route_nm = '5-1ë²'
 {executed in 1 msec}
2023-06-22 16:28:29.136 INFO  [http-nio-10010-exec-9] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBL_ARRANGE_PUNCTUALITY_ANALIZE (company_no,base_ymd,route_nm,col,col000,col001,col002,col003,col004,emp_nm,term,term_85,term_125,term_past_cnt,term_late_cnt,term_wiban_cnt,total_station_cnt,last_chg_user,last_chg_date) values ( '100' , '2023-05-28' , '5-1ë²' , :col , :col000 , :col001 , :col002 , :col003 , :col004 , :emp_nm , :term , :term_85 , :term_125 , :term_past_cnt , :term_late_cnt , :term_wiban_cnt , :total_station_cnt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
2023-06-22 16:28:29.147 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:28:29.186 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@57457317
2023-06-22 16:28:29.186 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-06-22 16:28:29.187 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'ì¼',2,'ì',3,'í',4,'ì',5,'ëª©',6,'ê¸',7,'í ') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230501')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-06-22 16:28:29.201 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'ì¼',2,'ì',3,'í',4,'ì',5,'ëª©',6,'ê¸',7,'í ') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230501')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 14 msec}
2023-06-22 16:28:29.215 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-05%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'ì¼',2,'ì',3,'í',4,'ì',5,'ëª©',6,'ê¸',7,'í ') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230501')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 13 msec}
2023-06-22 16:29:09.607 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:29:09.608 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 0 msec}
2023-06-22 16:29:23.276 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d51759da
2023-06-22 16:29:23.276 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-22 16:29:23.276 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
2023-06-22 16:29:23.277 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:29:23.277 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 0 msec}
2023-06-22 16:29:23.278 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 1 msec}
2023-06-22 16:29:23.292 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fad372f
2023-06-22 16:29:23.293 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_INFO_DETAIL} 
2023-06-22 16:29:23.293 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d28, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d28 NOT LIKE '%*%' AND a.d28 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d28, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d28 <> '' AND a.d28 LIKE b.d28 || '%' WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d28 LIKE '%*%'			OR a.d28 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1ë²' AND     BASE_YMD = '2023-05-28' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5-1ë²' AND     a.BASE_YMD = '2023-05-28' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
2023-06-22 16:29:23.306 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d28, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d28 NOT LIKE '%*%' AND a.d28 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d28, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d28 <> '' AND a.d28 LIKE b.d28 || '%' WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d28 LIKE '%*%'			OR a.d28 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1ë²' AND     BASE_YMD = '2023-05-28' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5-1ë²' AND     a.BASE_YMD = '2023-05-28' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
 {executed in 13 msec}
2023-06-22 16:29:23.318 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. WITH daily_arrange as ( SELECT a.CAR_REGNO , a.EMP_NM , '' AS value, REGEXP_REPLACE(a.d28, '[*0-9@]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@]', ''),	int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND a.d28 NOT LIKE '%*%' AND a.d28 NOT LIKE '%@%' AND a.DISPATCH_SEQ = 6 AND a.INIT_SEQ = 0 UNION ALL SELECT a.CAR_REGNO , b.EMP_NM , decode(b.EMP_NM, NULL, '', 'SP') AS value, REGEXP_REPLACE(a.d28, '[*0-9@-]', '') AS ampm, CONVERT(REGEXP_REPLACE(a.d28, '[*ap@-]', ''),int) AS seq FROM TBL_MONTH_ARRANGE_DETAIL a LEFT OUTER JOIN TBL_MONTH_ARRANGE_DETAIL b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND a.BASE_YM = b.BASE_YM AND a.DISPATCH_SEQ = b.DISPATCH_SEQ AND a.INIT_SEQ = b.INIT_SEQ AND b.CAR_REGNO LIKE 'SP%' AND b.d28 <> '' AND a.d28 LIKE b.d28 || '%' WHERE a.company_no = '100' AND a.route_nm = '5-1ë²' AND a.BASE_Ym = '2023-05' AND a.CAR_REGNO NOT LIKE 'SP%' AND (a.d28 LIKE '%*%'			OR a.d28 LIKE '%@%') AND a.DISPATCH_SEQ = 6  AND a.INIT_SEQ = 0 ) select   1 seq,'-' as emp_nm, 'a' as ampm_gb,a.* from    TBL_arrange_punctuality_info a where   a.company_no = '100' AND 	route_nm = '5-1ë²' AND     BASE_YMD = '2023-05-28' and		col000 = 'ë²ì¤ID' union SELECT 2 seq ,nvl(d.emp_nm,'-') as emp_nm ,k.* FROM ( select CASE WHEN (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') THEN 'a' ELSE 'p' END ampm_gb ,	a.* from    TBL_arrange_punctuality_info a JOIN TBM_ROUTE_COMMON_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.ROUTE_NM = b.ROUTE_NM AND b.CODE ='ë°°ì°¨ì ìì±ëìíì°¨' where   a.company_no = '100' AND 	a.route_nm = '5-1ë²' AND     a.BASE_YMD = '2023-05-28' and		a.col000 <> 'ë²ì¤ID' AND     ( (',' || b.am_seq_array || ',' LIKE '%,' || a.col002 ||',%') OR (',' || b.pm_seq_array || ',' LIKE '%,' || a.col002 ||',%')) ) k left outer join daily_arrange d on k.col001 = d.car_regno AND 	k.ampm_gb = d.ampm		order by seq,col003
 {executed in 11 msec}
2023-06-22 16:29:36.969 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e20debae
2023-06-22 16:29:36.969 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getRouteCommonInfo} 
2023-06-22 16:29:36.969 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
2023-06-22 16:29:36.970 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:29:36.971 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 1 msec}
2023-06-22 16:29:36.972 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
2. select   a.am_seq_array, a.pm_seq_array, wiban_gijun,wiban_min_value,wiban_max_value from    TBM_ROUTE_COMMON_INFO a where   a.company_no = '100' AND     a.ROUTE_NM   = '5-1ë²' AND		a.CODE =  'ë°°ì°¨ì ìì±ëìíì°¨'
 {executed in 1 msec}
2023-06-22 16:29:51.639 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:29:51.641 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeUpdate(ProxyStatement.java:120)
2. DELETE FROM TBL_ARRANGE_PUNCTUALITY_ANALIZE WHERE company_no = '100'  AND base_ymd = '2023-05-28'  AND route_nm = '5-1ë²'
 {executed in 1 msec}
2023-06-22 16:29:51.649 INFO  [http-nio-10010-exec-7] [com.pjy.dashboard.dao.DynamicSqlDao] - insert sql : INSERT INTO TBL_ARRANGE_PUNCTUALITY_ANALIZE (company_no,base_ymd,route_nm,col,col000,col001,col002,col003,col004,emp_nm,term,term_85,term_125,term_past_cnt,term_late_cnt,term_wiban_cnt,total_station_cnt,last_chg_user,last_chg_date) values ( '100' , '2023-05-28' , '5-1ë²' , :col , :col000 , :col001 , :col002 , :col003 , :col004 , :emp_nm , :term , :term_85 , :term_125 , :term_past_cnt , :term_late_cnt , :term_wiban_cnt , :total_station_cnt , 'p00139' , TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss'))
2023-06-22 16:29:51.650 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:34:19.431 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:34:19.432 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. SELECT ROUTE_NM  FROM TBL_ROUTEINFO ORDER BY 1
 {executed in 1 msec}
2023-06-22 16:34:42.602 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 16:34:42.603 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:34:42.625 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 22 msec}
2023-06-22 16:34:44.245 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 16:34:44.322 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:34:44.326 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 1 msec}
2023-06-22 16:34:44.370 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 16:34:44.371 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:34:44.371 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 16:34:44.372 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:34:44.373 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:34:44.430 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 1 msec}
2023-06-22 16:34:45.884 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 16:34:45.884 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 16:34:45.885 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 16:34:45.886 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:34:46.318 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 431 msec}
2023-06-22 16:34:46.712 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 394 msec}
2023-06-22 16:34:48.330 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 16:34:48.330 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 16:34:48.330 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 16:34:48.332 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:34:48.755 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 423 msec}
2023-06-22 16:34:48.756 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-22 16:35:21.387 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 16:35:21.388 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:35:21.390 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 16:35:22.790 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 16:35:22.791 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:35:22.794 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 16:35:22.806 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 1 msec}
2023-06-22 16:35:22.825 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 16:35:22.825 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:35:22.826 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 16:35:22.827 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:35:22.829 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 16:35:24.434 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 16:35:24.434 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 16:35:24.435 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 16:35:24.436 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:35:24.841 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 404 msec}
2023-06-22 16:35:25.250 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 409 msec}
2023-06-22 16:35:26.449 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 16:35:26.449 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 16:35:26.450 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 16:35:26.451 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:35:26.452 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 16:35:26.454 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-22 16:42:49.662 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 16:42:49.663 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:42:49.665 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-06-22 16:42:51.118 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 16:42:51.120 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:42:51.122 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
3. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 1 msec}
2023-06-22 16:42:51.133 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
3. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 1 msec}
2023-06-22 16:42:51.152 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 16:42:51.152 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:42:51.152 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 16:42:51.153 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:42:51.154 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:42:52.575 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 16:42:52.575 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 16:42:52.575 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 16:42:52.577 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:42:52.988 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 411 msec}
2023-06-22 16:42:53.432 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 444 msec}
2023-06-22 16:42:54.339 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 16:42:54.340 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 16:42:54.340 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 16:42:54.341 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:42:54.342 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 16:42:54.343 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 16:42:55.738 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dcbe6a3a
2023-06-22 16:42:55.738 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 16:42:55.738 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM, a.CAR_REGNO ,a.START_TIME ,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-04' ORDER BY a.START_TIME
2023-06-22 16:42:55.739 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:42:55.756 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. SELECT 	ROWNUM, a.CAR_REGNO ,a.START_TIME ,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-04' ORDER BY a.START_TIME
 {executed in 17 msec}
2023-06-22 16:42:55.773 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. SELECT 	ROWNUM, a.CAR_REGNO ,a.START_TIME ,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-04' ORDER BY a.START_TIME
 {executed in 16 msec}
2023-06-22 16:42:57.356 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c5768183
2023-06-22 16:42:57.356 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 16:42:57.356 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM, a.CAR_REGNO ,a.START_TIME ,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
2023-06-22 16:42:57.357 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
3. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:42:57.376 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. SELECT 	ROWNUM, a.CAR_REGNO ,a.START_TIME ,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
 {executed in 18 msec}
2023-06-22 16:42:57.401 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
3. SELECT 	ROWNUM, a.CAR_REGNO ,a.START_TIME ,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
 {executed in 25 msec}
2023-06-22 16:45:07.757 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 16:45:07.758 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:45:07.775 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 16 msec}
2023-06-22 16:45:09.118 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@33f61355
2023-06-22 16:45:09.119 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:45:09.123 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì'
	order by 1
 {executed in 2 msec}
2023-06-22 16:45:09.155 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fb059105
2023-06-22 16:45:09.155 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:45:09.155 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
2023-06-22 16:45:09.157 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:45:09.158 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:45:09.199 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ë³ì'
 {executed in 1 msec}
2023-06-22 16:45:10.759 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c028c6d5
2023-06-22 16:45:10.759 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 16:45:10.760 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 16:45:10.761 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:45:11.136 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 375 msec}
2023-06-22 16:45:11.538 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 402 msec}
2023-06-22 16:45:12.719 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@992be63a
2023-06-22 16:45:12.720 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 16:45:12.720 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 16:45:12.721 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:45:13.153 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 432 msec}
2023-06-22 16:45:13.154 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 16:45:15.174 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6eeefaa7
2023-06-22 16:45:15.174 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 16:45:15.175 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM, a.CAR_REGNO ,a.START_TIME ,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
2023-06-22 16:45:15.176 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:45:15.192 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	ROWNUM, a.CAR_REGNO ,a.START_TIME ,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
 {executed in 16 msec}
2023-06-22 16:45:15.207 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	ROWNUM, a.CAR_REGNO ,a.START_TIME ,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
 {executed in 13 msec}
2023-06-22 16:45:52.879 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 16:45:52.881 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:45:52.899 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 17 msec}
2023-06-22 16:45:53.970 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 16:45:53.971 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:45:53.975 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 3 msec}
2023-06-22 16:45:54.007 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 16:45:54.007 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:45:54.007 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 16:45:54.008 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:45:54.009 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:45:54.051 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 16:45:56.834 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 16:45:56.834 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 16:45:56.834 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 16:45:56.835 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:45:57.236 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 400 msec}
2023-06-22 16:45:57.646 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 409 msec}
2023-06-22 16:45:59.427 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 16:45:59.427 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 16:45:59.427 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 16:45:59.428 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:45:59.828 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 399 msec}
2023-06-22 16:45:59.829 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 16:46:00.731 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2296245f
2023-06-22 16:46:00.731 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 16:46:00.731 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,a.START_TIME ,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
2023-06-22 16:46:00.732 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:46:00.748 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	ROWNUM as no, a.CAR_REGNO ,a.START_TIME ,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
 {executed in 16 msec}
2023-06-22 16:46:00.763 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	ROWNUM as no, a.CAR_REGNO ,a.START_TIME ,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
 {executed in 15 msec}
2023-06-22 16:46:06.233 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 16:46:06.234 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:46:06.236 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 16:46:08.601 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@33f61355
2023-06-22 16:46:08.602 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:46:08.604 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì'
	order by 1
 {executed in 2 msec}
2023-06-22 16:46:08.632 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fb059105
2023-06-22 16:46:08.632 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:46:08.632 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
2023-06-22 16:46:08.633 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 16:46:08.634 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:46:08.668 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ë³ì'
 {executed in 0 msec}
2023-06-22 16:46:09.877 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c028c6d5
2023-06-22 16:46:09.877 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 16:46:09.878 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 16:46:09.879 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:46:10.272 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 393 msec}
2023-06-22 16:46:10.684 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 412 msec}
2023-06-22 16:46:11.574 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@992be63a
2023-06-22 16:46:11.574 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 16:46:11.574 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 16:46:11.575 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:46:11.991 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 415 msec}
2023-06-22 16:46:11.991 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-22 16:46:13.133 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6eeefaa7
2023-06-22 16:46:13.133 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 16:46:13.133 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,a.START_TIME ,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
2023-06-22 16:46:13.134 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:46:13.148 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	ROWNUM as no, a.CAR_REGNO ,a.START_TIME ,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
 {executed in 14 msec}
2023-06-22 16:46:13.162 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	ROWNUM as no, a.CAR_REGNO ,a.START_TIME ,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
 {executed in 14 msec}
2023-06-22 16:47:03.803 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 16:47:03.804 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:47:03.805 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 16:47:04.937 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 16:47:04.938 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:47:04.944 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 4 msec}
2023-06-22 16:47:04.971 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 16:47:04.971 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:47:04.971 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 16:47:04.972 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:47:04.974 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 16:47:05.015 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 1 msec}
2023-06-22 16:47:05.932 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 16:47:05.932 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 16:47:05.932 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 16:47:05.934 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:47:06.361 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 427 msec}
2023-06-22 16:47:06.761 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 400 msec}
2023-06-22 16:47:07.326 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 16:47:07.326 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 16:47:07.333 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 16:47:07.333 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:47:07.739 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 406 msec}
2023-06-22 16:47:07.740 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 16:47:08.846 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f40652f1
2023-06-22 16:47:08.847 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 16:47:08.847 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) ,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-03' ORDER BY a.START_TIME
2023-06-22 16:47:08.848 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:47:08.864 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) ,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-03' ORDER BY a.START_TIME
 {executed in 16 msec}
2023-06-22 16:47:08.882 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) ,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-03' ORDER BY a.START_TIME
 {executed in 17 msec}
2023-06-22 16:47:22.101 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@72835f4e
2023-06-22 16:47:22.102 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:47:22.106 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 16:47:22.107 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:47:22.108 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:47:22.109 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:47:22.149 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@52f7a773
2023-06-22 16:47:22.153 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±'
	order by 1
 {executed in 2 msec}
2023-06-22 16:47:22.183 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1a072523
2023-06-22 16:47:22.183 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:47:22.184 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
2023-06-22 16:47:22.185 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 16:47:22.186 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:47:22.231 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê³ ìì±'
 {executed in 1 msec}
2023-06-22 16:47:23.421 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@97ca359f
2023-06-22 16:47:23.421 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 16:47:23.421 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 16:47:23.422 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:47:23.829 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 406 msec}
2023-06-22 16:47:24.241 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 411 msec}
2023-06-22 16:47:24.897 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8442300f
2023-06-22 16:47:24.897 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 16:47:24.897 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-04' ORDER BY a.START_TIME
2023-06-22 16:47:24.898 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:47:24.918 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-04' ORDER BY a.START_TIME
 {executed in 19 msec}
2023-06-22 16:47:24.935 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-04' ORDER BY a.START_TIME
 {executed in 17 msec}
2023-06-22 16:47:26.314 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ca19ea34
2023-06-22 16:47:26.314 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 16:47:26.314 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
2023-06-22 16:47:26.315 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:47:26.335 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
 {executed in 20 msec}
2023-06-22 16:47:26.350 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
11. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,a.END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
 {executed in 15 msec}
2023-06-22 16:52:54.763 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9b8a18c6
2023-06-22 16:52:54.763 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 16:52:54.769 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-03' ORDER BY a.START_TIME
2023-06-22 16:52:54.770 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:52:54.792 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-03' ORDER BY a.START_TIME
 {executed in 21 msec}
2023-06-22 16:52:54.810 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-03' ORDER BY a.START_TIME
 {executed in 17 msec}
2023-06-22 16:52:55.975 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6cfa4758
2023-06-22 16:52:55.975 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 16:52:55.975 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
2023-06-22 16:52:55.976 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:52:55.996 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
 {executed in 20 msec}
2023-06-22 16:52:56.013 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
 {executed in 17 msec}
2023-06-22 16:52:57.303 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3e6a75ea
2023-06-22 16:52:57.304 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 16:52:57.304 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-07' ORDER BY a.START_TIME
2023-06-22 16:52:57.305 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:52:57.324 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-07' ORDER BY a.START_TIME
 {executed in 19 msec}
2023-06-22 16:52:57.342 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-07' ORDER BY a.START_TIME
 {executed in 18 msec}
2023-06-22 16:52:58.425 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fdaa47c
2023-06-22 16:52:58.425 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 16:52:58.425 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-09' ORDER BY a.START_TIME
2023-06-22 16:52:58.426 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:52:58.440 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-09' ORDER BY a.START_TIME
 {executed in 13 msec}
2023-06-22 16:52:58.453 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-09' ORDER BY a.START_TIME
 {executed in 13 msec}
2023-06-22 16:53:47.707 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6cfa4758
2023-06-22 16:53:47.707 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 16:53:47.707 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
2023-06-22 16:53:47.708 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:53:47.729 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
 {executed in 20 msec}
2023-06-22 16:53:47.752 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
 {executed in 22 msec}
2023-06-22 16:54:39.788 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@eb7753b5
2023-06-22 16:54:39.788 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:54:39.788 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
2023-06-22 16:54:39.789 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:54:39.790 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:54:39.792 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:54:39.840 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6233c30
2023-06-22 16:54:39.844 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='êµ¬ì§ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='êµ¬ì§ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='êµ¬ì§ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='êµ¬ì§ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='êµ¬ì§ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='êµ¬ì§ì'
	order by 1
 {executed in 3 msec}
2023-06-22 16:54:39.890 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bd32b9e0
2023-06-22 16:54:39.890 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:54:39.890 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'êµ¬ì§ì' order by a.base_year desc,a.acc_time desc
2023-06-22 16:54:39.893 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'êµ¬ì§ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:54:39.894 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'êµ¬ì§ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:54:39.940 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
13. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'êµ¬ì§ì'
 {executed in 0 msec}
2023-06-22 16:54:42.023 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3af5ca5c
2023-06-22 16:54:42.023 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 16:54:42.023 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'êµ¬ì§ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 16:54:42.024 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:54:42.402 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'êµ¬ì§ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 378 msec}
2023-06-22 16:54:42.815 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'êµ¬ì§ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 413 msec}
2023-06-22 16:54:44.372 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1025dc15
2023-06-22 16:54:44.372 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 16:54:44.372 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'êµ¬ì§ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-07' ORDER BY a.START_TIME
2023-06-22 16:54:44.373 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:54:44.391 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'êµ¬ì§ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-07' ORDER BY a.START_TIME
 {executed in 17 msec}
2023-06-22 16:54:44.408 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'êµ¬ì§ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-07' ORDER BY a.START_TIME
 {executed in 17 msec}
2023-06-22 16:54:48.682 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8ea2e872
2023-06-22 16:54:48.682 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:54:48.682 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'êµ¬ì§ì' order by a.base_year desc,a.acc_time desc
2023-06-22 16:54:48.683 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:54:48.684 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'êµ¬ì§ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:54:48.685 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'êµ¬ì§ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:54:48.720 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f5d80497
2023-06-22 16:54:48.724 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±'
	order by 1
 {executed in 2 msec}
2023-06-22 16:54:48.733 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
13. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê³ ìì±'
 {executed in 0 msec}
2023-06-22 16:54:48.753 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bce78247
2023-06-22 16:54:48.753 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:54:48.754 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
2023-06-22 16:54:48.755 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 16:54:48.756 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:54:50.481 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3aaa92c3
2023-06-22 16:54:50.481 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 16:54:50.481 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 16:54:50.482 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:54:50.869 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 387 msec}
2023-06-22 16:54:51.285 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 416 msec}
2023-06-22 16:57:07.536 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 16:57:07.537 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:57:07.565 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 27 msec}
2023-06-22 16:57:08.639 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 16:57:08.641 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:57:08.645 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 16:57:08.670 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 16:57:08.670 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:57:08.670 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 16:57:08.671 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:57:08.672 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:57:08.705 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
13. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 16:57:09.803 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 16:57:09.803 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 16:57:09.803 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 16:57:09.804 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:57:10.247 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 443 msec}
2023-06-22 16:57:10.634 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 386 msec}
2023-06-22 16:57:13.109 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 16:57:13.109 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 16:57:13.110 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 16:57:13.110 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:57:13.529 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 419 msec}
2023-06-22 16:57:13.530 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-22 16:57:16.200 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2296245f
2023-06-22 16:57:16.200 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 16:57:16.200 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
2023-06-22 16:57:16.201 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:57:16.218 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
 {executed in 17 msec}
2023-06-22 16:57:16.233 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
 {executed in 15 msec}
2023-06-22 16:57:28.103 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c5768183
2023-06-22 16:57:28.103 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 16:57:28.103 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
2023-06-22 16:57:28.104 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:57:28.131 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
 {executed in 27 msec}
2023-06-22 16:57:28.153 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
 {executed in 20 msec}
2023-06-22 16:57:29.774 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@43f38de0
2023-06-22 16:57:29.775 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:57:29.775 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 16:57:29.775 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:57:29.776 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 16:57:29.778 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 16:57:29.815 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2467d605
2023-06-22 16:57:29.819 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±'
	order by 1
 {executed in 2 msec}
2023-06-22 16:57:29.828 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
13. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê³ ìì±'
 {executed in 0 msec}
2023-06-22 16:57:29.850 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@eb7753b5
2023-06-22 16:57:29.850 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:57:29.850 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
2023-06-22 16:57:29.852 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:57:29.854 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:57:32.119 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@693a6431
2023-06-22 16:57:32.120 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 16:57:32.120 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 16:57:32.121 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:57:32.552 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 431 msec}
2023-06-22 16:57:32.964 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 412 msec}
2023-06-22 16:58:03.177 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 16:58:03.178 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:58:03.196 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 18 msec}
2023-06-22 16:58:04.448 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 16:58:04.449 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:58:04.452 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 16:58:04.481 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 16:58:04.481 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:58:04.481 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 16:58:04.482 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:58:04.483 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:58:04.522 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
13. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 16:58:05.677 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 16:58:05.677 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 16:58:05.677 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 16:58:05.678 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:58:06.092 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 413 msec}
2023-06-22 16:58:06.447 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 355 msec}
2023-06-22 16:58:07.962 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 16:58:07.962 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 16:58:07.962 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 16:58:07.963 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:58:08.356 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 393 msec}
2023-06-22 16:58:08.357 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 16:58:09.947 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c5768183
2023-06-22 16:58:09.947 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 16:58:09.947 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
2023-06-22 16:58:09.948 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:58:09.967 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
 {executed in 19 msec}
2023-06-22 16:58:09.991 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
 {executed in 23 msec}
2023-06-22 16:58:11.616 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@43f38de0
2023-06-22 16:58:11.617 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:58:11.617 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 16:58:11.617 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:58:11.618 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:58:11.619 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:58:11.655 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6233c30
2023-06-22 16:58:11.659 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='êµ¬ì§ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='êµ¬ì§ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='êµ¬ì§ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='êµ¬ì§ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='êµ¬ì§ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='êµ¬ì§ì'
	order by 1
 {executed in 2 msec}
2023-06-22 16:58:11.683 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bd32b9e0
2023-06-22 16:58:11.683 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:58:11.683 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'êµ¬ì§ì' order by a.base_year desc,a.acc_time desc
2023-06-22 16:58:11.684 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'êµ¬ì§ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:58:11.685 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'êµ¬ì§ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:58:11.724 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
13. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'êµ¬ì§ì'
 {executed in 1 msec}
2023-06-22 16:58:13.398 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3af5ca5c
2023-06-22 16:58:13.398 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 16:58:13.399 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'êµ¬ì§ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 16:58:13.400 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:58:13.789 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'êµ¬ì§ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 389 msec}
2023-06-22 16:58:14.199 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'êµ¬ì§ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 410 msec}
2023-06-22 16:58:15.601 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9ea1c3cf
2023-06-22 16:58:15.601 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 16:58:15.601 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'êµ¬ì§ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 16:58:15.603 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:58:16.038 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'êµ¬ì§ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 435 msec}
2023-06-22 16:58:16.039 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'êµ¬ì§ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 16:58:18.649 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bd32b9e0
2023-06-22 16:58:18.649 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:58:18.650 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'êµ¬ì§ì' order by a.base_year desc,a.acc_time desc
2023-06-22 16:58:18.650 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:58:18.651 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'êµ¬ì§ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:58:18.653 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'êµ¬ì§ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 16:58:18.688 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@97868665
2023-06-22 16:58:18.692 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ë³ë¬µ' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ë³ë¬µ' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ë³ë¬µ' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ë³ë¬µ' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ë³ë¬µ' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ë³ë¬µ'
	order by 1
 {executed in 1 msec}
2023-06-22 16:58:18.727 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5e960415
2023-06-22 16:58:18.728 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:58:18.728 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ë³ë¬µ' order by a.base_year desc,a.acc_time desc
2023-06-22 16:58:18.729 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ë³ë¬µ' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:58:18.730 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ë³ë¬µ' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:58:18.768 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
13. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê¶ë³ë¬µ'
 {executed in 1 msec}
2023-06-22 16:58:20.208 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2467d605
2023-06-22 16:58:20.210 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:58:20.212 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±'
	order by 1
 {executed in 1 msec}
2023-06-22 16:58:20.238 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@eb7753b5
2023-06-22 16:58:20.238 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:58:20.238 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
2023-06-22 16:58:20.239 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:58:20.241 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:58:20.282 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
13. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê³ ìì±'
 {executed in 0 msec}
2023-06-22 16:58:22.475 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@693a6431
2023-06-22 16:58:22.475 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 16:58:22.475 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 16:58:22.476 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:58:22.879 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 403 msec}
2023-06-22 16:58:23.278 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 399 msec}
2023-06-22 16:58:24.432 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cce65da4
2023-06-22 16:58:24.432 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 16:58:24.432 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 16:58:24.433 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:58:24.821 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 388 msec}
2023-06-22 16:58:24.822 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 16:58:26.056 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6cfa4758
2023-06-22 16:58:26.056 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 16:58:26.056 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
2023-06-22 16:58:26.057 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:58:26.076 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
 {executed in 18 msec}
2023-06-22 16:58:26.092 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
 {executed in 16 msec}
2023-06-22 16:58:26.981 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@55b25ea1
2023-06-22 16:58:26.981 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 16:58:26.981 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-06' ORDER BY a.START_TIME
2023-06-22 16:58:26.982 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:58:27.001 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-06' ORDER BY a.START_TIME
 {executed in 18 msec}
2023-06-22 16:58:27.017 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-06' ORDER BY a.START_TIME
 {executed in 15 msec}
2023-06-22 16:58:30.011 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6c70482a
2023-06-22 16:58:30.011 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 16:58:30.011 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-29' ORDER BY a.START_TIME
2023-06-22 16:58:30.012 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:58:30.027 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-29' ORDER BY a.START_TIME
 {executed in 15 msec}
2023-06-22 16:58:30.041 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-29' ORDER BY a.START_TIME
 {executed in 13 msec}
2023-06-22 16:58:31.268 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e0d7d3bd
2023-06-22 16:58:31.268 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 16:58:31.269 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-24' ORDER BY a.START_TIME
2023-06-22 16:58:31.270 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:58:31.287 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-24' ORDER BY a.START_TIME
 {executed in 16 msec}
2023-06-22 16:58:31.303 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-24' ORDER BY a.START_TIME
 {executed in 16 msec}
2023-06-22 16:58:32.957 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f81fbc74
2023-06-22 16:58:32.957 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 16:58:32.957 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-23' ORDER BY a.START_TIME
2023-06-22 16:58:32.958 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:58:32.973 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-23' ORDER BY a.START_TIME
 {executed in 14 msec}
2023-06-22 16:58:32.987 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-23' ORDER BY a.START_TIME
 {executed in 14 msec}
2023-06-22 16:59:40.149 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 16:59:40.150 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:59:40.166 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 15 msec}
2023-06-22 16:59:47.648 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@33f61355
2023-06-22 16:59:47.650 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 16:59:47.652 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì'
	order by 1
 {executed in 2 msec}
2023-06-22 16:59:47.677 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fb059105
2023-06-22 16:59:47.677 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 16:59:47.677 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
2023-06-22 16:59:47.678 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:59:47.680 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 16:59:47.715 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
13. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ë³ì'
 {executed in 0 msec}
2023-06-22 16:59:48.882 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c028c6d5
2023-06-22 16:59:48.882 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 16:59:48.882 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 16:59:48.883 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 16:59:49.268 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 385 msec}
2023-06-22 16:59:49.646 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 377 msec}
2023-06-22 17:01:27.702 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 17:01:27.702 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:01:27.704 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-06-22 17:01:29.073 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 17:01:29.074 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:01:29.077 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 1 msec}
2023-06-22 17:01:29.101 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 17:01:29.101 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:01:29.101 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:01:29.102 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:01:29.104 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 17:01:29.137 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
13. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 1 msec}
2023-06-22 17:01:30.088 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 17:01:30.088 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:01:30.088 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:01:30.089 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:01:30.476 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 387 msec}
2023-06-22 17:01:30.839 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 362 msec}
2023-06-22 17:01:45.685 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f60ce011
2023-06-22 17:01:45.685 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:01:45.685 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:01:45.686 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:01:45.687 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:01:45.688 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:01:45.729 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8bfea831
2023-06-22 17:01:45.734 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='êµ­ìí' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='êµ­ìí' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='êµ­ìí' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='êµ­ìí' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='êµ­ìí' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='êµ­ìí'
	order by 1
 {executed in 2 msec}
2023-06-22 17:01:45.769 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@530e25e1
2023-06-22 17:01:45.769 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:01:45.769 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'êµ­ìí' order by a.base_year desc,a.acc_time desc
2023-06-22 17:01:45.770 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'êµ­ìí' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:01:45.771 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'êµ­ìí' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:01:45.824 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
13. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'êµ­ìí'
 {executed in 0 msec}
2023-06-22 17:01:46.900 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 17:01:46.901 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:01:46.902 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 17:01:48.028 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 17:01:48.029 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:01:48.032 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 1 msec}
2023-06-22 17:01:48.059 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 17:01:48.059 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:01:48.059 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:01:48.060 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:01:48.060 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 17:01:48.092 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
13. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 17:01:49.077 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 17:01:49.078 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:01:49.078 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:01:49.079 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:01:49.462 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 382 msec}
2023-06-22 17:01:49.876 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 413 msec}
2023-06-22 17:02:12.094 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 17:02:12.095 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:02:12.097 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 17:02:14.344 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 17:02:14.345 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:02:14.348 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 17:02:14.358 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
13. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 1 msec}
2023-06-22 17:02:14.376 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 17:02:14.376 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:02:14.376 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:02:14.377 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:02:14.378 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:02:15.923 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 17:02:15.923 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:02:15.923 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:02:15.924 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:02:16.319 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 395 msec}
2023-06-22 17:02:16.755 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 436 msec}
2023-06-22 17:03:06.080 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 17:03:06.081 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:03:06.082 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 17:03:08.309 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 17:03:08.310 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:03:08.313 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 1 msec}
2023-06-22 17:03:08.323 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
13. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 1 msec}
2023-06-22 17:03:08.349 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 17:03:08.349 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:03:08.349 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:03:08.350 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:03:08.351 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 17:03:09.750 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 17:03:09.750 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:03:09.751 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:03:09.752 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:03:10.193 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 441 msec}
2023-06-22 17:03:10.616 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 422 msec}
2023-06-22 17:03:11.632 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 17:03:11.632 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 17:03:11.632 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 17:03:11.633 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:03:11.998 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 365 msec}
2023-06-22 17:03:11.999 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
13. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-22 17:03:27.167 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 17:03:27.168 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
15. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:03:27.185 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 17 msec}
2023-06-22 17:03:28.239 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@33f61355
2023-06-22 17:03:28.241 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
15. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:03:28.245 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
15. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì'
	order by 1
 {executed in 2 msec}
2023-06-22 17:03:28.277 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fb059105
2023-06-22 17:03:28.277 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:03:28.277 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:03:28.278 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:03:28.280 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:03:28.323 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
15. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ë³ì'
 {executed in 0 msec}
2023-06-22 17:03:29.487 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c028c6d5
2023-06-22 17:03:29.487 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:03:29.488 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:03:29.489 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
15. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:03:29.910 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 421 msec}
2023-06-22 17:03:30.279 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
15. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 369 msec}
2023-06-22 17:04:39.816 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 17:04:39.818 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:04:39.839 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 21 msec}
2023-06-22 17:04:41.059 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 17:04:41.060 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:04:41.064 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 17:04:41.098 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 17:04:41.099 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:04:41.099 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:04:41.100 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:04:41.101 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:04:41.147 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
21. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 17:04:42.892 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 17:04:42.892 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:04:42.893 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:04:42.894 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:04:43.296 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 400 msec}
2023-06-22 17:04:43.715 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 419 msec}
2023-06-22 17:05:20.953 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f60ce011
2023-06-22 17:05:20.953 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:05:20.953 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:05:20.954 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:05:20.955 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:05:20.956 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:05:21.001 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@499fd896
2023-06-22 17:05:21.004 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ë³ë¬µ' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ë³ë¬µ' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ë³ë¬µ' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ë³ë¬µ' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ë³ë¬µ' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ë³ë¬µ'
	order by 1
 {executed in 2 msec}
2023-06-22 17:05:21.034 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@10af5646
2023-06-22 17:05:21.034 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:05:21.034 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ë³ë¬µ' order by a.base_year desc,a.acc_time desc
2023-06-22 17:05:21.036 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ë³ë¬µ' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 17:05:21.037 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ë³ë¬µ' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 17:05:21.096 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
21. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê¶ë³ë¬µ'
 {executed in 0 msec}
2023-06-22 17:05:22.682 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8e7266c2
2023-06-22 17:05:22.682 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:05:22.682 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ë³ë¬µ' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:05:22.683 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:05:23.085 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ë³ë¬µ' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 401 msec}
2023-06-22 17:05:23.475 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ë³ë¬µ' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 390 msec}
2023-06-22 17:05:24.115 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@67758627
2023-06-22 17:05:24.115 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 17:05:24.115 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ë³ë¬µ' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 17:05:24.116 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:05:24.557 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ë³ë¬µ' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 441 msec}
2023-06-22 17:05:24.558 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ë³ë¬µ' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-22 17:05:26.496 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e018f7b8
2023-06-22 17:05:26.496 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 17:05:26.496 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ë³ë¬µ' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
2023-06-22 17:05:26.497 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:05:26.517 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ë³ë¬µ' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
 {executed in 20 msec}
2023-06-22 17:05:26.534 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ë³ë¬µ' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
 {executed in 17 msec}
2023-06-22 17:05:32.857 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 17:05:32.858 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:05:32.881 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 21 msec}
2023-06-22 17:05:33.767 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@46f018c7
2023-06-22 17:05:33.768 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:05:33.771 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ê´ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ê´ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ê´ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ê´ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ê´ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ê´ì'
	order by 1
 {executed in 2 msec}
2023-06-22 17:05:33.797 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dff9677
2023-06-22 17:05:33.797 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:05:33.797 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¹ê´ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:05:33.798 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¹ê´ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:05:33.799 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¹ê´ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:05:33.830 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
21. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê¹ê´ì'
 {executed in 0 msec}
2023-06-22 17:05:34.678 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d322cc47
2023-06-22 17:05:34.679 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:05:34.679 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¹ê´ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:05:34.680 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:05:35.052 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¹ê´ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 372 msec}
2023-06-22 17:05:35.455 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¹ê´ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 402 msec}
2023-06-22 17:05:37.566 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@555fbbcb
2023-06-22 17:05:37.566 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:05:37.566 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¹ê´ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:05:37.567 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:05:37.568 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¹ê´ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:05:37.569 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¹ê´ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 17:05:37.603 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b59502aa
2023-06-22 17:05:37.608 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ê¶í¸' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ê¶í¸' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ê¶í¸' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ê¶í¸' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ê¶í¸' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ê¶í¸'
	order by 1
 {executed in 2 msec}
2023-06-22 17:05:37.631 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7ca4805a
2023-06-22 17:05:37.631 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:05:37.631 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¹ê¶í¸' order by a.base_year desc,a.acc_time desc
2023-06-22 17:05:37.632 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¹ê¶í¸' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:05:37.633 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¹ê¶í¸' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:05:37.672 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
21. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê¹ê¶í¸'
 {executed in 0 msec}
2023-06-22 17:05:39.165 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fa6790d6
2023-06-22 17:05:39.165 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:05:39.165 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¹ê¶í¸' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:05:39.166 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:05:39.568 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¹ê¶í¸' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 402 msec}
2023-06-22 17:05:40.025 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¹ê¶í¸' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 457 msec}
2023-06-22 17:05:40.436 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d36ab03b
2023-06-22 17:05:40.436 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 17:05:40.436 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¹ê¶í¸' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 17:05:40.437 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:05:40.816 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¹ê¶í¸' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 379 msec}
2023-06-22 17:05:40.817 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¹ê¶í¸' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 17:05:41.825 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a92dc4a8
2023-06-22 17:05:41.825 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 17:05:41.825 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¹ê¶í¸' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
2023-06-22 17:05:41.826 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:05:41.844 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¹ê¶í¸' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
 {executed in 18 msec}
2023-06-22 17:05:41.859 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¹ê¶í¸' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
 {executed in 15 msec}
2023-06-22 17:05:43.116 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@27aad105
2023-06-22 17:05:43.116 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:05:43.116 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¹ê¶í¸' order by a.base_year desc,a.acc_time desc
2023-06-22 17:05:43.117 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:05:43.118 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¹ê¶í¸' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:05:43.119 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¹ê¶í¸' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:05:43.157 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4da1333c
2023-06-22 17:05:43.160 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ë¬¸ì±' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ë¬¸ì±' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ë¬¸ì±' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ë¬¸ì±' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ë¬¸ì±' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ë¬¸ì±'
	order by 1
 {executed in 2 msec}
2023-06-22 17:05:43.182 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@14b0b0ec
2023-06-22 17:05:43.182 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:05:43.183 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¹ë¬¸ì±' order by a.base_year desc,a.acc_time desc
2023-06-22 17:05:43.185 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¹ë¬¸ì±' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:05:43.186 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¹ë¬¸ì±' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:05:43.220 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
21. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê¹ë¬¸ì±'
 {executed in 0 msec}
2023-06-22 17:05:44.535 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9273c168
2023-06-22 17:05:44.535 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:05:44.535 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¹ë¬¸ì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:05:44.536 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:05:44.922 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¹ë¬¸ì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 385 msec}
2023-06-22 17:05:45.363 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¹ë¬¸ì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 440 msec}
2023-06-22 17:07:42.752 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 17:07:42.752 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:07:42.772 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 18 msec}
2023-06-22 17:07:43.795 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 17:07:43.796 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:07:43.798 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 1 msec}
2023-06-22 17:07:43.825 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 17:07:43.825 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:07:43.825 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:07:43.826 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:07:43.827 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:07:43.863 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
21. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 1 msec}
2023-06-22 17:07:45.528 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 17:07:45.528 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:07:45.528 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:07:45.529 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:07:45.964 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 435 msec}
2023-06-22 17:07:46.382 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 418 msec}
2023-06-22 17:08:05.584 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 17:08:05.585 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:08:05.586 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 17:08:08.579 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@33f61355
2023-06-22 17:08:08.580 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:08:08.584 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì'
	order by 1
 {executed in 2 msec}
2023-06-22 17:08:08.614 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fb059105
2023-06-22 17:08:08.614 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:08:08.614 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:08:08.615 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:08:08.616 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:08:08.648 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
21. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ë³ì'
 {executed in 0 msec}
2023-06-22 17:08:09.595 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c028c6d5
2023-06-22 17:08:09.595 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:08:09.595 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:08:09.596 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:08:09.975 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 379 msec}
2023-06-22 17:08:10.397 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 422 msec}
2023-06-22 17:08:11.687 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@992be63a
2023-06-22 17:08:11.687 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 17:08:11.687 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 17:08:11.688 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:08:12.066 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 378 msec}
2023-06-22 17:08:12.067 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-22 17:08:13.817 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@85f1e3c7
2023-06-22 17:08:13.817 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 17:08:13.817 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-12' ORDER BY a.START_TIME
2023-06-22 17:08:13.818 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:08:13.839 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-12' ORDER BY a.START_TIME
 {executed in 21 msec}
2023-06-22 17:08:13.859 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-12' ORDER BY a.START_TIME
 {executed in 19 msec}
2023-06-22 17:08:18.770 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b4afb4ef
2023-06-22 17:08:18.771 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 17:08:18.771 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-09' ORDER BY a.START_TIME
2023-06-22 17:08:18.772 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:08:18.787 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-09' ORDER BY a.START_TIME
 {executed in 14 msec}
2023-06-22 17:08:18.800 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-09' ORDER BY a.START_TIME
 {executed in 13 msec}
2023-06-22 17:08:20.066 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cbf79da6
2023-06-22 17:08:20.067 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 17:08:20.067 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-08' ORDER BY a.START_TIME
2023-06-22 17:08:20.067 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:08:20.082 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-08' ORDER BY a.START_TIME
 {executed in 14 msec}
2023-06-22 17:08:20.102 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-08' ORDER BY a.START_TIME
 {executed in 20 msec}
2023-06-22 17:08:21.157 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b4afb4ef
2023-06-22 17:08:21.157 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 17:08:21.157 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-09' ORDER BY a.START_TIME
2023-06-22 17:08:21.158 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:08:21.176 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-09' ORDER BY a.START_TIME
 {executed in 18 msec}
2023-06-22 17:08:21.195 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-09' ORDER BY a.START_TIME
 {executed in 18 msec}
2023-06-22 17:08:21.706 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b481b535
2023-06-22 17:08:21.706 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 17:08:21.706 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-10' ORDER BY a.START_TIME
2023-06-22 17:08:21.707 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:08:21.731 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-10' ORDER BY a.START_TIME
 {executed in 24 msec}
2023-06-22 17:08:21.748 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ë³ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-10' ORDER BY a.START_TIME
 {executed in 16 msec}
2023-06-22 17:08:45.346 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 17:08:45.347 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:08:45.370 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 22 msec}
2023-06-22 17:08:47.523 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9abfd7e3
2023-06-22 17:08:47.524 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:08:47.527 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì©ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì©ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì©ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì©ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì©ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì©ì'
	order by 1
 {executed in 2 msec}
2023-06-22 17:08:47.552 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@61cf5593
2023-06-22 17:08:47.552 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:08:47.552 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ì©ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:08:47.553 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ì©ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:08:47.554 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ì©ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:08:47.586 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
22. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê¶ì©ì'
 {executed in 0 msec}
2023-06-22 17:08:48.782 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@26f28b63
2023-06-22 17:08:48.782 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:08:48.782 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì©ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:08:48.783 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:08:49.185 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì©ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 401 msec}
2023-06-22 17:08:49.580 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì©ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 395 msec}
2023-06-22 17:08:50.617 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fff5aac8
2023-06-22 17:08:50.617 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 17:08:50.617 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì©ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 17:08:50.618 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:08:51.017 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì©ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 399 msec}
2023-06-22 17:08:51.018 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì©ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 17:08:51.917 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@be70d67e
2023-06-22 17:08:51.917 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 17:08:51.917 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì©ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-02' ORDER BY a.START_TIME
2023-06-22 17:08:51.918 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:08:51.932 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì©ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-02' ORDER BY a.START_TIME
 {executed in 14 msec}
2023-06-22 17:08:51.950 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì©ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-02' ORDER BY a.START_TIME
 {executed in 18 msec}
2023-06-22 17:11:18.735 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 17:11:18.737 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:11:18.762 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 25 msec}
2023-06-22 17:11:19.896 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@23fb342
2023-06-22 17:11:19.897 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:11:19.900 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
23. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ë³ë¬µ' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ë³ë¬µ' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ë³ë¬µ' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ë³ë¬µ' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ë³ë¬µ' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ë³ë¬µ'
	order by 1
 {executed in 2 msec}
2023-06-22 17:11:19.927 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c94f30f2
2023-06-22 17:11:19.927 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:11:19.927 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ë³ë¬µ' order by a.base_year desc,a.acc_time desc
2023-06-22 17:11:19.928 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ë³ë¬µ' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:11:19.929 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ë³ë¬µ' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:11:19.968 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
23. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê¶ë³ë¬µ'
 {executed in 1 msec}
2023-06-22 17:11:20.973 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8e7266c2
2023-06-22 17:11:20.973 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:11:20.973 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ë³ë¬µ' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:11:20.974 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:11:21.400 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ë³ë¬µ' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 426 msec}
2023-06-22 17:11:21.790 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ë³ë¬µ' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 389 msec}
2023-06-22 17:11:25.733 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@67758627
2023-06-22 17:11:25.733 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 17:11:25.733 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ë³ë¬µ' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 17:11:25.734 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:11:26.119 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ë³ë¬µ' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 385 msec}
2023-06-22 17:11:26.120 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ë³ë¬µ' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-22 17:13:49.804 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 17:13:49.805 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:13:49.806 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-06-22 17:13:51.940 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 17:13:51.941 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:13:51.944 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
23. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 17:13:51.970 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 17:13:51.970 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:13:51.970 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:13:51.971 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:13:51.972 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:13:52.005 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
23. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 17:13:53.172 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 17:13:53.172 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:13:53.172 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min ,	avg(a.BMS_KM) avg_bms_km ,	avg(a.TOT_MIN) avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:13:53.173 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:13:53.625 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min ,	avg(a.BMS_KM) avg_bms_km ,	avg(a.TOT_MIN) avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 452 msec}
2023-06-22 17:13:54.034 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min ,	avg(a.BMS_KM) avg_bms_km ,	avg(a.TOT_MIN) avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 407 msec}
2023-06-22 17:15:38.035 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 17:15:38.036 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:15:38.038 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 17:15:38.858 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 17:15:38.859 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:15:38.862 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
23. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 1 msec}
2023-06-22 17:15:38.871 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
23. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 17:15:38.890 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 17:15:38.890 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:15:38.890 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:15:38.891 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:15:38.892 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:15:39.905 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 17:15:39.905 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:15:39.909 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:15:39.910 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:15:40.304 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 393 msec}
2023-06-22 17:15:40.670 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 366 msec}
2023-06-22 17:16:25.955 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 17:16:25.956 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:16:25.958 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 1 msec}
2023-06-22 17:16:27.523 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 17:16:27.524 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:16:27.527 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
23. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 1 msec}
2023-06-22 17:16:27.538 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
23. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 17:16:27.562 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 17:16:27.562 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:16:27.562 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:16:27.563 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:16:27.564 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:16:28.493 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 17:16:28.493 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:16:28.494 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:16:28.495 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:16:28.988 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 493 msec}
2023-06-22 17:16:29.385 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 396 msec}
2023-06-22 17:16:58.924 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 17:16:58.924 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 17:16:58.924 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 17:16:58.925 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:16:59.348 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 423 msec}
2023-06-22 17:16:59.349 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-22 17:23:19.550 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7f9ec75e
2023-06-22 17:23:19.550 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 17:23:19.550 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-08' ORDER BY a.START_TIME
2023-06-22 17:23:19.551 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
26. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:23:19.570 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
26. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-08' ORDER BY a.START_TIME
 {executed in 19 msec}
2023-06-22 17:23:19.585 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
26. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-08' ORDER BY a.START_TIME
 {executed in 13 msec}
2023-06-22 17:24:39.949 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 17:24:39.950 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:24:39.982 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 31 msec}
2023-06-22 17:24:40.833 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 17:24:40.834 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:24:40.837 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 17:24:40.848 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
31. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 17:24:40.871 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 17:24:40.871 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:24:40.871 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:24:40.872 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:24:40.873 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:24:41.795 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 17:24:41.795 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:24:41.795 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:24:41.796 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:24:42.183 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 387 msec}
2023-06-22 17:24:42.583 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 399 msec}
2023-06-22 17:25:07.811 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 17:25:07.812 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:25:07.813 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 0 msec}
2023-06-22 17:25:08.986 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 17:25:08.987 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:25:08.990 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 17:25:09.000 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
31. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 1 msec}
2023-06-22 17:25:09.023 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 17:25:09.023 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:25:09.023 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:25:09.024 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:25:09.026 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:25:10.478 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 17:25:10.478 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:25:10.478 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:25:10.479 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:25:10.863 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 383 msec}
2023-06-22 17:25:11.259 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 396 msec}
2023-06-22 17:25:15.582 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 17:25:15.582 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 17:25:15.582 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 17:25:15.583 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:25:15.972 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 389 msec}
2023-06-22 17:25:15.973 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-22 17:25:18.591 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7f9ec75e
2023-06-22 17:25:18.591 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 17:25:18.591 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-08' ORDER BY a.START_TIME
2023-06-22 17:25:18.592 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:25:18.606 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-08' ORDER BY a.START_TIME
 {executed in 14 msec}
2023-06-22 17:25:18.621 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-08' ORDER BY a.START_TIME
 {executed in 14 msec}
2023-06-22 17:29:13.277 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@72ff0fd7
2023-06-22 17:29:13.277 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-22 17:29:13.277 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-22 17:29:13.278 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:29:13.278 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 0 msec}
2023-06-22 17:29:13.280 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 0 msec}
2023-06-22 17:29:31.897 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dbe05034
2023-06-22 17:29:31.897 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-22 17:29:31.897 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
2023-06-22 17:29:31.899 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:29:31.908 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
 {executed in 9 msec}
2023-06-22 17:29:31.910 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-22 17:29:35.156 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fe1bd3bb
2023-06-22 17:29:35.156 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:29:35.156 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:29:35.157 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:29:35.158 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 17:29:35.159 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:29:36.919 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dbe05034
2023-06-22 17:29:36.919 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-22 17:29:36.919 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
2023-06-22 17:29:36.920 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:29:36.922 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-22 17:29:36.925 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-06-22 17:29:37.633 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@72ff0fd7
2023-06-22 17:29:37.633 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-22 17:29:37.633 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-22 17:29:37.634 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:29:37.636 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 2 msec}
2023-06-22 17:29:37.637 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 17:29:46.772 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7bdee437
2023-06-22 17:29:46.772 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:29:46.772 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:29:46.773 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:29:47.274 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 501 msec}
2023-06-22 17:29:47.717 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 443 msec}
2023-06-22 17:29:58.871 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fe1bd3bb
2023-06-22 17:29:58.871 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:29:58.871 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:29:58.872 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:29:58.873 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:29:58.874 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:29:58.922 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f9487af
2023-06-22 17:29:58.926 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
33. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶íì¢' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶íì¢' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶íì¢' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶íì¢' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶íì¢' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶íì¢'
	order by 1
 {executed in 2 msec}
2023-06-22 17:29:58.956 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56a4055f
2023-06-22 17:29:58.956 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:29:58.956 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶íì¢' order by a.base_year desc,a.acc_time desc
2023-06-22 17:29:58.957 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶íì¢' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:29:58.959 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶íì¢' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:29:59.015 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
33. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê¶íì¢'
 {executed in 0 msec}
2023-06-22 17:30:03.687 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d46715db
2023-06-22 17:30:03.687 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:30:03.688 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶íì¢' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:30:03.689 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:30:04.147 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶íì¢' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 458 msec}
2023-06-22 17:30:04.537 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶íì¢' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 390 msec}
2023-06-22 17:31:09.054 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 17:31:09.055 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:31:09.079 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 23 msec}
2023-06-22 17:31:09.960 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 17:31:09.961 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:31:09.964 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
33. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 1 msec}
2023-06-22 17:31:09.990 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 17:31:09.990 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:31:09.990 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:31:09.990 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 17:31:09.991 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:31:10.032 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
33. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 17:31:10.962 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f2102e2
2023-06-22 17:31:10.963 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:31:10.966 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
33. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±'
	order by 1
 {executed in 2 msec}
2023-06-22 17:31:10.989 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@56308092
2023-06-22 17:31:10.989 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:31:10.989 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
2023-06-22 17:31:10.990 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:31:10.991 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:31:11.029 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
33. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê³ ìì±'
 {executed in 0 msec}
2023-06-22 17:31:12.032 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1b53b662
2023-06-22 17:31:12.032 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:31:12.033 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:31:12.033 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:31:12.458 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 424 msec}
2023-06-22 17:31:12.839 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 381 msec}
2023-06-22 17:31:14.259 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f456d5c7
2023-06-22 17:31:14.260 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 17:31:14.260 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 17:31:14.261 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:31:14.643 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 382 msec}
2023-06-22 17:31:14.644 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 17:31:16.069 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6cfa4758
2023-06-22 17:31:16.069 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 17:31:16.070 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
2023-06-22 17:31:16.071 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:31:16.089 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
 {executed in 18 msec}
2023-06-22 17:31:16.114 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
 {executed in 25 msec}
2023-06-22 17:31:17.984 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@eb7753b5
2023-06-22 17:31:17.984 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:31:17.984 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
2023-06-22 17:31:17.985 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:31:17.986 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:31:17.987 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 17:31:19.273 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@693a6431
2023-06-22 17:31:19.273 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:31:19.273 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:31:19.274 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:31:19.665 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 391 msec}
2023-06-22 17:31:20.115 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 450 msec}
2023-06-22 17:31:21.484 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cce65da4
2023-06-22 17:31:21.484 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 17:31:21.484 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 17:31:21.485 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:31:21.486 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 17:31:21.487 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 17:31:23.484 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9b8a18c6
2023-06-22 17:31:23.485 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 17:31:23.485 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-03' ORDER BY a.START_TIME
2023-06-22 17:31:23.486 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:31:23.514 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-03' ORDER BY a.START_TIME
 {executed in 28 msec}
2023-06-22 17:31:23.538 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-03' ORDER BY a.START_TIME
 {executed in 23 msec}
2023-06-22 17:31:25.752 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1a072523
2023-06-22 17:31:25.753 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:31:25.753 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
2023-06-22 17:31:25.753 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:31:25.754 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:31:25.755 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:31:25.793 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5e967c74
2023-06-22 17:31:25.797 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
33. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì©ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì©ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì©ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì©ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì©ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì©ì'
	order by 1
 {executed in 2 msec}
2023-06-22 17:31:25.823 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@25a5fa24
2023-06-22 17:31:25.823 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:31:25.823 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ì©ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:31:25.824 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ì©ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 17:31:25.824 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ì©ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 17:31:25.870 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
33. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê¶ì©ì'
 {executed in 0 msec}
2023-06-22 17:31:27.189 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a3690aa0
2023-06-22 17:31:27.189 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:31:27.189 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì©ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:31:27.190 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:31:27.554 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì©ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 364 msec}
2023-06-22 17:31:27.971 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì©ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 417 msec}
2023-06-22 17:31:28.523 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7150413
2023-06-22 17:31:28.523 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 17:31:28.523 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì©ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 17:31:28.524 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:31:28.902 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì©ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 378 msec}
2023-06-22 17:31:28.903 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì©ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 17:31:30.477 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1b79797d
2023-06-22 17:31:30.478 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 17:31:30.478 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì©ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-09' ORDER BY a.START_TIME
2023-06-22 17:31:30.479 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:31:30.492 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì©ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-09' ORDER BY a.START_TIME
 {executed in 13 msec}
2023-06-22 17:31:30.506 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì©ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-09' ORDER BY a.START_TIME
 {executed in 13 msec}
2023-06-22 17:31:35.295 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@99f685da
2023-06-22 17:31:35.295 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:31:35.296 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ì©ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:31:35.296 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:31:35.297 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ì©ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:31:35.298 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ì©ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:31:35.337 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@63bc9119
2023-06-22 17:31:35.340 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
33. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ê²½ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ê²½ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ê²½ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ê²½ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ê²½ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¹ê²½ì'
	order by 1
 {executed in 2 msec}
2023-06-22 17:31:35.365 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2acc0ec9
2023-06-22 17:31:35.365 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:31:35.365 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¹ê²½ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:31:35.366 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¹ê²½ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:31:35.367 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¹ê²½ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:31:35.410 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
33. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê¹ê²½ì'
 {executed in 0 msec}
2023-06-22 17:31:36.456 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a88f1f45
2023-06-22 17:31:36.456 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:31:36.456 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¹ê²½ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:31:36.457 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:31:36.856 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¹ê²½ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 399 msec}
2023-06-22 17:31:37.293 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¹ê²½ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 437 msec}
2023-06-22 17:31:50.818 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 17:31:50.819 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:31:50.835 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 16 msec}
2023-06-22 17:31:51.868 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d0f1a0d6
2023-06-22 17:31:51.869 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:31:51.873 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
33. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì¤í' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì¤í' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì¤í' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì¤í' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì¤í' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì¤í'
	order by 1
 {executed in 3 msec}
2023-06-22 17:31:51.897 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@98011e86
2023-06-22 17:31:51.897 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:31:51.897 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ì¤í' order by a.base_year desc,a.acc_time desc
2023-06-22 17:31:51.898 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ì¤í' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:31:51.899 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ì¤í' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:31:51.931 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
33. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê¶ì¤í'
 {executed in 1 msec}
2023-06-22 17:31:53.322 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5d245456
2023-06-22 17:31:53.322 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:31:53.322 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:31:53.323 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:31:53.704 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 380 msec}
2023-06-22 17:31:54.117 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 413 msec}
2023-06-22 17:31:59.139 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@362773bb
2023-06-22 17:31:59.139 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 17:31:59.139 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 17:31:59.140 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:31:59.546 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 405 msec}
2023-06-22 17:31:59.546 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-22 17:32:02.587 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@51ab4270
2023-06-22 17:32:02.587 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 17:32:02.587 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-09' ORDER BY a.START_TIME
2023-06-22 17:32:02.588 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:32:02.604 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-09' ORDER BY a.START_TIME
 {executed in 16 msec}
2023-06-22 17:32:02.617 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-09' ORDER BY a.START_TIME
 {executed in 13 msec}
2023-06-22 17:32:04.995 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@450b8ae9
2023-06-22 17:32:04.995 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-22 17:32:04.995 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê¶ì¤í' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-22 17:32:04.996 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:32:04.997 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê¶ì¤í' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 17:32:04.998 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê¶ì¤í' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 17:32:06.427 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4deb5f49
2023-06-22 17:32:06.427 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:32:06.427 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:32:06.428 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:32:06.866 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 438 msec}
2023-06-22 17:32:07.343 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 476 msec}
2023-06-22 17:32:10.325 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b19758bc
2023-06-22 17:32:10.325 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 17:32:10.325 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 17:32:10.326 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:32:10.327 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-22 17:32:10.328 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 17:32:14.110 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9782fc95
2023-06-22 17:32:14.110 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 17:32:14.110 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-06' ORDER BY a.START_TIME
2023-06-22 17:32:14.112 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:32:14.131 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-06' ORDER BY a.START_TIME
 {executed in 19 msec}
2023-06-22 17:32:14.149 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-06' ORDER BY a.START_TIME
 {executed in 18 msec}
2023-06-22 17:32:57.788 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 17:32:57.789 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:32:57.809 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 18 msec}
2023-06-22 17:32:59.038 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 17:32:59.040 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:32:59.042 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
33. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 17:32:59.069 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 17:32:59.069 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:32:59.069 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:32:59.070 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:32:59.071 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:32:59.101 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
33. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 17:33:00.991 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 17:33:00.991 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:33:00.991 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:33:00.992 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:33:01.420 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 428 msec}
2023-06-22 17:33:01.867 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 447 msec}
2023-06-22 17:33:03.572 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 17:33:03.573 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 17:33:03.573 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 17:33:03.574 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:33:03.982 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 408 msec}
2023-06-22 17:33:03.983 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-22 17:33:06.342 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4928827c
2023-06-22 17:33:06.342 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-06-22 17:33:06.342 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
2023-06-22 17:33:06.343 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:33:06.346 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-06-22 17:33:06.347 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = 'ê°ê·¼ì' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-06-22 17:33:06.956 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e047421f
2023-06-22 17:33:06.956 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-06-22 17:33:06.956 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
2023-06-22 17:33:06.957 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:33:06.958 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 17:33:06.959 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = 'ê°ê·¼ì' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-06-22 17:33:07.613 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e927167f
2023-06-22 17:33:07.613 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:33:07.613 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:33:07.614 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:33:07.988 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 374 msec}
2023-06-22 17:33:08.381 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 392 msec}
2023-06-22 17:33:10.983 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 17:33:10.983 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 17:33:10.983 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 17:33:10.984 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:33:10.985 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-22 17:33:10.986 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-22 17:33:32.259 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b640603
2023-06-22 17:33:32.260 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:33:32.260 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 17:33:32.261 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:33:32.262 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 17:33:32.263 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 17:33:32.324 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8da8ec1c
2023-06-22 17:33:32.327 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
33. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì¤í' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì¤í' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì¤í' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì¤í' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì¤í' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê¶ì¤í'
	order by 1
 {executed in 1 msec}
2023-06-22 17:33:32.358 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@54b869cc
2023-06-22 17:33:32.358 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 17:33:32.358 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ì¤í' order by a.base_year desc,a.acc_time desc
2023-06-22 17:33:32.359 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ì¤í' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:33:32.360 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê¶ì¤í' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 17:33:32.407 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
33. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê¶ì¤í'
 {executed in 0 msec}
2023-06-22 17:33:33.542 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d27b7a48
2023-06-22 17:33:33.542 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 17:33:33.542 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 17:33:33.543 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:33:34.003 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 460 msec}
2023-06-22 17:33:34.402 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 398 msec}
2023-06-22 17:33:35.398 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@362773bb
2023-06-22 17:33:35.398 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 17:33:35.398 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 17:33:35.399 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 17:33:35.788 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 389 msec}
2023-06-22 17:33:35.789 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 17:33:36.742 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aecae54c
2023-06-22 17:33:36.742 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 17:33:36.743 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
2023-06-22 17:33:36.743 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
33. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 17:33:36.762 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
 {executed in 17 msec}
2023-06-22 17:33:36.778 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
33. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê¶ì¤í' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.WORK_DATE = '2023-04-05' ORDER BY a.START_TIME
 {executed in 16 msec}
2023-06-22 17:34:48.364 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=1m9s975ms615Âµs400ns).
2023-06-22 20:35:22.705 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-22 20:35:22.706 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-22 20:35:22.706 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-06-22 20:35:22.706 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-06-22 20:35:33.415 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=3h15s61ms694Âµs).
2023-06-22 22:55:18.191 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=2h19m51s459ms339Âµs700ns).
2023-06-22 23:24:52.692 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-22 23:24:52.692 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-22 23:24:52.692 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-06-22 23:24:52.692 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-22 23:24:52.692 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-06-22 23:24:53.121 ERROR [http-nio-10010-exec-2] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor147.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$dca3e52d.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 23:24:53.129 ERROR [http-nio-10010-exec-2] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor147.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$dca3e52d.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 23:24:53.133 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-22 23:24:53.133 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-22 23:24:53.133 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-22 23:24:53.133 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-22 23:24:53.133 INFO  [http-nio-10010-exec-2] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-22 23:24:54.076 ERROR [http-nio-10010-exec-2] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor147.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$dca3e52d.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 23:24:54.077 ERROR [http-nio-10010-exec-2] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor147.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$dca3e52d.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-06-22 23:24:54.078 ERROR [http-nio-10010-exec-2] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor147.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$dca3e52d.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 97 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 100 common frames omitted
2023-06-22 23:24:54.166 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-06-22 23:24:54.166 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-06-22 23:24:54.166 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-06-22 23:24:54.166 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-06-22 23:24:54.166 INFO  [http-nio-10010-exec-4] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-06-22 23:24:55.379 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
63. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 23:24:55.380 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
63. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-06-22 23:24:55.382 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-06-22 23:24:55.481 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$SeKBWWC.K.MXyq7cTs3qQehvZ6tn7zxb/qOx6dKK2Bfn2tO/pqr6W
2023-06-22 23:24:55.575 INFO  [http-nio-10010-exec-2] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-06-22 23:24:58.406 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 23:24:58.407 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
63. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 23:24:58.437 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
63. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 30 msec}
2023-06-22 23:24:59.703 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 23:24:59.705 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
63. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 23:24:59.710 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
63. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 3 msec}
2023-06-22 23:24:59.741 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 23:24:59.741 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 23:24:59.741 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 23:24:59.742 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
63. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 23:24:59.743 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
63. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 23:24:59.780 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
63. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 1 msec}
2023-06-22 23:25:00.888 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 23:25:00.888 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 23:25:00.888 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
2023-06-22 23:25:00.890 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
63. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 23:25:02.140 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
63. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 1249 msec}
2023-06-22 23:25:02.141 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
63. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 23:25:03.217 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
63. SELECT 	BASE_YM ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) as bms_km ,	round(sum(a.TOT_MIN),2) as tot_min ,	round(avg(a.BMS_KM),2) as avg_bms_km ,	round(avg(a.TOT_MIN),2) as avg_tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM LIKE '2023' || '%' GROUP BY BASE_YM
 {executed in 1076 msec}
2023-06-22 23:25:33.467 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 23:25:33.467 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 23:25:33.467 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 23:25:33.468 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
63. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 23:25:34.400 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
63. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 932 msec}
2023-06-22 23:25:34.401 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
63. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 23:25:34.403 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
63. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-06-22 23:37:42.030 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b640603
2023-06-22 23:37:42.031 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 23:37:42.038 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 23:37:42.039 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 23:37:42.041 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 23:37:42.043 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 23:37:42.102 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f0ad5e9b
2023-06-22 23:37:42.105 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
73. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ë³ì'
	order by 1
 {executed in 2 msec}
2023-06-22 23:37:42.140 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b7bcdc4b
2023-06-22 23:37:42.140 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 23:37:42.140 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
2023-06-22 23:37:42.141 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 23:37:42.142 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 23:37:42.185 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
73. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ë³ì'
 {executed in 0 msec}
2023-06-22 23:37:43.686 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@357fecc7
2023-06-22 23:37:43.686 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 23:37:43.686 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.base_ym , 	count(k.base_ym) ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	b.company_no = a.company_no and b.EMP_NM = 'ê°ê·¼ì'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' and		a.BASE_YM like  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k GROUP BY k.base_ym
2023-06-22 23:37:43.688 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-06-22 23:37:43.802 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. SELECT 	k.base_ym , 	count(k.base_ym) ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	b.company_no = a.company_no and b.EMP_NM = 'ê°ê·¼ì'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' and		a.BASE_YM like  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k GROUP BY k.base_ym
 {executed in 113 msec}
2023-06-22 23:37:43.839 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. SELECT 	k.base_ym , 	count(k.base_ym) ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	b.company_no = a.company_no and b.EMP_NM = 'ê°ê·¼ì'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' and		a.BASE_YM like  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k GROUP BY k.base_ym
 {executed in 37 msec}
2023-06-22 23:38:37.528 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b7bcdc4b
2023-06-22 23:38:37.528 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 23:38:37.529 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
2023-06-22 23:38:37.529 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 23:38:37.530 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 23:38:37.531 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ë³ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 23:38:37.589 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4bd84e28
2023-06-22 23:38:37.592 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
73. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê³ ìì±'
	order by 1
 {executed in 2 msec}
2023-06-22 23:38:37.628 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@12e7cbd8
2023-06-22 23:38:37.628 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 23:38:37.628 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
2023-06-22 23:38:37.629 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 23:38:37.630 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê³ ìì±' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 23:38:37.685 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
73. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê³ ìì±'
 {executed in 1 msec}
2023-06-22 23:38:38.964 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@90aadc54
2023-06-22 23:38:38.964 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 23:38:38.974 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.base_ym , 	count(k.base_ym) as tot_cnt ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	b.company_no = a.company_no and b.EMP_NM = 'ê°ê·¼ì'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' and		a.BASE_YM like  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k GROUP BY k.base_ym
2023-06-22 23:38:38.975 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 23:38:39.063 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. SELECT 	k.base_ym , 	count(k.base_ym) as tot_cnt ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	b.company_no = a.company_no and b.EMP_NM = 'ê°ê·¼ì'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' and		a.BASE_YM like  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k GROUP BY k.base_ym
 {executed in 86 msec}
2023-06-22 23:38:39.140 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. SELECT 	k.base_ym , 	count(k.base_ym) as tot_cnt ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	b.company_no = a.company_no and b.EMP_NM = 'ê°ê·¼ì'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' and		a.BASE_YM like  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k GROUP BY k.base_ym
 {executed in 77 msec}
2023-06-22 23:38:43.212 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f456d5c7
2023-06-22 23:38:43.212 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 23:38:43.212 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 23:38:43.214 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 23:38:44.431 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1217 msec}
2023-06-22 23:38:44.433 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 23:38:44.434 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 23:38:46.129 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ca19ea34
2023-06-22 23:38:46.129 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 23:38:46.129 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
2023-06-22 23:38:46.130 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 23:38:46.179 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
 {executed in 48 msec}
2023-06-22 23:38:46.234 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê³ ìì±' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
 {executed in 54 msec}
2023-06-22 23:39:26.018 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-06-22 23:39:26.019 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 23:39:26.050 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 31 msec}
2023-06-22 23:39:27.737 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e79d3d0d
2023-06-22 23:39:27.739 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 23:39:27.743 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
73. SELECT  5 AS seq
		,  '5' AS a0 
		,	'íì£¼ì' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'ì´ë©ì¼' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'í¸ë´' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'êµ¬ë¶' AS a3, 		a.JOB_KIND AS a3_value 
		,	'ê¸ì¬ê³ì°' AS a4, 		'' AS a4_value 
		,	'êµ­ë¯¼ì°ê¸ì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'í´ëí°' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'ì ê·ì§êµ¬ë¶' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'ë¶ì' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'ì´ì ë©´íë²í¸' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'ìëìì¼' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'ê·¼ìì¼ì' AS a2, 		nvl(to_char(datediff(DAY,'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-'),to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'ì§ì¢' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'ê±´ê°ë³´íë²í¸' AS a4, 	'' AS a4_value 
		,	'ê±´ê°ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'ì±ëª' AS a1, 		a.EMP_NM AS a1_value  
		,	'í´ì¬ì¼ì' AS a2, 		'' AS a2_value  
		,	'ê³ ì /SPêµ¬ë¶' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'ê°ìì¡°í©' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      ìì¤' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'ì¬ìë²í¸' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'ìì¬ì¼ì' AS a2, 		'20'||RIGHT(a.enter_date,2) || '-'||replace(SUBSTRING(a.enter_date,0, LENGTH (a.ENTER_DATE)-3),'/','-') AS a2_value 
		,	'ë¸ì ' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'ì±ë³' AS a4, 		a.sex AS a4_value 
		,	'ê³ ì©ë³´íì·¨ë' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='ê°ê·¼ì'
	order by 1
 {executed in 2 msec}
2023-06-22 23:39:27.777 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aeacbabd
2023-06-22 23:39:27.777 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-06-22 23:39:27.778 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
2023-06-22 23:39:27.779 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 1 msec}
2023-06-22 23:39:27.780 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = 'ê°ê·¼ì' order by a.base_year desc,a.acc_time desc
 {executed in 0 msec}
2023-06-22 23:39:27.811 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
73. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = 'ê°ê·¼ì'
 {executed in 0 msec}
2023-06-22 23:39:28.747 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cff08d
2023-06-22 23:39:28.747 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-06-22 23:39:28.747 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.base_ym , 	count(k.base_ym) as tot_cnt ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	b.company_no = a.company_no and b.EMP_NM = 'ê°ê·¼ì'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' and		a.BASE_YM like  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k GROUP BY k.base_ym
2023-06-22 23:39:28.748 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 23:39:28.812 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. SELECT 	k.base_ym , 	count(k.base_ym) as tot_cnt ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	b.company_no = a.company_no and b.EMP_NM = 'ê°ê·¼ì'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' and		a.BASE_YM like  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k GROUP BY k.base_ym
 {executed in 63 msec}
2023-06-22 23:39:28.891 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. SELECT 	k.base_ym , 	count(k.base_ym) as tot_cnt ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	b.company_no = a.company_no and b.EMP_NM = 'ê°ê·¼ì'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' and		a.BASE_YM like  '2023' || '%' GROUP BY	a.base_ym,a.WORK_DATE ) k GROUP BY k.base_ym
 {executed in 78 msec}
2023-06-22 23:39:52.539 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4cd30ff2
2023-06-22 23:39:52.539 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-06-22 23:39:52.539 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
2023-06-22 23:39:52.540 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 23:39:53.755 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1215 msec}
2023-06-22 23:39:53.756 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-06-22 23:39:53.757 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. SELECT 	WORK_DATE ,	count(WORK_DATE) AS tot_cnt ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-04' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-06-22 23:40:01.443 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2296245f
2023-06-22 23:40:01.443 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-06-22 23:40:01.443 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
2023-06-22 23:40:01.445 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
73. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-06-22 23:40:01.502 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
 {executed in 56 msec}
2023-06-22 23:40:01.559 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
73. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,a.BMS_KM ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = 'ê°ê·¼ì' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-04-01' ORDER BY a.START_TIME
 {executed in 56 msec}
