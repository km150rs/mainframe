2023-07-06 02:55:50.233 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=3h28s871ms392µs).
2023-07-06 08:42:23.243 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-06 08:42:23.244 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  true
2023-07-06 08:42:23.244 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList -> userId p00139 
2023-07-06 08:42:23.244 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-06 08:42:23.244 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  true
2023-07-06 08:42:23.255 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList -> userId p00139 
2023-07-06 08:42:30.986 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=5h46m48s131ms947µs200ns).
2023-07-06 08:56:29.351 INFO  [http-nio-10010-exec-6] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-06 08:56:29.351 INFO  [http-nio-10010-exec-6] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-06 08:56:29.352 INFO  [http-nio-10010-exec-6] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-06 08:56:29.352 INFO  [http-nio-10010-exec-6] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-06 08:56:29.352 INFO  [http-nio-10010-exec-6] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-06 08:56:30.756 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 08:56:30.757 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-06 08:56:30.760 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-06 08:56:30.868 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$TvSxUGXA.NV/GRHHA7YoROvels7Wk.CP6XmThAio3xzPvuzcdgkSK
2023-07-06 08:56:30.968 INFO  [http-nio-10010-exec-4] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-06 08:56:36.189 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 08:56:36.190 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-06 08:56:40.051 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9132056f
2023-07-06 08:56:40.051 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-07-06 08:56:40.051 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-04' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-04' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-07-06 08:56:40.052 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 08:56:40.057 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-04' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-04' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 5 msec}
2023-07-06 08:56:40.059 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-04' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-04' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 0 msec}
2023-07-06 08:56:40.085 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@32c5b563
2023-07-06 08:56:40.085 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-07-06 08:56:40.085 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-04' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-04' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
2023-07-06 08:56:40.090 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-04' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-04' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 4 msec}
2023-07-06 08:56:40.102 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-04' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-04' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 11 msec}
2023-07-06 08:57:14.014 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@afaa974b
2023-07-06 08:57:14.014 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_DANGER_DRIVING_INFO} 
2023-07-06 08:57:14.014 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBL_DANGER_DRIVING_INFO a where   a.company_no = '100' AND     a.BASE_YM   = '2023-04' order by a.emp_nm
2023-07-06 08:57:14.015 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 08:57:14.016 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBL_DANGER_DRIVING_INFO a where   a.company_no = '100' AND     a.BASE_YM   = '2023-04' order by a.emp_nm
 {executed in 1 msec}
2023-07-06 08:57:14.017 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBL_DANGER_DRIVING_INFO a where   a.company_no = '100' AND     a.BASE_YM   = '2023-04' order by a.emp_nm
 {executed in 1 msec}
2023-07-06 08:57:51.041 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f728ab2a
2023-07-06 08:57:51.041 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_DANGER_DRIVING_INFO} 
2023-07-06 08:57:51.041 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBL_DANGER_DRIVING_INFO a where   a.company_no = '100' AND     a.BASE_YM   = '2023-05' order by a.emp_nm
2023-07-06 08:57:51.042 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 08:57:51.043 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBL_DANGER_DRIVING_INFO a where   a.company_no = '100' AND     a.BASE_YM   = '2023-05' order by a.emp_nm
 {executed in 1 msec}
2023-07-06 08:57:51.044 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBL_DANGER_DRIVING_INFO a where   a.company_no = '100' AND     a.BASE_YM   = '2023-05' order by a.emp_nm
 {executed in 1 msec}
2023-07-06 08:57:54.745 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@682c836c
2023-07-06 08:57:54.745 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_DANGER_DRIVING_INFO} 
2023-07-06 08:57:54.745 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBL_DANGER_DRIVING_INFO a where   a.company_no = '100' AND     a.BASE_YM   = '2023-03' order by a.emp_nm
2023-07-06 08:57:54.746 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 08:57:54.749 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBL_DANGER_DRIVING_INFO a where   a.company_no = '100' AND     a.BASE_YM   = '2023-03' order by a.emp_nm
 {executed in 3 msec}
2023-07-06 08:57:54.751 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. select   ROWNUM AS no,a.* from    TBL_DANGER_DRIVING_INFO a where   a.company_no = '100' AND     a.BASE_YM   = '2023-03' order by a.emp_nm
 {executed in 2 msec}
2023-07-06 08:59:01.549 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 08:59:01.554 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-06 08:59:01.555 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-06 08:59:01.651 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$K59jH0QKTXSm.mDu/NFzCuZkHnq3qmvX3ohSDGCYoyfte/1XcZRxm
2023-07-06 08:59:01.753 INFO  [http-nio-10010-exec-2] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-06 08:59:03.287 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 08:59:03.288 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 08:59:06.508 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c58051c4
2023-07-06 08:59:06.508 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-07-06 08:59:06.508 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-03' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-03' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-07-06 08:59:06.509 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 08:59:06.545 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-03' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-03' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 36 msec}
2023-07-06 08:59:06.547 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-03' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-03' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-07-06 08:59:06.593 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@671401b8
2023-07-06 08:59:06.593 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-07-06 08:59:06.593 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-03' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-03' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
2023-07-06 08:59:06.605 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-03' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-03' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 11 msec}
2023-07-06 08:59:06.616 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-03' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-03' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 11 msec}
2023-07-06 08:59:06.815 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@109f56c8
2023-07-06 08:59:06.815 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-06 08:59:06.815 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-03' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-07-06 08:59:06.816 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-03' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 08:59:06.817 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-03' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 08:59:46.681 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 08:59:46.682 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-06 08:59:50.014 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2e1cea6e
2023-07-06 08:59:50.014 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-07-06 08:59:50.015 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-07-06 08:59:50.016 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 08:59:50.137 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 120 msec}
2023-07-06 08:59:50.138 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-07-06 08:59:50.182 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cfb09a62
2023-07-06 08:59:50.183 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-07-06 08:59:50.183 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
2023-07-06 08:59:50.219 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 36 msec}
2023-07-06 08:59:50.256 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 36 msec}
2023-07-06 08:59:50.474 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@793bef72
2023-07-06 08:59:50.475 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-06 08:59:50.475 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-07-06 08:59:50.476 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-07-06 08:59:50.476 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-07-06 09:00:09.662 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cb303dd
2023-07-06 09:00:09.663 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-07-06 09:00:09.663 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-07-06 09:00:09.664 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:00:09.816 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 152 msec}
2023-07-06 09:00:09.818 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 0 msec}
2023-07-06 09:00:09.865 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ae46b3d1
2023-07-06 09:00:09.865 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-07-06 09:00:09.865 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
2023-07-06 09:00:09.881 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 16 msec}
2023-07-06 09:00:09.891 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 10 msec}
2023-07-06 09:00:09.987 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6c201d32
2023-07-06 09:00:09.987 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-06 09:00:09.987 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-07-06 09:00:09.989 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 09:00:09.990 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 09:00:11.185 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b5f5149c
2023-07-06 09:00:11.185 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-07-06 09:00:11.185 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-07-06 09:00:11.186 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:00:11.314 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 127 msec}
2023-07-06 09:00:11.315 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-07-06 09:00:11.354 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5788c490
2023-07-06 09:00:11.354 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-07-06 09:00:11.354 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
2023-07-06 09:00:11.366 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 11 msec}
2023-07-06 09:00:11.374 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2023-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 8 msec}
2023-07-06 09:00:11.449 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6c201d32
2023-07-06 09:00:11.449 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-06 09:00:11.449 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-07-06 09:00:11.451 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-07-06 09:00:11.452 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2023-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-07-06 09:00:27.386 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9999ec27
2023-07-06 09:00:27.386 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-07-06 09:00:27.387 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-07-06 09:00:27.388 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:00:28.103 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 715 msec}
2023-07-06 09:00:28.104 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:00:28.106 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 2 msec}
2023-07-06 09:00:28.174 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3b2d9c1b
2023-07-06 09:00:28.174 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-07-06 09:00:28.174 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
2023-07-06 09:00:28.230 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 56 msec}
2023-07-06 09:00:28.275 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 45 msec}
2023-07-06 09:00:28.431 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4fc4f4bd
2023-07-06 09:00:28.431 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-06 09:00:28.431 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-07-06 09:00:28.434 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-07-06 09:00:28.435 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
51. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 09:00:45.292 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:00:45.293 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-06 09:00:45.294 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-06 09:00:45.394 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$sSDyJKzOmtKJvdXeizJf2eUs1IXBERWvYYvpf3cnkQlHT.M33D1/a
2023-07-06 09:00:45.490 INFO  [http-nio-10010-exec-4] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-06 09:01:41.536 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:01:41.537 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
51. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-06 09:01:41.538 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-06 09:01:41.632 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$pLBmTB46utRvTAzQabWBb.w45Y7IJZnUGbJyIvZnqtHwY7v9IKbqu
2023-07-06 09:01:41.722 INFO  [http-nio-10010-exec-5] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-06 09:01:53.363 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@174fb62c
2023-07-06 09:01:53.364 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:01:53.368 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 2 msec}
2023-07-06 09:01:59.218 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6c671ff0
2023-07-06 09:01:59.219 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:01:59.222 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 09:01:59.259 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@732fe614
2023-07-06 09:01:59.261 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:02:01.723 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dc2c6fd6
2023-07-06 09:02:01.724 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:02:01.726 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 09:02:01.761 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dc2da0fa
2023-07-06 09:02:01.763 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:02:05.840 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b76cde2b
2023-07-06 09:02:05.841 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:02:05.844 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 2 msec}
2023-07-06 09:02:06.049 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9ec14cc2
2023-07-06 09:02:06.051 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:02:13.579 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dc2da0fa
2023-07-06 09:02:13.581 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:02:13.585 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-07-06 09:02:17.281 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@23abb4d9
2023-07-06 09:02:17.283 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
51. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:02:17.285 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
51. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-07-06 09:02:19.402 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b29c8b8
2023-07-06 09:02:19.404 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
53. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:02:19.406 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
53. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:02:21.450 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b29c8b8
2023-07-06 09:02:21.450 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
53. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:02:21.451 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
53. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 09:02:22.569 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b289794
2023-07-06 09:02:22.570 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
53. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:02:22.571 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
53. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-06' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 09:02:22.604 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b29c8b8
2023-07-06 09:02:22.606 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
53. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 09:02:24.429 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dd7187c5
2023-07-06 09:02:24.430 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
54. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:02:24.432 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
54. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 09:02:24.558 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@35c9ce9e
2023-07-06 09:02:24.560 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
54. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:02:26.579 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@806395a
2023-07-06 09:02:26.580 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
54. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:02:26.582 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
54. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-02' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 09:02:26.662 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@585862d7
2023-07-06 09:02:26.664 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
54. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-02','',a.base_ymd,  '2023-06-02')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:02:26.696 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ea2acef5
2023-07-06 09:02:26.700 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
54. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:02:27.905 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5c728e02
2023-07-06 09:02:27.906 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
54. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:02:27.907 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
54. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 09:02:28.042 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@35c9ce9e
2023-07-06 09:02:28.044 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
54. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:02:28.075 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ea2acef5
2023-07-06 09:02:28.077 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
54. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-07-06 09:02:32.102 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5c728e02
2023-07-06 09:02:32.103 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:02:32.104 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 09:02:32.218 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@35c9ce9e
2023-07-06 09:02:32.220 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:02:35.946 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@806395a
2023-07-06 09:02:35.947 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:02:35.948 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-02' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 09:02:36.029 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@585862d7
2023-07-06 09:02:36.031 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-02','',a.base_ymd,  '2023-06-02')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:02:38.214 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@806395a
2023-07-06 09:02:38.215 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:02:38.216 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-02' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 09:02:38.285 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@585862d7
2023-07-06 09:02:38.286 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-02','',a.base_ymd,  '2023-06-02')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:02:38.315 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ea2acef5
2023-07-06 09:02:38.317 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:02:57.237 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5c728e02
2023-07-06 09:02:57.238 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:02:57.240 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 09:02:57.372 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@35c9ce9e
2023-07-06 09:02:57.373 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:03:15.654 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@806395a
2023-07-06 09:03:15.655 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:03:15.657 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-02' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 09:03:15.771 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@585862d7
2023-07-06 09:03:15.772 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-02','',a.base_ymd,  '2023-06-02')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:03:21.176 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e577a521
2023-07-06 09:03:21.177 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:03:21.179 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 09:03:21.287 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@35c9ce9e
2023-07-06 09:03:21.288 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 09:03:24.853 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e577a521
2023-07-06 09:03:24.854 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:03:24.856 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 09:03:24.957 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@35c9ce9e
2023-07-06 09:03:24.959 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:03:24.985 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ea2acef5
2023-07-06 09:03:24.987 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:03:29.825 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7f01223b
2023-07-06 09:03:29.826 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:03:29.827 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-02' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 09:03:29.910 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@585862d7
2023-07-06 09:03:29.911 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-02','',a.base_ymd,  '2023-06-02')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:03:29.940 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ea2acef5
2023-07-06 09:03:29.943 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-07-06 09:03:45.598 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5c728e02
2023-07-06 09:03:45.599 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:03:45.600 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 09:03:45.741 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@35c9ce9e
2023-07-06 09:03:45.742 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:03:45.773 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ea2acef5
2023-07-06 09:03:45.775 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-07-06 09:04:05.357 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5c728e02
2023-07-06 09:04:05.359 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:04:05.360 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-06-01' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 09:04:05.510 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@35c9ce9e
2023-07-06 09:04:05.511 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-06-01','',a.base_ymd,  '2023-06-01')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:04:44.271 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8334da57
2023-07-06 09:04:44.272 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:04:44.274 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-07-06' AND '2023-07-06' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-07-06' AND '2023-07-06' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-07-06 09:04:49.921 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d84c441b
2023-07-06 09:04:49.922 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:04:49.923 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-07-06' AND '2023-07-06' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-07-06 09:04:49.945 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@df150a3f
2023-07-06 09:04:49.947 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-07-06' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:04:51.522 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@df150a3f
2023-07-06 09:04:51.523 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:04:51.524 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-07-06' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 09:04:53.477 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a3a198fa
2023-07-06 09:04:53.478 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:04:53.480 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-07-06' AND '2023-07-06' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-07-06' AND '2023-07-06' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-07-06 09:05:30.134 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7072c5b9
2023-07-06 09:05:30.135 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:05:30.137 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-05-01' AND '2023-07-06' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-05-01' AND '2023-07-06' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 09:06:31.839 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ff0623e5
2023-07-06 09:06:31.840 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:06:31.842 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 09:06:33.936 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e3b32113
2023-07-06 09:06:33.937 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:06:33.938 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 09:06:33.964 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2f69b5ab
2023-07-06 09:06:33.966 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:06:35.264 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@98663f6d
2023-07-06 09:06:35.265 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:06:35.266 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'5번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 09:06:35.290 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@98677091
2023-07-06 09:06:35.292 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:06:36.730 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73a6adc2
2023-07-06 09:06:36.731 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:06:36.732 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 09:06:36.784 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5afb1c59
2023-07-06 09:06:36.786 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 09:06:36.830 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a6649e8c
2023-07-06 09:06:36.832 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:06:44.548 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@81a3dbbd
2023-07-06 09:06:44.550 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:06:44.551 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 09:06:44.600 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5afb1c59
2023-07-06 09:06:44.601 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:06:52.984 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aa8f2dc
2023-07-06 09:06:52.986 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:06:52.987 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 09:06:53.047 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5afb1c59
2023-07-06 09:06:53.048 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 09:06:53.102 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a6649e8c
2023-07-06 09:06:53.104 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:07:04.093 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@81a3dbbd
2023-07-06 09:07:04.094 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:07:04.095 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 09:07:04.157 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5afb1c59
2023-07-06 09:07:04.158 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:07:17.007 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@98677091
2023-07-06 09:07:17.008 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:07:17.009 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:07:20.099 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@98677091
2023-07-06 09:07:20.100 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:07:20.102 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 09:07:31.610 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@98677091
2023-07-06 09:07:31.612 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:07:31.613 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:08:43.862 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@98677091
2023-07-06 09:08:43.864 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:08:43.865 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:08:53.829 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@98677091
2023-07-06 09:08:53.831 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:08:53.832 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:08:58.997 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@98677091
2023-07-06 09:08:58.998 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:08:58.999 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:09:01.286 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@98677091
2023-07-06 09:09:01.288 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:09:01.289 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:09:04.505 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73a6adc2
2023-07-06 09:09:04.506 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:09:04.507 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 09:09:04.572 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5afb1c59
2023-07-06 09:09:04.573 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:09:09.554 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@aa8f2dc
2023-07-06 09:09:09.555 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:09:09.556 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 09:09:09.619 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5afb1c59
2023-07-06 09:09:09.620 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:09:09.672 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a6649e8c
2023-07-06 09:09:09.674 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 09:12:54.678 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@81a3dbbd
2023-07-06 09:12:54.679 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:12:54.681 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 09:12:54.737 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5afb1c59
2023-07-06 09:12:54.738 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:12:54.783 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a6649e8c
2023-07-06 09:12:54.785 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:19:06.246 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@174fb62c
2023-07-06 09:19:06.247 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:19:06.249 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 09:19:07.940 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@61574071
2023-07-06 09:19:07.941 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:19:07.943 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-07-06 09:19:07.971 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@68200695
2023-07-06 09:19:07.972 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:19:08.965 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d11c9057
2023-07-06 09:19:08.966 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:19:08.968 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'5번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-07-06 09:19:08.998 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d11dc17b
2023-07-06 09:19:09.000 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 09:19:10.101 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ac5cfeac
2023-07-06 09:19:10.103 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:19:10.104 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 09:19:10.170 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@93b16d43
2023-07-06 09:19:10.171 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 09:19:15.861 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@435f43c6
2023-07-06 09:19:15.862 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:19:15.863 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 09:19:15.927 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@93b16d43
2023-07-06 09:19:15.928 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:19:15.987 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@df1aef76
2023-07-06 09:19:15.989 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 09:21:41.483 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d11dc17b
2023-07-06 09:21:41.484 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:21:41.485 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:21:48.748 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d11dc17b
2023-07-06 09:21:48.750 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
61. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:21:48.751 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
61. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:21:58.959 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ac5cfeac
2023-07-06 09:21:58.961 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
63. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:21:58.962 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
63. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 09:21:59.025 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@93b16d43
2023-07-06 09:21:59.026 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
63. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 09:21:59.087 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@df1aef76
2023-07-06 09:21:59.088 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
63. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 09:22:13.700 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ba5a2ca7
2023-07-06 09:22:13.701 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
68. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:22:13.703 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
68. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 09:22:13.757 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@93b16d43
2023-07-06 09:22:13.759 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
68. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:22:13.809 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@df1aef76
2023-07-06 09:22:13.811 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
68. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:23:17.644 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d11dc17b
2023-07-06 09:23:17.645 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:23:17.647 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:23:39.648 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d11dc17b
2023-07-06 09:23:39.650 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:23:39.651 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:23:47.509 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d11dc17b
2023-07-06 09:23:47.510 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:23:47.511 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 09:24:01.845 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ac5cfeac
2023-07-06 09:24:01.846 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:24:01.848 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 09:24:01.903 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@93b16d43
2023-07-06 09:24:01.904 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:24:20.020 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@435f43c6
2023-07-06 09:24:20.021 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:24:20.023 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 09:24:20.087 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@93b16d43
2023-07-06 09:24:20.088 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 09:24:20.136 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@df1aef76
2023-07-06 09:24:20.138 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:25:44.292 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@174fb62c
2023-07-06 09:25:44.293 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:25:44.295 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 2 msec}
2023-07-06 09:25:45.957 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@61574071
2023-07-06 09:25:45.958 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:25:45.960 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-07-06 09:25:45.993 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@68200695
2023-07-06 09:25:45.994 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:25:47.043 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d11c9057
2023-07-06 09:25:47.044 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:25:47.045 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'5번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 09:25:47.070 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d11dc17b
2023-07-06 09:25:47.072 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:25:48.199 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ac5cfeac
2023-07-06 09:25:48.200 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:25:48.201 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 09:25:48.255 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@93b16d43
2023-07-06 09:25:48.256 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 09:25:50.623 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@435f43c6
2023-07-06 09:25:50.624 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:25:50.625 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 09:25:50.702 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@93b16d43
2023-07-06 09:25:50.704 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:25:50.765 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@df1aef76
2023-07-06 09:25:50.766 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:26:05.491 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ba5a2ca7
2023-07-06 09:26:05.492 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:26:05.493 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 09:26:05.547 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@93b16d43
2023-07-06 09:26:05.549 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:26:05.593 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@df1aef76
2023-07-06 09:26:05.594 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:28:11.814 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@33aadea1
2023-07-06 09:28:11.815 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:28:11.817 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 09:28:13.299 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7db268e6
2023-07-06 09:28:13.300 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:28:13.302 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-07-06 09:28:13.329 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@847b2f0a
2023-07-06 09:28:13.331 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 09:28:14.995 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ed78e9f0
2023-07-06 09:28:14.996 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:28:14.997 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 09:28:16.448 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ed77b8cc
2023-07-06 09:28:16.450 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:28:16.451 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'5번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 09:28:16.479 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ed78e9f0
2023-07-06 09:28:16.480 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:28:20.985 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c8b82721
2023-07-06 09:28:20.986 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:28:20.988 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 09:28:21.043 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b00c95b8
2023-07-06 09:28:21.044 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:28:21.098 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fb7617eb
2023-07-06 09:28:21.099 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:29:20.884 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d6b5551c
2023-07-06 09:29:20.885 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:29:20.887 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 09:29:20.946 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b00c95b8
2023-07-06 09:29:20.947 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:29:20.993 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fb7617eb
2023-07-06 09:29:20.995 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:30:57.099 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@33aadea1
2023-07-06 09:30:57.100 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:30:57.103 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 09:30:58.713 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7db268e6
2023-07-06 09:30:58.714 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:30:58.716 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-07-06 09:30:58.745 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@847b2f0a
2023-07-06 09:30:58.747 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:30:59.791 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ed78e9f0
2023-07-06 09:30:59.792 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:30:59.793 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 09:31:00.697 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ed77b8cc
2023-07-06 09:31:00.699 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:31:00.701 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'5번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 09:31:00.727 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ed78e9f0
2023-07-06 09:31:00.728 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:31:01.828 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c8b82721
2023-07-06 09:31:01.829 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:31:01.830 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 09:31:01.890 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b00c95b8
2023-07-06 09:31:01.891 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:31:06.717 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5fba6c3b
2023-07-06 09:31:06.718 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:31:06.719 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 09:31:06.790 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b00c95b8
2023-07-06 09:31:06.791 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 09:31:13.484 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ed78e9f0
2023-07-06 09:31:13.486 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:31:13.487 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:31:15.036 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c8b82721
2023-07-06 09:31:15.037 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:31:15.039 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 09:31:15.096 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b00c95b8
2023-07-06 09:31:15.097 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:31:16.290 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ed78e9f0
2023-07-06 09:31:16.292 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:31:16.294 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:31:18.660 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@847b2f0a
2023-07-06 09:31:18.661 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:31:18.662 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:31:21.120 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ed78e9f0
2023-07-06 09:31:21.121 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:31:21.123 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 09:31:21.813 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c8b82721
2023-07-06 09:31:21.814 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:31:21.815 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 09:31:21.889 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b00c95b8
2023-07-06 09:31:21.891 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:31:25.418 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@847b2f0a
2023-07-06 09:31:25.419 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:31:25.420 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 09:32:57.505 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@33aadea1
2023-07-06 09:32:57.506 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:32:57.507 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 0 msec}
2023-07-06 09:33:00.040 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f8b0e89
2023-07-06 09:33:00.041 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 09:33:00.043 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
71. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-07-06 09:33:29.611 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b1a9bd8c
2023-07-06 09:33:29.611 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ISC_DRIVER_INFO} 
2023-07-06 09:33:29.612 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBL_ISC_DRIVER_INFO a where   a.company_no = '100' order by a.emp_nm
2023-07-06 09:33:29.612 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
71. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 09:33:29.615 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBL_ISC_DRIVER_INFO a where   a.company_no = '100' order by a.emp_nm
 {executed in 2 msec}
2023-07-06 09:33:29.617 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
71. select   ROWNUM AS no,a.* from    TBL_ISC_DRIVER_INFO a where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-07-06 10:20:41.937 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@441eaddc
2023-07-06 10:20:41.938 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-07-06 10:20:41.938 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-11' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-11' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-07-06 10:20:41.939 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
91. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 10:20:42.090 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-11' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-11' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 150 msec}
2023-07-06 10:20:42.092 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-11' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-11' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-07-06 10:20:42.132 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e5b25dd0
2023-07-06 10:20:42.132 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-07-06 10:20:42.132 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-11' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-11' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
2023-07-06 10:20:42.153 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-11' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-11' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 20 msec}
2023-07-06 10:20:42.168 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-11' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-11' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 15 msec}
2023-07-06 10:20:42.278 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fa49b672
2023-07-06 10:20:42.278 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-06 10:20:42.278 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-11' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-07-06 10:20:42.280 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-11' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 10:20:42.280 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
91. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-11' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-07-06 11:11:29.666 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-06 11:11:29.666 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  true
2023-07-06 11:11:29.666 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList -> userId p00139 
2023-07-06 11:11:29.666 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-06 11:11:29.666 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  true
2023-07-06 11:11:29.666 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList -> userId p00139 
2023-07-06 11:59:16.516 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=9m42s982ms294µs800ns).
2023-07-06 12:09:19.189 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-06 12:09:19.190 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-06 12:09:19.190 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-06 12:09:19.190 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-06 12:09:19.190 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-06 12:09:20.754 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
151. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 12:09:20.755 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
151. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-06 12:09:20.758 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-06 12:09:20.851 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$lvDzpEG/NT9kCQEwxzQUEeFy.juVR6LOvQkZe8Lxc8JK3N37FvkAW
2023-07-06 12:09:20.944 INFO  [http-nio-10010-exec-4] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-06 12:09:26.578 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fe8bee61
2023-07-06 12:09:26.578 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-07-06 12:09:26.579 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-07-06 12:09:26.579 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
151. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 12:09:26.587 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
151. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 8 msec}
2023-07-06 12:09:26.595 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
151. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 7 msec}
2023-07-06 12:10:13.881 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b1a9bd8c
2023-07-06 12:10:13.881 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ISC_DRIVER_INFO} 
2023-07-06 12:10:13.881 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBL_ISC_DRIVER_INFO a where   a.company_no = '100' order by a.emp_nm
2023-07-06 12:10:13.882 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
151. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 12:10:13.884 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
151. select   ROWNUM AS no,a.* from    TBL_ISC_DRIVER_INFO a where   a.company_no = '100' order by a.emp_nm
 {executed in 2 msec}
2023-07-06 12:10:13.885 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
151. select   ROWNUM AS no,a.* from    TBL_ISC_DRIVER_INFO a where   a.company_no = '100' order by a.emp_nm
 {executed in 1 msec}
2023-07-06 12:44:01.391 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 2376 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-06 12:44:01.396 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-06 12:44:01.455 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-06 12:44:01.455 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-06 12:44:02.721 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 12:44:02.721 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-06 12:44:02.867 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 136ms. Found 3 JPA repository interfaces.
2023-07-06 12:44:03.228 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 12:44:03.229 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-06 12:44:03.278 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 12:44:03.279 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 12:44:03.280 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 12:44:03.280 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 51ms. Found 0 JDBC repository interfaces.
2023-07-06 12:44:03.717 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-06 12:44:03.784 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-06 12:44:03.785 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 12:44:03.785 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 12:44:03.785 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 12:44:03.785 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 12:44:03.786 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-06 12:44:03.786 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-06 12:44:03.786 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 12:44:03.786 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 12:44:03.786 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 12:44:03.786 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 12:44:03.787 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 12:44:03.850 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$7cf95e75] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 12:44:03.900 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-06 12:44:03.992 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$66efc2a2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 12:44:04.074 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 12:44:04.076 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@6610221' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 12:44:04.081 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$8bc46554] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 12:44:04.091 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$b1197d6a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 12:44:04.095 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 12:44:04.097 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 12:44:04.125 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$ce41fa68] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 12:44:04.159 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$4dc2479a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 12:44:04.287 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-06 12:44:04.292 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-06 12:44:04.755 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-06 12:44:04.774 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-06 12:44:04.786 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-06 12:44:04.787 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-06 12:44:05.189 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-06 12:44:05.203 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-06 12:44:05.204 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3748 ms
2023-07-06 12:44:06.097 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@4eb55c55 with name: jasyptStringEncryptor
2023-07-06 12:44:06.149 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-06 12:44:06.272 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 10 msec}
2023-07-06 12:44:06.278 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-06 12:44:07.123 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-06 12:44:07.514 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-06 12:44:07.594 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-06 12:44:07.596 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-06 12:44:07.762 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-06 12:44:08.024 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 12:44:08.042 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-06 12:44:08.795 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 12:44:08.797 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-06 12:44:08.853 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-06 12:44:09.115 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-06 12:44:10.229 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-06 12:44:10.242 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-06 12:44:10.428 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-06 12:44:10.428 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-06 12:44:10.428 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-06 12:44:10.428 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-06 12:44:10.429 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-06 12:44:10.429 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-06 12:44:10.429 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-06 12:44:10.429 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-06 12:44:10.429 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-06 12:44:10.599 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@71fb8353, org.springframework.security.web.context.SecurityContextPersistenceFilter@76bb1d6d, org.springframework.security.web.header.HeaderWriterFilter@7f744d7, org.springframework.web.filter.CorsFilter@3c50d02b, org.springframework.security.web.authentication.logout.LogoutFilter@752491af, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@1774768e, org.springframework.security.web.session.ConcurrentSessionFilter@24ac25ec, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@6fd8bb96, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@54839dc5, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@f82d803, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2df29a6d, org.springframework.security.web.session.SessionManagementFilter@32bba5db, org.springframework.security.web.access.ExceptionTranslationFilter@4e44daff, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@76b627cc]
2023-07-06 12:44:10.622 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-06 12:44:10.976 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-06 12:44:11.049 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-06 12:44:11.485 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 12:44:12.332 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-06 12:44:12.364 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-06 12:44:12.515 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-06 12:44:12.522 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-06 12:44:12.581 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-06 12:44:12.586 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.692 seconds (JVM running for 13.235)
2023-07-06 12:44:12.587 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 12:44:12.587 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-06 12:44:12.587 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 12:44:13.645 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-06 12:44:13.646 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-06 12:44:13.666 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 20 ms
2023-07-06 12:44:31.288 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-06 12:44:31.288 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-06 12:44:31.289 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-07-06 12:44:31.289 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-06 12:44:31.289 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-07-06 12:44:32.028 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$882d2dce.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 12:44:32.035 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$882d2dce.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 12:44:32.044 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-06 12:44:32.045 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-06 12:44:32.045 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-06 12:44:32.045 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-06 12:44:32.045 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-06 12:44:32.193 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$882d2dce.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 12:44:32.194 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$882d2dce.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 12:44:32.195 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$882d2dce.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 98 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 101 common frames omitted
2023-07-06 12:44:32.632 WARN  [http-nio-10010-exec-2] [o.a.catalina.util.SessionIdGeneratorBase] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [167] milliseconds.
2023-07-06 12:44:32.720 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-06 12:44:32.720 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-06 12:44:32.720 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-06 12:44:32.720 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-06 12:44:32.720 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-06 12:44:34.686 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 12:44:34.694 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-06 12:44:34.715 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-06 12:44:34.807 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$59shXb31U0.zzlA4HnrNQe6yZSW4nO9wIQZ4RpiZ4s0klHX1sIWn.
2023-07-06 12:44:34.897 INFO  [http-nio-10010-exec-4] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-06 12:48:22.512 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 22300 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-06 12:48:22.518 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-06 12:48:22.574 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-06 12:48:22.574 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-06 12:48:23.791 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 12:48:23.791 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-06 12:48:23.942 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 140ms. Found 3 JPA repository interfaces.
2023-07-06 12:48:24.292 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 12:48:24.292 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-06 12:48:24.339 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 12:48:24.339 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 12:48:24.340 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 12:48:24.340 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 47ms. Found 0 JDBC repository interfaces.
2023-07-06 12:48:24.785 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-06 12:48:24.858 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-06 12:48:24.858 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 12:48:24.859 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 12:48:24.859 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 12:48:24.859 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 12:48:24.860 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-06 12:48:24.860 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-06 12:48:24.860 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 12:48:24.860 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 12:48:24.860 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 12:48:24.861 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 12:48:24.861 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 12:48:24.923 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$a57d35ce] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 12:48:24.974 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-06 12:48:25.065 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$8f7399fb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 12:48:25.149 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 12:48:25.151 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@7c69ec14' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 12:48:25.156 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$b4483cad] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 12:48:25.166 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$d99d54c3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 12:48:25.170 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 12:48:25.171 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 12:48:25.191 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$f6c5d1c1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 12:48:25.221 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$76461ef3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 12:48:25.362 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-06 12:48:25.367 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-06 12:48:25.803 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-06 12:48:25.821 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-06 12:48:25.832 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-06 12:48:25.832 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-06 12:48:26.230 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-06 12:48:26.242 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-06 12:48:26.243 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3669 ms
2023-07-06 12:48:27.100 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@4be9657d with name: jasyptStringEncryptor
2023-07-06 12:48:27.148 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-06 12:48:27.235 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 6 msec}
2023-07-06 12:48:27.240 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-06 12:48:28.036 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-06 12:48:28.395 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-06 12:48:28.469 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-06 12:48:28.471 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-06 12:48:28.627 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-06 12:48:28.896 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 12:48:28.919 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-06 12:48:29.628 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-06 12:48:29.630 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-06 12:48:29.679 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-06 12:48:29.931 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-06 12:48:31.026 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-06 12:48:31.037 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-06 12:48:31.214 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-06 12:48:31.215 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-06 12:48:31.215 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-06 12:48:31.215 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-06 12:48:31.215 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-06 12:48:31.215 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-06 12:48:31.215 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-06 12:48:31.215 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-06 12:48:31.216 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-06 12:48:31.373 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@14a5dd8d, org.springframework.security.web.context.SecurityContextPersistenceFilter@78e23e2c, org.springframework.security.web.header.HeaderWriterFilter@28748f15, org.springframework.web.filter.CorsFilter@509dde48, org.springframework.security.web.authentication.logout.LogoutFilter@6190d7f7, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@4f808e4b, org.springframework.security.web.session.ConcurrentSessionFilter@41eed920, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@7166409a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@354354c5, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3339eb4f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@57eea5a6, org.springframework.security.web.session.SessionManagementFilter@dbfc2a9, org.springframework.security.web.access.ExceptionTranslationFilter@30004612, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6e9304e0]
2023-07-06 12:48:31.397 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-06 12:48:31.753 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-06 12:48:31.833 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-06 12:48:32.267 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 12:48:33.081 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-06 12:48:33.112 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-06 12:48:33.251 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-06 12:48:33.258 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-06 12:48:33.320 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-06 12:48:33.325 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.284 seconds (JVM running for 12.714)
2023-07-06 12:48:33.325 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 12:48:33.325 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-06 12:48:33.326 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 12:48:34.207 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-06 12:48:34.208 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-06 12:48:34.232 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 24 ms
2023-07-06 12:48:56.894 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-06 12:48:56.895 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-06 12:48:56.895 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-07-06 12:48:56.895 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-06 12:48:56.895 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-07-06 12:48:57.604 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$18288392.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 12:48:57.612 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$18288392.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 12:48:57.621 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-06 12:48:57.621 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-06 12:48:57.621 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-06 12:48:57.621 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-06 12:48:57.621 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-06 12:48:57.766 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$18288392.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 12:48:57.768 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$18288392.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 12:48:57.774 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$18288392.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 98 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 101 common frames omitted
2023-07-06 12:48:58.134 WARN  [http-nio-10010-exec-2] [o.a.catalina.util.SessionIdGeneratorBase] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [163] milliseconds.
2023-07-06 12:48:58.215 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-06 12:48:58.215 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-06 12:48:58.215 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-06 12:48:58.215 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-06 12:48:58.215 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-06 12:48:59.737 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 12:48:59.744 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-06 12:48:59.764 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-06 12:48:59.855 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$a7rvjYjDucuYE8UwvFtB3esaBKwAN35KyDswkmEvFo5Rq/AxLIBki
2023-07-06 12:48:59.947 INFO  [http-nio-10010-exec-2] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-06 12:51:00.785 ERROR [http-nio-10010-exec-1] [c.p.d.core.error.GlobalExceptionHandler] - handleEntityNotFoundException
java.lang.StringIndexOutOfBoundsException: begin 6, end 8, length 6
	at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4602)
	at java.base/java.lang.String.substring(String.java:2705)
	at com.pjy.dashboard.util.DateUtil.getCalendar(DateUtil.java:120)
	at com.pjy.dashboard.util.DateUtil.afterMonthDay(DateUtil.java:47)
	at com.pjy.dashboard.domain.CommonCodeVo.init(CommonCodeVo.java:86)
	at com.pjy.dashboard.controller.TestController.DynamicSqlFilterMybatis(TestController.java:181)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor151.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$18288392.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 12:51:00.799 WARN  [http-nio-10010-exec-1] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [java.lang.StringIndexOutOfBoundsException: begin 6, end 8, length 6]
2023-07-06 12:52:54.822 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d7546402
2023-07-06 12:52:54.867 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-06 12:52:54.910 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(*) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality : 배차정시성 upload 현황 */
		a.ROUTE_NM ,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS month_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS cnt_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 40 msec}
2023-07-06 12:54:59.696 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d7546402
2023-07-06 12:54:59.698 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 12:54:59.742 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(*) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality : 배차정시성 upload 현황 */
		a.ROUTE_NM ,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS month_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS cnt_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 43 msec}
2023-07-06 12:56:43.114 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d7546402
2023-07-06 12:56:43.116 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 12:56:43.158 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(*) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality : 배차정시성 upload 현황 */
		a.ROUTE_NM ,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS month_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS cnt_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 40 msec}
2023-07-06 12:56:55.976 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d7546402
2023-07-06 12:56:55.978 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 12:56:56.023 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(*) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality : 배차정시성 upload 현황 */
		a.ROUTE_NM ,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS month_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS cnt_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 43 msec}
2023-07-06 12:57:49.278 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d7546402
2023-07-06 12:57:49.280 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 12:57:49.329 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(*) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality : 배차정시성 upload 현황 */
		a.ROUTE_NM ,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS month_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS cnt_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 48 msec}
2023-07-06 12:58:06.388 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d7546402
2023-07-06 12:58:06.389 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 12:58:06.427 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(*) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality : 배차정시성 upload 현황 */
		a.ROUTE_NM ,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS month_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS cnt_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 37 msec}
2023-07-06 13:26:45.867 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d7546402
2023-07-06 13:26:45.868 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 13:26:45.908 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(*) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality : 배차정시성 upload 현황 */
		a.ROUTE_NM ,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS month_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS cnt_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 38 msec}
2023-07-06 13:28:30.374 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d7546402
2023-07-06 13:28:30.376 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 13:28:30.416 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(*) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality : 배차정시성 upload 현황 */
		a.ROUTE_NM ,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS month_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS cnt_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 38 msec}
2023-07-06 13:29:05.131 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d7546402
2023-07-06 13:29:05.133 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 13:29:05.175 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
21. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(*) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality : 배차정시성 upload 현황 */
		a.ROUTE_NM ,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS month_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS cnt_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 40 msec}
2023-07-06 13:38:32.428 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8d88161f
2023-07-06 13:38:32.428 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-07-06 13:38:32.497 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-07-06 13:38:32.506 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 13:38:32.516 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 10 msec}
2023-07-06 13:38:32.528 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-06%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230601')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 8 msec}
2023-07-06 13:39:24.751 INFO  [RMI TCP Connection(63)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-06 13:39:24.778 INFO  [RMI TCP Connection(63)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-07-06 13:39:24.782 INFO  [RMI TCP Connection(63)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-07-06 13:39:24.790 INFO  [RMI TCP Connection(63)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-07-06 13:39:24.860 INFO  [RMI TCP Connection(63)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-07-06 13:39:43.446 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 35820 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-06 13:39:43.450 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-06 13:39:43.511 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-06 13:39:43.512 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-06 13:39:44.723 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 13:39:44.723 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-06 13:39:44.879 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 146ms. Found 3 JPA repository interfaces.
2023-07-06 13:39:45.232 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 13:39:45.232 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-06 13:39:45.282 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 13:39:45.284 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 13:39:45.284 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 13:39:45.284 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 52ms. Found 0 JDBC repository interfaces.
2023-07-06 13:39:45.726 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-06 13:39:45.795 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-06 13:39:45.795 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 13:39:45.795 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 13:39:45.795 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 13:39:45.796 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 13:39:45.796 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-06 13:39:45.796 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-06 13:39:45.796 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 13:39:45.796 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 13:39:45.796 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 13:39:45.797 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 13:39:45.797 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 13:39:45.860 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$adf15084] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 13:39:45.917 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-06 13:39:46.003 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$97e7b4b1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 13:39:46.084 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 13:39:46.086 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@68485ff3' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 13:39:46.092 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$bcbc5763] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 13:39:46.102 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$e2116f79] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 13:39:46.105 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 13:39:46.107 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 13:39:46.131 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$ff39ec77] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 13:39:46.158 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$7eba39a9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 13:39:46.304 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-06 13:39:46.310 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-06 13:39:46.746 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-06 13:39:46.763 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-06 13:39:46.774 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-06 13:39:46.774 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-06 13:39:47.171 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-06 13:39:47.187 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-06 13:39:47.188 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3676 ms
2023-07-06 13:39:48.061 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@889d7db with name: jasyptStringEncryptor
2023-07-06 13:39:48.119 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-06 13:39:48.204 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 6 msec}
2023-07-06 13:39:48.209 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-06 13:39:49.022 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-06 13:39:49.392 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-06 13:39:49.467 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-06 13:39:49.469 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-06 13:39:49.636 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-06 13:39:49.876 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 13:39:49.893 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-06 13:39:50.613 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 13:39:50.615 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-06 13:39:50.669 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-06 13:39:50.938 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-06 13:39:52.038 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-06 13:39:52.050 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-06 13:39:52.238 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-06 13:39:52.239 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-06 13:39:52.239 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-06 13:39:52.239 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-06 13:39:52.239 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-06 13:39:52.239 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-06 13:39:52.239 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-06 13:39:52.239 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-06 13:39:52.239 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-06 13:39:52.401 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3bce7c49, org.springframework.security.web.context.SecurityContextPersistenceFilter@4cc6c8d6, org.springframework.security.web.header.HeaderWriterFilter@23a82fb, org.springframework.web.filter.CorsFilter@154cd38c, org.springframework.security.web.authentication.logout.LogoutFilter@51220c5e, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@159b0956, org.springframework.security.web.session.ConcurrentSessionFilter@758d556c, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@2ae5f541, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@234c8abe, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@201831bf, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7d318b31, org.springframework.security.web.session.SessionManagementFilter@47128914, org.springframework.security.web.access.ExceptionTranslationFilter@1b7e786c, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@531ce0ec]
2023-07-06 13:39:52.432 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-06 13:39:52.793 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-06 13:39:52.877 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-06 13:39:53.329 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 13:39:54.152 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-06 13:39:54.182 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-06 13:39:54.320 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-06 13:39:54.326 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-06 13:39:54.378 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-06 13:39:54.383 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.406 seconds (JVM running for 12.841)
2023-07-06 13:39:54.383 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 13:39:54.384 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-06 13:39:54.384 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 13:39:55.145 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-06 13:39:55.145 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-06 13:39:55.167 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 21 ms
2023-07-06 13:40:07.153 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d7546402
2023-07-06 13:40:07.192 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 13:40:07.244 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality : 배차정시성 upload 현황 */
		a.ROUTE_NM ,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS month_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS cnt_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 45 msec}
2023-07-06 13:43:36.443 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d7546402
2023-07-06 13:43:36.445 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 13:43:36.488 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality : 배차정시성 upload 현황 */
		a.ROUTE_NM ,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS month_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS cnt_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 42 msec}
2023-07-06 13:44:00.881 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d7546402
2023-07-06 13:44:00.882 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 13:44:00.924 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality : 배차정시성 upload 현황 */
		a.ROUTE_NM ,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS month_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS cnt_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 40 msec}
2023-07-06 13:45:18.420 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d7546402
2023-07-06 13:45:18.421 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 13:45:18.461 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality : 배차정시성 upload 현황 */
		a.ROUTE_NM ,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS month_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS cnt_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 39 msec}
2023-07-06 13:45:53.189 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d7546402
2023-07-06 13:45:53.191 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 13:45:53.234 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality : 배차정시성 upload 현황 */
		a.ROUTE_NM ,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS month_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS cnt_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 42 msec}
2023-07-06 13:46:27.054 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d7546402
2023-07-06 13:46:27.056 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 13:46:27.096 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality : 배차정시성 upload 현황 */
		a.ROUTE_NM ,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS month_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS cnt_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 39 msec}
2023-07-06 14:23:09.541 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 28668 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-06 14:23:09.546 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-06 14:23:09.599 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-06 14:23:09.599 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-06 14:23:10.832 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 14:23:10.833 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-06 14:23:10.979 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 137ms. Found 3 JPA repository interfaces.
2023-07-06 14:23:11.379 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 14:23:11.379 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-06 14:23:11.424 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 14:23:11.425 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 14:23:11.425 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 14:23:11.426 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 47ms. Found 0 JDBC repository interfaces.
2023-07-06 14:23:11.867 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-06 14:23:11.935 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-06 14:23:11.935 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 14:23:11.936 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 14:23:11.936 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 14:23:11.936 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 14:23:11.936 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-06 14:23:11.936 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-06 14:23:11.936 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 14:23:11.936 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 14:23:11.937 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 14:23:11.937 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 14:23:11.937 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 14:23:11.995 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$4d8739a7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:23:12.047 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-06 14:23:12.136 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$377d9dd4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:23:12.226 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:23:12.229 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@27706d71' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:23:12.234 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$5c524086] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:23:12.245 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$81a7589c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:23:12.249 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:23:12.257 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:23:12.278 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$9ecfd59a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:23:12.309 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$1e5022cc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:23:12.455 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-06 14:23:12.461 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-06 14:23:12.890 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-06 14:23:12.912 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-06 14:23:12.923 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-06 14:23:12.924 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-06 14:23:13.324 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-06 14:23:13.336 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-06 14:23:13.336 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3737 ms
2023-07-06 14:23:14.214 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@55cdba56 with name: jasyptStringEncryptor
2023-07-06 14:23:14.271 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-06 14:23:14.369 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-07-06 14:23:14.374 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-06 14:23:15.154 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-06 14:23:15.527 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-06 14:23:15.601 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-06 14:23:15.603 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-06 14:23:15.763 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-06 14:23:16.028 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:23:16.046 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-06 14:23:16.747 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-06 14:23:16.749 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-06 14:23:16.798 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-06 14:23:17.047 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-06 14:23:18.160 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-06 14:23:18.171 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-06 14:23:18.363 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-06 14:23:18.364 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-06 14:23:18.364 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-06 14:23:18.364 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-06 14:23:18.364 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-06 14:23:18.364 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-06 14:23:18.364 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-06 14:23:18.364 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-06 14:23:18.364 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-06 14:23:18.527 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@71f38401, org.springframework.security.web.context.SecurityContextPersistenceFilter@33780d1d, org.springframework.security.web.header.HeaderWriterFilter@5b35479b, org.springframework.web.filter.CorsFilter@477870f8, org.springframework.security.web.authentication.logout.LogoutFilter@31cceb14, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@14ad2250, org.springframework.security.web.session.ConcurrentSessionFilter@703cb011, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@48079d6a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@24a13285, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@9ae7b40, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4fd93a16, org.springframework.security.web.session.SessionManagementFilter@3bf1453d, org.springframework.security.web.access.ExceptionTranslationFilter@32575657, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6da03e41]
2023-07-06 14:23:18.550 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-06 14:23:18.908 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-06 14:23:18.984 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-06 14:23:19.410 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 14:23:20.231 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-06 14:23:20.262 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-06 14:23:20.408 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-06 14:23:20.413 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-06 14:23:20.474 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-06 14:23:20.480 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.404 seconds (JVM running for 12.874)
2023-07-06 14:23:20.480 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 14:23:20.480 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-06 14:23:20.481 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 14:23:21.222 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-06 14:23:21.223 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-06 14:23:21.244 INFO  [RMI TCP Connection(10)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 21 ms
2023-07-06 14:23:25.500 WARN  [http-nio-10010-exec-1] [o.a.catalina.util.SessionIdGeneratorBase] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [176] milliseconds.
2023-07-06 14:23:26.292 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-06 14:23:26.292 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-06 14:23:26.293 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-06 14:23:26.293 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-06 14:23:26.293 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-06 14:23:28.461 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 14:23:28.468 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-06 14:23:28.491 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-06 14:23:28.580 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$A8ygFuZp.vFBSXyK1KmdBO/UA3vLm90xw.UBFMFZUyTlzmordoRHW
2023-07-06 14:23:28.672 INFO  [http-nio-10010-exec-8] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-06 14:23:32.786 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 14:23:32.826 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 14:23:32.873 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality : 배차정시성 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 45 msec}
2023-07-06 14:31:54.263 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 14:31:54.264 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:31:54.305 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality : 배차정시성 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 38 msec}
2023-07-06 14:32:35.242 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 14:32:35.243 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:32:35.288 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality : 배차정시성 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 43 msec}
2023-07-06 14:32:57.051 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 14:32:57.055 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 14:32:57.100 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality : 배차정시성 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 43 msec}
2023-07-06 14:33:28.186 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 14:33:28.188 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 14:33:28.235 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality : 배차정시성 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 46 msec}
2023-07-06 14:36:46.821 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 14:36:46.823 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 14:36:46.871 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality : 배차정시성 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 47 msec}
2023-07-06 14:38:27.442 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 14:38:27.443 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:38:27.487 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality : 배차정시성 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 43 msec}
2023-07-06 14:40:40.600 INFO  [RMI TCP Connection(30)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-06 14:40:40.633 INFO  [RMI TCP Connection(30)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-07-06 14:40:40.637 INFO  [RMI TCP Connection(30)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-07-06 14:40:40.646 INFO  [RMI TCP Connection(30)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-07-06 14:40:40.697 INFO  [RMI TCP Connection(30)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-07-06 14:40:59.125 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 8828 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-06 14:40:59.130 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-06 14:40:59.185 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-06 14:40:59.185 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-06 14:41:00.419 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 14:41:00.419 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-06 14:41:00.568 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 139ms. Found 3 JPA repository interfaces.
2023-07-06 14:41:00.954 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 14:41:00.954 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-06 14:41:01.005 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 14:41:01.006 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 14:41:01.006 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 14:41:01.006 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 52ms. Found 0 JDBC repository interfaces.
2023-07-06 14:41:01.465 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-06 14:41:01.541 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-06 14:41:01.541 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 14:41:01.542 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 14:41:01.542 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 14:41:01.542 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 14:41:01.542 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-06 14:41:01.542 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-06 14:41:01.543 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 14:41:01.543 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 14:41:01.543 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 14:41:01.543 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 14:41:01.543 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 14:41:01.608 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$2d90491e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:41:01.674 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-06 14:41:01.765 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$1786ad4b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:41:01.849 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:41:01.851 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@20dfb38f' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:41:01.858 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$3c5b4ffd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:41:01.870 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$61b06813] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:41:01.875 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:41:01.878 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:41:01.903 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$7ed8e511] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:41:01.945 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$fe593243] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:41:02.098 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-06 14:41:02.103 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-06 14:41:02.536 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-06 14:41:02.561 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-06 14:41:02.573 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-06 14:41:02.573 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-06 14:41:02.972 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-06 14:41:02.984 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-06 14:41:02.985 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3799 ms
2023-07-06 14:41:03.861 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@18cb5708 with name: jasyptStringEncryptor
2023-07-06 14:41:03.910 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-06 14:41:04.007 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 6 msec}
2023-07-06 14:41:04.011 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-06 14:41:04.820 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-06 14:41:05.190 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-06 14:41:05.265 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-06 14:41:05.267 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-06 14:41:05.435 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-06 14:41:05.688 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 14:41:05.706 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-06 14:41:06.423 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:41:06.426 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-06 14:41:06.475 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-06 14:41:06.730 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-06 14:41:07.833 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-06 14:41:07.846 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-06 14:41:08.043 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-06 14:41:08.043 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-06 14:41:08.043 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-06 14:41:08.043 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-06 14:41:08.043 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-06 14:41:08.043 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-06 14:41:08.044 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-06 14:41:08.044 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-06 14:41:08.044 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-06 14:41:08.203 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2cfaf09a, org.springframework.security.web.context.SecurityContextPersistenceFilter@76644265, org.springframework.security.web.header.HeaderWriterFilter@5f745ded, org.springframework.web.filter.CorsFilter@5029c803, org.springframework.security.web.authentication.logout.LogoutFilter@68d53f80, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@40b89309, org.springframework.security.web.session.ConcurrentSessionFilter@67ebe1a0, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@38d892f9, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3fd9d72f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@77fbb27e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6b4c0e7a, org.springframework.security.web.session.SessionManagementFilter@2ee35d62, org.springframework.security.web.access.ExceptionTranslationFilter@6946034b, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@5b11e743]
2023-07-06 14:41:08.226 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-06 14:41:08.589 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-06 14:41:08.666 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-06 14:41:09.084 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:41:09.924 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-06 14:41:09.955 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-06 14:41:10.099 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-06 14:41:10.106 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-06 14:41:10.171 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-06 14:41:10.176 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.506 seconds (JVM running for 12.936)
2023-07-06 14:41:10.177 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 14:41:10.177 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-06 14:41:10.177 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 14:41:11.389 INFO  [RMI TCP Connection(7)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-06 14:41:11.389 INFO  [RMI TCP Connection(7)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-06 14:41:11.413 INFO  [RMI TCP Connection(7)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 24 ms
2023-07-06 14:42:20.048 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 14:42:20.092 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:42:20.140 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 40 msec}
2023-07-06 14:42:21.662 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 14:42:21.664 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:42:21.674 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(a.base_ymd,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 7 msec}
2023-07-06 14:43:58.960 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 14:43:58.962 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:43:59.006 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 41 msec}
2023-07-06 14:44:00.405 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 14:44:00.407 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 14:44:00.415 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(a.base_ymd,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 7 msec}
2023-07-06 14:44:38.079 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 14:44:38.080 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:44:38.128 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 47 msec}
2023-07-06 14:44:39.686 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 14:44:39.687 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:44:39.694 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(a.base_ymd,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 6 msec}
2023-07-06 14:46:19.339 INFO  [RMI TCP Connection(16)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-06 14:46:19.378 INFO  [RMI TCP Connection(16)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-07-06 14:46:19.384 INFO  [RMI TCP Connection(16)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-07-06 14:46:19.391 INFO  [RMI TCP Connection(16)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-07-06 14:46:19.439 INFO  [RMI TCP Connection(16)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-07-06 14:46:37.989 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 5708 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-06 14:46:37.994 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-06 14:46:38.046 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-06 14:46:38.046 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-06 14:46:39.285 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 14:46:39.286 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-06 14:46:39.446 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 149ms. Found 3 JPA repository interfaces.
2023-07-06 14:46:39.808 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 14:46:39.808 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-06 14:46:39.857 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 14:46:39.858 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 14:46:39.859 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 14:46:39.859 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 51ms. Found 0 JDBC repository interfaces.
2023-07-06 14:46:40.295 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-06 14:46:40.368 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-06 14:46:40.368 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 14:46:40.369 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 14:46:40.369 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 14:46:40.369 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 14:46:40.369 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-06 14:46:40.369 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-06 14:46:40.369 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 14:46:40.370 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 14:46:40.370 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 14:46:40.370 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 14:46:40.370 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 14:46:40.431 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$7ca372bd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:46:40.484 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-06 14:46:40.575 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$6699d6ea] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:46:40.667 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:46:40.670 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@460d8a36' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:46:40.671 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$8b6e799c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:46:40.681 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$b0c391b2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:46:40.685 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:46:40.687 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:46:40.708 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$cdec0eb0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:46:40.737 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$4d6c5be2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:46:40.874 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-06 14:46:40.880 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-06 14:46:41.317 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-06 14:46:41.334 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-06 14:46:41.345 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-06 14:46:41.345 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-06 14:46:41.758 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-06 14:46:41.771 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-06 14:46:41.771 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3725 ms
2023-07-06 14:46:42.641 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@3d8a2dce with name: jasyptStringEncryptor
2023-07-06 14:46:42.712 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-06 14:46:42.797 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-07-06 14:46:42.802 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-06 14:46:43.613 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-06 14:46:43.979 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-06 14:46:44.053 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-06 14:46:44.055 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-06 14:46:44.210 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-06 14:46:44.463 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 14:46:44.481 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-06 14:46:45.204 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:46:45.207 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-06 14:46:45.262 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-06 14:46:45.530 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-06 14:46:46.603 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-06 14:46:46.614 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-06 14:46:46.799 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-06 14:46:46.799 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-06 14:46:46.799 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-06 14:46:46.800 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-06 14:46:46.800 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-06 14:46:46.800 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-06 14:46:46.800 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-06 14:46:46.800 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-06 14:46:46.800 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-06 14:46:46.960 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@445c52e7, org.springframework.security.web.context.SecurityContextPersistenceFilter@45eeb78c, org.springframework.security.web.header.HeaderWriterFilter@3c0afe9f, org.springframework.web.filter.CorsFilter@32f9b4b4, org.springframework.security.web.authentication.logout.LogoutFilter@1fc30349, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@1ec59bd3, org.springframework.security.web.session.ConcurrentSessionFilter@78694953, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@431c3c6b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@15d5f45e, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7d43b55d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@21bd9ea5, org.springframework.security.web.session.SessionManagementFilter@7c56da80, org.springframework.security.web.access.ExceptionTranslationFilter@7b5548cc, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@28c695ac]
2023-07-06 14:46:46.982 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-06 14:46:47.344 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-06 14:46:47.422 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-06 14:46:47.865 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 14:46:48.734 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-06 14:46:48.764 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-06 14:46:48.906 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-06 14:46:48.913 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-06 14:46:48.975 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-06 14:46:48.979 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.476 seconds (JVM running for 12.916)
2023-07-06 14:46:48.980 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 14:46:48.980 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-06 14:46:48.981 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 14:46:49.791 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-06 14:46:49.791 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-06 14:46:49.811 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 20 ms
2023-07-06 14:47:28.112 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 14:47:28.159 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 14:47:28.211 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 45 msec}
2023-07-06 14:47:29.425 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 14:47:29.427 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:47:29.439 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 9 msec}
2023-07-06 14:48:16.889 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 14:48:16.891 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 14:48:16.947 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(a.n,',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 54 msec}
2023-07-06 14:48:23.890 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 14:48:23.892 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 14:48:23.903 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 9 msec}
2023-07-06 14:49:17.327 INFO  [RMI TCP Connection(16)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-06 14:49:17.357 INFO  [RMI TCP Connection(16)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-07-06 14:49:17.359 INFO  [RMI TCP Connection(16)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-07-06 14:49:17.366 INFO  [RMI TCP Connection(16)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-07-06 14:49:17.432 INFO  [RMI TCP Connection(16)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-07-06 14:49:35.840 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 18204 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-06 14:49:35.844 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-06 14:49:35.900 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-06 14:49:35.900 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-06 14:49:37.124 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 14:49:37.124 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-06 14:49:37.273 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 137ms. Found 3 JPA repository interfaces.
2023-07-06 14:49:37.634 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 14:49:37.634 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-06 14:49:37.685 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 14:49:37.686 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 14:49:37.687 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 14:49:37.687 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 52ms. Found 0 JDBC repository interfaces.
2023-07-06 14:49:38.135 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-06 14:49:38.206 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-06 14:49:38.207 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 14:49:38.207 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 14:49:38.208 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 14:49:38.208 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 14:49:38.208 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-06 14:49:38.208 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-06 14:49:38.209 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 14:49:38.209 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 14:49:38.209 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 14:49:38.209 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 14:49:38.209 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 14:49:38.274 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$1b9b50ba] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:49:38.330 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-06 14:49:38.427 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$591b4e7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:49:38.512 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:49:38.515 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@52b4d072' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:49:38.519 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$2a665799] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:49:38.529 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$4fbb6faf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:49:38.533 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:49:38.535 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:49:38.555 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$6ce3ecad] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:49:38.584 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$ec6439df] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 14:49:38.717 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-06 14:49:38.723 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-06 14:49:39.169 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-06 14:49:39.186 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-06 14:49:39.196 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-06 14:49:39.196 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-06 14:49:39.602 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-06 14:49:39.614 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-06 14:49:39.615 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3715 ms
2023-07-06 14:49:40.494 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@7677949f with name: jasyptStringEncryptor
2023-07-06 14:49:40.540 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-06 14:49:40.626 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-07-06 14:49:40.631 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-06 14:49:41.454 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-06 14:49:41.876 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-06 14:49:41.950 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-06 14:49:41.953 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-06 14:49:42.111 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-06 14:49:42.348 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:49:42.366 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-06 14:49:43.073 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:49:43.076 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-06 14:49:43.126 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-06 14:49:43.385 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-06 14:49:44.472 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-06 14:49:44.483 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-06 14:49:44.672 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-06 14:49:44.672 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-06 14:49:44.672 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-06 14:49:44.672 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-06 14:49:44.672 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-06 14:49:44.672 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-06 14:49:44.672 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-06 14:49:44.672 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-06 14:49:44.672 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-06 14:49:44.834 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@515fd4d1, org.springframework.security.web.context.SecurityContextPersistenceFilter@5fa03884, org.springframework.security.web.header.HeaderWriterFilter@7f1c13d3, org.springframework.web.filter.CorsFilter@312fa6f, org.springframework.security.web.authentication.logout.LogoutFilter@782bb1c0, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@29b1e197, org.springframework.security.web.session.ConcurrentSessionFilter@505b757e, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@b72a9bc, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@379ca4a0, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2c1ad7b7, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@78dcc618, org.springframework.security.web.session.SessionManagementFilter@69fd4cc2, org.springframework.security.web.access.ExceptionTranslationFilter@2a5219a0, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@48c7cfa3]
2023-07-06 14:49:44.856 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-06 14:49:45.221 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-06 14:49:45.297 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-06 14:49:45.732 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:49:46.546 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-06 14:49:46.576 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-06 14:49:46.716 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-06 14:49:46.723 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-06 14:49:46.796 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-06 14:49:46.800 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.435 seconds (JVM running for 12.856)
2023-07-06 14:49:46.801 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 14:49:46.801 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-06 14:49:46.801 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 14:49:47.660 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-06 14:49:47.660 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-06 14:49:47.680 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 20 ms
2023-07-06 14:49:55.150 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 14:49:55.191 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:49:55.238 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 39 msec}
2023-07-06 14:49:57.841 ERROR [http-nio-10010-exec-6] [c.p.d.core.error.GlobalExceptionHandler] - handleEntityNotFoundException
java.lang.StringIndexOutOfBoundsException: begin 4, end 6, length 4
	at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4602)
	at java.base/java.lang.String.substring(String.java:2705)
	at com.pjy.dashboard.util.DateUtil.getCalendar(DateUtil.java:119)
	at com.pjy.dashboard.util.DateUtil.afterMonthDay(DateUtil.java:47)
	at com.pjy.dashboard.domain.CommonCodeVo.init(CommonCodeVo.java:86)
	at com.pjy.dashboard.controller.TestController.DynamicSqlFilterMybatis(TestController.java:181)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$84b6018.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 14:49:57.856 WARN  [http-nio-10010-exec-6] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [java.lang.StringIndexOutOfBoundsException: begin 4, end 6, length 4]
2023-07-06 14:50:44.536 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 14:50:44.538 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:50:44.581 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 42 msec}
2023-07-06 14:51:06.872 ERROR [http-nio-10010-exec-3] [c.p.d.core.error.GlobalExceptionHandler] - handleEntityNotFoundException
java.lang.StringIndexOutOfBoundsException: begin 4, end 6, length 4
	at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4602)
	at java.base/java.lang.String.substring(String.java:2705)
	at com.pjy.dashboard.util.DateUtil.getCalendar(DateUtil.java:119)
	at com.pjy.dashboard.util.DateUtil.afterMonthDay(DateUtil.java:47)
	at com.pjy.dashboard.domain.CommonCodeVo.init(CommonCodeVo.java:86)
	at com.pjy.dashboard.controller.TestController.DynamicSqlFilterMybatis(TestController.java:181)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:893)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:798)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor148.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$84b6018.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 14:51:06.874 WARN  [http-nio-10010-exec-3] [o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver] - Resolved [java.lang.StringIndexOutOfBoundsException: begin 4, end 6, length 4]
2023-07-06 14:52:11.215 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 14:52:11.217 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 14:52:11.263 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 45 msec}
2023-07-06 14:52:12.615 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 14:52:12.617 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 14:52:12.627 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 8 msec}
2023-07-06 14:54:33.741 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 14:54:33.742 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:54:33.787 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 43 msec}
2023-07-06 14:54:35.217 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 14:54:35.218 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:54:35.226 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 7 msec}
2023-07-06 14:54:57.444 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 14:54:57.445 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:54:57.488 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 41 msec}
2023-07-06 14:54:58.593 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 14:54:58.594 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 14:54:58.603 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 7 msec}
2023-07-06 14:55:02.508 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@404f6ee1
2023-07-06 14:55:02.509 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:55:02.514 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-05' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 4 msec}
2023-07-06 14:55:04.060 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d15b02
2023-07-06 14:55:04.061 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 14:55:04.067 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-04' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 4 msec}
2023-07-06 14:55:08.674 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 14:55:08.675 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:55:08.684 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 7 msec}
2023-07-06 14:55:11.703 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 14:55:11.705 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:55:11.714 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 7 msec}
2023-07-06 14:55:12.560 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@404f6ee1
2023-07-06 14:55:12.562 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 14:55:12.566 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-05' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 3 msec}
2023-07-06 14:55:14.686 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cf4b969f
2023-07-06 14:55:14.687 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:55:14.693 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-07' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 3 msec}
2023-07-06 14:55:16.773 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 14:55:16.774 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 14:55:16.781 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 5 msec}
2023-07-06 15:00:33.115 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 15:00:33.117 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:00:33.159 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 40 msec}
2023-07-06 15:00:57.251 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:00:57.253 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-06 15:00:57.262 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 9 msec}
2023-07-06 15:03:06.654 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 15:03:06.655 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:03:06.697 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 41 msec}
2023-07-06 15:03:10.558 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:03:10.559 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:03:10.567 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 7 msec}
2023-07-06 15:03:45.289 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 15:03:45.292 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:03:45.333 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 40 msec}
2023-07-06 15:04:00.921 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 15:04:00.923 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:04:00.964 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 40 msec}
2023-07-06 15:04:02.743 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:04:02.744 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:04:02.753 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 7 msec}
2023-07-06 15:07:50.575 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 15:07:50.579 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-06 15:07:50.626 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 46 msec}
2023-07-06 15:07:52.667 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:07:52.669 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:07:52.676 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 6 msec}
2023-07-06 15:12:04.718 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 15:12:04.720 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:12:04.760 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 39 msec}
2023-07-06 15:12:26.875 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 15:12:26.877 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:12:26.919 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 41 msec}
2023-07-06 15:12:29.902 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:12:29.903 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:12:29.911 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 7 msec}
2023-07-06 15:12:42.713 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d15b02
2023-07-06 15:12:42.714 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:12:42.718 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-04' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 3 msec}
2023-07-06 15:12:44.701 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b1534723
2023-07-06 15:12:44.702 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:12:44.707 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230301'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230301') <= DATE'20230401'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-03' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 3 msec}
2023-07-06 15:16:29.494 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 15:16:29.495 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:16:29.535 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 38 msec}
2023-07-06 15:16:30.553 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cf4b969f
2023-07-06 15:16:30.555 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:16:30.559 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-07' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 3 msec}
2023-07-06 15:16:30.986 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:16:30.993 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 5 msec}
2023-07-06 15:16:31.419 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:16:31.426 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 5 msec}
2023-07-06 15:16:31.853 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:16:31.860 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 5 msec}
2023-07-06 15:16:32.285 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:16:32.293 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 6 msec}
2023-07-06 15:16:32.719 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:16:32.727 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 5 msec}
2023-07-06 15:16:33.152 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:16:33.161 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 6 msec}
2023-07-06 15:16:33.585 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:16:33.592 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 5 msec}
2023-07-06 15:16:34.018 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:16:34.025 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 5 msec}
2023-07-06 15:16:34.452 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:16:34.459 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 5 msec}
2023-07-06 15:16:34.886 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:16:34.895 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 8 msec}
2023-07-06 15:16:47.448 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 15:16:47.449 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:16:47.489 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 39 msec}
2023-07-06 15:16:47.962 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8ad0dae5
2023-07-06 15:16:47.967 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20231201'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20231201') <= DATE'20240101'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-12' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 4 msec}
2023-07-06 15:16:48.397 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cf4b969f
2023-07-06 15:16:48.402 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-07' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 3 msec}
2023-07-06 15:16:48.831 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:16:48.837 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 5 msec}
2023-07-06 15:16:49.264 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:16:49.274 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 9 msec}
2023-07-06 15:16:49.696 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:16:49.704 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 6 msec}
2023-07-06 15:16:50.130 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:16:50.137 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 6 msec}
2023-07-06 15:16:50.563 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:16:50.570 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 6 msec}
2023-07-06 15:16:50.995 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:16:51.002 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 6 msec}
2023-07-06 15:16:51.429 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:16:51.436 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 6 msec}
2023-07-06 15:16:51.862 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:16:51.872 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 7 msec}
2023-07-06 15:16:52.295 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:16:52.303 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 6 msec}
2023-07-06 15:16:52.729 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:16:52.738 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 7 msec}
2023-07-06 15:16:53.161 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:16:53.168 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 6 msec}
2023-07-06 15:16:53.595 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:16:53.603 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 6 msec}
2023-07-06 15:18:20.187 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@edb39d52
2023-07-06 15:18:20.189 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:18:20.193 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230901'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230901') <= DATE'20231001'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-09' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 3 msec}
2023-07-06 15:18:23.041 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 15:18:23.043 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:18:23.081 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 37 msec}
2023-07-06 15:18:23.546 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8ad0dae5
2023-07-06 15:18:23.550 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20231201'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20231201') <= DATE'20240101'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-12' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 3 msec}
2023-07-06 15:18:23.981 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:18:23.988 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 6 msec}
2023-07-06 15:18:24.414 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:18:24.421 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 6 msec}
2023-07-06 15:18:24.848 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:18:24.855 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 5 msec}
2023-07-06 15:18:25.282 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:18:25.293 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 9 msec}
2023-07-06 15:18:25.713 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:18:25.720 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 6 msec}
2023-07-06 15:18:26.147 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:18:26.154 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 5 msec}
2023-07-06 15:18:26.580 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:18:26.587 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 6 msec}
2023-07-06 15:18:27.013 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:18:27.020 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 5 msec}
2023-07-06 15:18:27.446 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:18:27.453 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 6 msec}
2023-07-06 15:18:27.879 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:18:27.885 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 5 msec}
2023-07-06 15:18:28.314 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:18:28.324 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 7 msec}
2023-07-06 15:20:31.416 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 15:20:31.417 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:20:31.464 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 47 msec}
2023-07-06 15:20:32.137 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cf4b969f
2023-07-06 15:20:32.138 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:20:32.142 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-07' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 3 msec}
2023-07-06 15:20:32.571 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:20:32.580 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 8 msec}
2023-07-06 15:20:37.135 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@404f6ee1
2023-07-06 15:20:37.136 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:20:37.140 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-05' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 3 msec}
2023-07-06 15:20:38.485 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d15b02
2023-07-06 15:20:38.486 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:20:38.491 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-04' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 4 msec}
2023-07-06 15:20:39.433 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@404f6ee1
2023-07-06 15:20:39.434 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:20:39.438 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-05' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 3 msec}
2023-07-06 15:20:41.384 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:20:41.385 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:20:41.391 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 5 msec}
2023-07-06 15:20:44.264 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d15b02
2023-07-06 15:20:44.265 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:20:44.270 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-04' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 3 msec}
2023-07-06 15:20:46.448 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b1534723
2023-07-06 15:20:46.449 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:20:46.454 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230301'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230301') <= DATE'20230401'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-03' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 3 msec}
2023-07-06 15:20:47.431 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d15b02
2023-07-06 15:20:47.432 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:20:47.436 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-04' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 2 msec}
2023-07-06 15:20:48.831 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@404f6ee1
2023-07-06 15:20:48.832 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:20:48.837 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-05' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 4 msec}
2023-07-06 15:20:49.497 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:20:49.498 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:20:49.505 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 5 msec}
2023-07-06 15:20:54.279 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cf4b969f
2023-07-06 15:20:54.280 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:20:54.283 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-07' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 2 msec}
2023-07-06 15:20:54.714 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8ad0dae5
2023-07-06 15:20:54.718 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20231201'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20231201') <= DATE'20240101'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-12' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 3 msec}
2023-07-06 15:20:55.147 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16c9aa7e
2023-07-06 15:20:55.151 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230801'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230801') <= DATE'20230901'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-08' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 1 msec}
2023-07-06 15:20:55.581 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:20:55.587 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 4 msec}
2023-07-06 15:20:58.746 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cf4b969f
2023-07-06 15:20:58.747 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:20:58.751 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-07' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 2 msec}
2023-07-06 15:20:59.179 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:20:59.189 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 7 msec}
2023-07-06 15:21:03.925 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@404f6ee1
2023-07-06 15:21:03.927 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:21:03.931 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-05' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 3 msec}
2023-07-06 15:21:04.959 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d15b02
2023-07-06 15:21:04.960 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:21:04.966 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-04' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 4 msec}
2023-07-06 15:21:05.392 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@69d53344
2023-07-06 15:21:05.396 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230201'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230201') <= DATE'20230301'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-02' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 2 msec}
2023-07-06 15:21:05.827 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b1534723
2023-07-06 15:21:05.831 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230301'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230301') <= DATE'20230401'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-03' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 3 msec}
2023-07-06 15:21:06.260 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:21:06.267 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 6 msec}
2023-07-06 15:21:09.898 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:21:09.898 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:21:09.905 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 5 msec}
2023-07-06 15:21:12.022 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@edb39d52
2023-07-06 15:21:12.024 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:21:12.028 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230901'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230901') <= DATE'20231001'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-09' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 3 msec}
2023-07-06 15:21:12.458 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:21:12.464 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 5 msec}
2023-07-06 15:21:13.339 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cf4b969f
2023-07-06 15:21:13.340 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:21:13.344 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-07' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 2 msec}
2023-07-06 15:21:13.774 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16c9aa7e
2023-07-06 15:21:13.778 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230801'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230801') <= DATE'20230901'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-08' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 3 msec}
2023-07-06 15:21:15.455 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cf4b969f
2023-07-06 15:21:15.456 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:21:15.460 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-07' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 2 msec}
2023-07-06 15:21:15.890 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:21:15.897 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 6 msec}
2023-07-06 15:21:17.737 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cf4b969f
2023-07-06 15:21:17.738 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:21:17.744 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-07' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 5 msec}
2023-07-06 15:21:19.537 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16c9aa7e
2023-07-06 15:21:19.538 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:21:19.542 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230801'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230801') <= DATE'20230901'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-08' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 2 msec}
2023-07-06 15:21:19.971 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d15b02
2023-07-06 15:21:19.976 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-04' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 2 msec}
2023-07-06 15:21:21.719 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@404f6ee1
2023-07-06 15:21:21.720 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:21:21.724 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-05' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 3 msec}
2023-07-06 15:21:22.155 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:21:22.163 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 6 msec}
2023-07-06 15:21:23.785 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cf4b969f
2023-07-06 15:21:23.786 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:21:23.790 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-07' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 3 msec}
2023-07-06 15:22:33.720 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 15:22:33.721 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:22:33.773 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 51 msec}
2023-07-06 15:22:35.418 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:22:35.419 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:22:35.430 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 9 msec}
2023-07-06 15:22:52.885 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cf4b969f
2023-07-06 15:22:52.886 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:22:52.889 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230701'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230701') <= DATE'20230801'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-07' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 2 msec}
2023-07-06 15:22:54.093 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:22:54.094 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:22:54.106 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 10 msec}
2023-07-06 15:22:54.850 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@404f6ee1
2023-07-06 15:22:54.850 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:22:54.854 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-05' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 2 msec}
2023-07-06 15:26:00.927 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2fe451b0
2023-07-06 15:26:00.928 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:26:00.987 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 58 msec}
2023-07-06 15:40:06.331 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 24240 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-06 15:40:06.336 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-06 15:40:06.394 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-06 15:40:06.394 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-06 15:40:07.639 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 15:40:07.639 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-06 15:40:07.795 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 146ms. Found 3 JPA repository interfaces.
2023-07-06 15:40:08.143 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 15:40:08.143 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-06 15:40:08.198 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 15:40:08.198 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 15:40:08.199 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 15:40:08.199 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 55ms. Found 0 JDBC repository interfaces.
2023-07-06 15:40:08.664 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-06 15:40:08.731 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-06 15:40:08.731 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 15:40:08.731 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 15:40:08.731 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 15:40:08.732 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 15:40:08.732 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-06 15:40:08.732 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-06 15:40:08.732 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 15:40:08.732 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 15:40:08.732 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 15:40:08.732 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 15:40:08.732 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 15:40:08.804 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$84c673c5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 15:40:08.856 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-06 15:40:08.944 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$6ebcd7f2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 15:40:09.029 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 15:40:09.033 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@6b5aa071' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 15:40:09.038 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$93917aa4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 15:40:09.049 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$b8e692ba] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 15:40:09.053 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 15:40:09.054 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 15:40:09.075 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$d60f0fb8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 15:40:09.107 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$558f5cea] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 15:40:09.250 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-06 15:40:09.256 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-06 15:40:09.724 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-06 15:40:09.741 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-06 15:40:09.751 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-06 15:40:09.752 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-06 15:40:10.149 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-06 15:40:10.164 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-06 15:40:10.164 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3770 ms
2023-07-06 15:40:11.020 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@40fa2ba7 with name: jasyptStringEncryptor
2023-07-06 15:40:11.079 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-06 15:40:11.165 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-07-06 15:40:11.169 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-06 15:40:11.946 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-06 15:40:12.318 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-06 15:40:12.403 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-06 15:40:12.405 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-06 15:40:12.554 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-06 15:40:12.792 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:40:12.811 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-06 15:40:13.531 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:40:13.534 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-06 15:40:13.583 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-06 15:40:13.839 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-06 15:40:14.944 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-06 15:40:14.955 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-06 15:40:15.136 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-06 15:40:15.136 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-06 15:40:15.136 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-06 15:40:15.136 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-06 15:40:15.136 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-06 15:40:15.137 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-06 15:40:15.137 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-06 15:40:15.137 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-06 15:40:15.137 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-06 15:40:15.309 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@69fddf54, org.springframework.security.web.context.SecurityContextPersistenceFilter@6adf19d1, org.springframework.security.web.header.HeaderWriterFilter@10778683, org.springframework.web.filter.CorsFilter@41856f4f, org.springframework.security.web.authentication.logout.LogoutFilter@56eaf5ae, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@e823a6, org.springframework.security.web.session.ConcurrentSessionFilter@aa7da0f, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@29b731fa, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@637c2f6, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@327bde2b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@11e22a11, org.springframework.security.web.session.SessionManagementFilter@13a73e5b, org.springframework.security.web.access.ExceptionTranslationFilter@e818e68, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@49c358bf]
2023-07-06 15:40:15.332 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-06 15:40:15.680 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-06 15:40:15.759 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-06 15:40:16.187 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:40:17.012 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-06 15:40:17.040 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-06 15:40:17.186 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-06 15:40:17.192 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-06 15:40:17.257 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-06 15:40:17.264 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.404 seconds (JVM running for 12.859)
2023-07-06 15:40:17.264 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 15:40:17.265 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-06 15:40:17.265 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 15:40:18.207 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-06 15:40:18.207 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-06 15:40:18.228 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 20 ms
2023-07-06 15:40:32.114 WARN  [http-nio-10010-exec-1] [o.a.catalina.util.SessionIdGeneratorBase] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [170] milliseconds.
2023-07-06 15:40:32.854 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-06 15:40:32.854 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-06 15:40:32.854 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-06 15:40:32.855 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-06 15:40:32.855 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-06 15:40:34.448 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:40:34.458 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-06 15:40:34.479 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-06 15:40:34.568 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$nGvbQpf4dQSBZZvbEGgfjO/vxdSi4wHi/ht1VBBOj9KzqeKbh1z4m
2023-07-06 15:40:34.658 INFO  [http-nio-10010-exec-6] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-06 15:40:38.631 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 15:40:38.673 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:40:38.716 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 40 msec}
2023-07-06 15:40:38.790 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a1e78819
2023-07-06 15:40:38.941 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	ROUTE_NM 
			,	count(DISTINCT(a.WORK_DATE)) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100' 
			AND 	a.WORK_DATE LIKE '2023' || '%'
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 운전횟수 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 150 msec}
2023-07-06 15:40:47.112 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:40:47.114 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:40:47.123 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 8 msec}
2023-07-06 15:41:59.544 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 15:41:59.545 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:41:59.587 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 40 msec}
2023-07-06 15:41:59.640 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a1e78819
2023-07-06 15:41:59.796 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	ROUTE_NM 
			,	count(DISTINCT(a.WORK_DATE)) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100' 
			AND 	a.WORK_DATE LIKE '2023' || '%'
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 운전횟수 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 155 msec}
2023-07-06 15:42:01.567 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7652b476
2023-07-06 15:42:01.568 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:42:03.189 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230301'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230301') <= DATE'20230401'
	) , datainfo AS (
			SELECT a.WORK_DATE
			,	ROUTE_NM 
			,	count(a.WORK_DATE) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YM LIKE '2023' || '%'
			AND 	a.WORK_DATE LIKE '2023-03' || '%'
			GROUP BY a.WORK_DATE, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 운전횟수 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.WORK_DATE AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 1619 msec}
2023-07-06 15:42:16.051 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bdd0c855
2023-07-06 15:42:16.051 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:42:17.602 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
	) , datainfo AS (
			SELECT a.WORK_DATE
			,	ROUTE_NM 
			,	count(a.WORK_DATE) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YM LIKE '2023' || '%'
			AND 	a.WORK_DATE LIKE '2023-04' || '%'
			GROUP BY a.WORK_DATE, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 운전횟수 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.WORK_DATE AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 1549 msec}
2023-07-06 15:42:37.198 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:42:37.199 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:42:37.206 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 6 msec}
2023-07-06 15:43:28.056 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 15:43:28.057 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:43:28.102 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 43 msec}
2023-07-06 15:43:28.155 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a1e78819
2023-07-06 15:43:28.323 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	ROUTE_NM 
			,	count(DISTINCT(a.WORK_DATE)) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100' 
			AND 	a.WORK_DATE LIKE '2023' || '%'
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 운전횟수 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 166 msec}
2023-07-06 15:43:30.106 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:43:30.107 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:43:30.117 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 9 msec}
2023-07-06 15:43:31.058 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bdd0c855
2023-07-06 15:43:31.059 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:43:32.632 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
	) , datainfo AS (
			SELECT a.WORK_DATE
			,	ROUTE_NM 
			,	count(a.WORK_DATE) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YM LIKE '2023' || '%'
			AND 	a.WORK_DATE LIKE '2023-04' || '%'
			GROUP BY a.WORK_DATE, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 운전횟수 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.WORK_DATE AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 1572 msec}
2023-07-06 15:43:59.444 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a1e78819
2023-07-06 15:43:59.444 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 15:43:59.445 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:43:59.445 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:43:59.609 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 163 msec}
2023-07-06 15:43:59.839 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	ROUTE_NM 
			,	count(DISTINCT(a.WORK_DATE)) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100' 
			AND 	a.WORK_DATE LIKE '2023' || '%'
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 운전횟수 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 393 msec}
2023-07-06 15:44:08.687 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:44:08.689 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:44:08.697 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 7 msec}
2023-07-06 15:44:10.434 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bdd0c855
2023-07-06 15:44:10.436 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:44:11.928 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
	) , datainfo AS (
			SELECT a.WORK_DATE
			,	ROUTE_NM 
			,	count(a.WORK_DATE) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YM LIKE '2023' || '%'
			AND 	a.WORK_DATE LIKE '2023-04' || '%'
			GROUP BY a.WORK_DATE, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 운전횟수 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.WORK_DATE AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 1491 msec}
2023-07-06 15:45:23.560 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 15:45:23.562 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:45:23.602 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 39 msec}
2023-07-06 15:45:23.654 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a1e78819
2023-07-06 15:45:23.825 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	ROUTE_NM 
			,	count(DISTINCT(a.WORK_DATE)) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100' 
			AND 	a.WORK_DATE LIKE '2023' || '%'
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 운전횟수 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 170 msec}
2023-07-06 15:45:26.447 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:45:26.449 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:45:26.458 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 7 msec}
2023-07-06 15:45:28.006 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bdd0c855
2023-07-06 15:45:28.008 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:45:29.594 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
	) , datainfo AS (
			SELECT a.WORK_DATE
			,	ROUTE_NM 
			,	count(a.WORK_DATE) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YM LIKE '2023' || '%'
			AND 	a.WORK_DATE LIKE '2023-04' || '%'
			GROUP BY a.WORK_DATE, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 운전횟수 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.WORK_DATE AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 1584 msec}
2023-07-06 15:47:59.519 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 15:47:59.521 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:47:59.561 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 39 msec}
2023-07-06 15:47:59.614 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a1e78819
2023-07-06 15:47:59.791 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	ROUTE_NM 
			,	count(DISTINCT(a.WORK_DATE)) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100' 
			AND 	a.WORK_DATE LIKE '2023' || '%'
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 운전횟수 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 175 msec}
2023-07-06 15:49:09.112 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 15:49:09.114 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:49:09.156 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 40 msec}
2023-07-06 15:49:09.210 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a1e78819
2023-07-06 15:49:09.361 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	ROUTE_NM 
			,	count(DISTINCT(a.WORK_DATE)) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100' 
			AND 	a.WORK_DATE LIKE '2023' || '%'
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 운전횟수 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 150 msec}
2023-07-06 15:49:11.418 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:49:11.419 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:49:11.428 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 7 msec}
2023-07-06 15:49:47.528 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 15:49:47.529 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:49:47.571 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 40 msec}
2023-07-06 15:49:47.623 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a1e78819
2023-07-06 15:49:47.625 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 15:49:47.805 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	ROUTE_NM 
			,	count(DISTINCT(a.WORK_DATE)) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100' 
			AND 	a.WORK_DATE LIKE '2023' || '%'
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 운전횟수 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 179 msec}
2023-07-06 15:49:49.430 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 15:49:49.431 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:49:49.440 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 7 msec}
2023-07-06 15:50:28.932 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 15:50:28.933 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
2. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:50:28.985 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
2. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 50 msec}
2023-07-06 15:50:29.034 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a1e78819
2023-07-06 15:50:29.036 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:50:29.202 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	ROUTE_NM 
			,	count(DISTINCT(a.WORK_DATE)) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100' 
			AND 	a.WORK_DATE LIKE '2023' || '%'
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 운전횟수 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 165 msec}
2023-07-06 15:50:30.878 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@404f6ee1
2023-07-06 15:50:30.880 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 15:50:30.885 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-05' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 3 msec}
2023-07-06 16:07:24.252 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 18784 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-06 16:07:24.258 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-06 16:07:24.312 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-06 16:07:24.312 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-06 16:07:25.537 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 16:07:25.538 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-06 16:07:25.686 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 138ms. Found 3 JPA repository interfaces.
2023-07-06 16:07:26.060 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 16:07:26.060 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-06 16:07:26.108 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 16:07:26.108 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 16:07:26.109 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 16:07:26.109 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 48ms. Found 0 JDBC repository interfaces.
2023-07-06 16:07:26.547 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-06 16:07:26.624 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-06 16:07:26.624 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 16:07:26.625 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 16:07:26.625 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 16:07:26.625 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 16:07:26.626 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-06 16:07:26.626 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-06 16:07:26.626 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 16:07:26.626 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 16:07:26.627 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 16:07:26.627 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 16:07:26.627 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 16:07:26.685 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$af13eba0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 16:07:26.738 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-06 16:07:26.833 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$990a4fcd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 16:07:26.912 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 16:07:26.914 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@6f5a63f8' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 16:07:26.919 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$bddef27f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 16:07:26.929 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$e3340a95] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 16:07:26.934 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 16:07:26.935 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 16:07:26.966 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$5c8793] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 16:07:26.995 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$7fdcd4c5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 16:07:27.123 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-06 16:07:27.129 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-06 16:07:27.568 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-06 16:07:27.585 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-06 16:07:27.596 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-06 16:07:27.596 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-06 16:07:27.999 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-06 16:07:28.010 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-06 16:07:28.010 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3698 ms
2023-07-06 16:07:28.872 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@73d0d02e with name: jasyptStringEncryptor
2023-07-06 16:07:28.921 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-06 16:07:29.007 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-07-06 16:07:29.013 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-06 16:07:29.801 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-06 16:07:30.168 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-06 16:07:30.243 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-06 16:07:30.245 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-06 16:07:30.397 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-06 16:07:30.638 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 16:07:30.655 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-06 16:07:31.369 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 16:07:31.372 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-06 16:07:31.422 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-06 16:07:31.708 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-06 16:07:32.778 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-06 16:07:32.789 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-06 16:07:32.983 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-06 16:07:32.983 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-06 16:07:32.983 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-06 16:07:32.983 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-06 16:07:32.983 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-06 16:07:32.984 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-06 16:07:32.984 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-06 16:07:32.984 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-06 16:07:32.984 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-06 16:07:33.155 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@47a76fcc, org.springframework.security.web.context.SecurityContextPersistenceFilter@78e23e2c, org.springframework.security.web.header.HeaderWriterFilter@28748f15, org.springframework.web.filter.CorsFilter@5b295e58, org.springframework.security.web.authentication.logout.LogoutFilter@6190d7f7, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@7d67928f, org.springframework.security.web.session.ConcurrentSessionFilter@41eed920, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@7166409a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@354354c5, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3339eb4f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@45c7457a, org.springframework.security.web.session.SessionManagementFilter@dbfc2a9, org.springframework.security.web.access.ExceptionTranslationFilter@30004612, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6e9304e0]
2023-07-06 16:07:33.177 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-06 16:07:33.582 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-06 16:07:33.661 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-06 16:07:34.081 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 16:07:34.899 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-06 16:07:34.928 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-06 16:07:35.071 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-06 16:07:35.077 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-06 16:07:35.142 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-06 16:07:35.147 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.366 seconds (JVM running for 12.827)
2023-07-06 16:07:35.147 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 16:07:35.147 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-06 16:07:35.148 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 16:07:36.320 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-06 16:07:36.320 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-06 16:07:36.342 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 22 ms
2023-07-06 16:07:58.392 WARN  [http-nio-10010-exec-1] [o.a.catalina.util.SessionIdGeneratorBase] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [165] milliseconds.
2023-07-06 16:07:59.155 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-06 16:07:59.155 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-06 16:07:59.156 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-06 16:07:59.156 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-06 16:07:59.156 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-06 16:08:00.623 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 16:08:00.631 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-06 16:08:00.654 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-06 16:08:00.742 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$Ono7.JbL6hzl0xPuckat.OT3s.eG0rDNpOq/M.o0ndUFVH7N7g2sC
2023-07-06 16:08:00.833 INFO  [http-nio-10010-exec-5] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-06 16:08:04.446 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 16:08:04.488 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 16:08:04.576 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 86 msec}
2023-07-06 16:08:04.646 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a1e78819
2023-07-06 16:08:04.825 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	ROUTE_NM 
			,	count(DISTINCT(a.WORK_DATE)) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100' 
			AND 	a.WORK_DATE LIKE '2023' || '%'
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 운전횟수 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 176 msec}
2023-07-06 16:08:04.870 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@972f16b8
2023-07-06 16:08:05.100 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	b.ROUTE_NM 
			,	count(a.BASE_YM) AS cnt
			FROM	TBL_DANGER_DRIVING_INFO a JOIN TBL_DRIVERINFO b ON b.COMPANY_NO = a.COMPANY_NO AND b.EMP_NM = a.EMP_NM
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, b.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 위험운전 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 229 msec}
2023-07-06 16:08:47.981 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 16:08:47.983 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 16:08:48.023 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 39 msec}
2023-07-06 16:08:48.075 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a1e78819
2023-07-06 16:08:48.264 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	ROUTE_NM 
			,	count(DISTINCT(a.WORK_DATE)) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100' 
			AND 	a.WORK_DATE LIKE '2023' || '%'
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 운전횟수 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 188 msec}
2023-07-06 16:08:48.310 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@972f16b8
2023-07-06 16:08:48.569 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	b.ROUTE_NM 
			,	count(a.BASE_YM) AS cnt
			FROM	TBL_DANGER_DRIVING_INFO a JOIN TBL_DRIVERINFO b ON b.COMPANY_NO = a.COMPANY_NO AND b.EMP_NM = a.EMP_NM
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, b.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 위험운전 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 257 msec}
2023-07-06 16:09:47.550 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 16:09:47.552 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 16:09:47.601 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 48 msec}
2023-07-06 16:09:47.653 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a1e78819
2023-07-06 16:09:47.820 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	ROUTE_NM 
			,	count(DISTINCT(a.WORK_DATE)) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100' 
			AND 	a.WORK_DATE LIKE '2023' || '%'
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 운전횟수 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 166 msec}
2023-07-06 16:09:47.864 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@972f16b8
2023-07-06 16:09:48.125 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	b.ROUTE_NM 
			,	count(a.BASE_YM) AS cnt
			FROM	TBL_DANGER_DRIVING_INFO a JOIN TBL_DRIVERINFO b ON b.COMPANY_NO = a.COMPANY_NO AND b.EMP_NM = a.EMP_NM
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, b.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 위험운전 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 259 msec}
2023-07-06 16:12:19.852 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 16:12:19.853 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 16:12:19.893 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 38 msec}
2023-07-06 16:12:19.949 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a1e78819
2023-07-06 16:12:20.136 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	ROUTE_NM 
			,	count(DISTINCT(a.WORK_DATE)) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100' 
			AND 	a.WORK_DATE LIKE '2023' || '%'
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 운전횟수 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 186 msec}
2023-07-06 16:12:20.179 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@972f16b8
2023-07-06 16:12:20.428 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	b.ROUTE_NM 
			,	count(a.BASE_YM) AS cnt
			FROM	TBL_DANGER_DRIVING_INFO a JOIN TBL_DRIVERINFO b ON b.COMPANY_NO = a.COMPANY_NO AND b.EMP_NM = a.EMP_NM
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, b.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 위험운전 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 247 msec}
2023-07-06 16:12:56.079 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 16:12:56.082 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 16:12:56.121 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 38 msec}
2023-07-06 16:12:56.173 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a1e78819
2023-07-06 16:12:56.329 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	ROUTE_NM 
			,	count(DISTINCT(a.WORK_DATE)) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100' 
			AND 	a.WORK_DATE LIKE '2023' || '%'
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 운전횟수 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 154 msec}
2023-07-06 16:12:56.372 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@972f16b8
2023-07-06 16:12:56.611 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	b.ROUTE_NM 
			,	count(a.BASE_YM) AS cnt
			FROM	TBL_DANGER_DRIVING_INFO a JOIN TBL_DRIVERINFO b ON b.COMPANY_NO = a.COMPANY_NO AND b.EMP_NM = a.EMP_NM
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, b.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 위험운전 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 237 msec}
2023-07-06 16:13:37.110 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bdd0c855
2023-07-06 16:13:37.112 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 16:13:38.667 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
	) , datainfo AS (
			SELECT a.WORK_DATE
			,	ROUTE_NM 
			,	count(a.WORK_DATE) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YM LIKE '2023' || '%'
			AND 	a.WORK_DATE LIKE '2023-04' || '%'
			GROUP BY a.WORK_DATE, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 운전횟수 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.WORK_DATE AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 1554 msec}
2023-07-06 16:13:40.158 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 16:13:40.159 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 16:13:40.168 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 8 msec}
2023-07-06 16:13:43.259 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bdd0c855
2023-07-06 16:13:43.260 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 16:13:44.842 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
	) , datainfo AS (
			SELECT a.WORK_DATE
			,	ROUTE_NM 
			,	count(a.WORK_DATE) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YM LIKE '2023' || '%'
			AND 	a.WORK_DATE LIKE '2023-04' || '%'
			GROUP BY a.WORK_DATE, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 운전횟수 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.WORK_DATE AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 1581 msec}
2023-07-06 16:14:31.416 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 16:14:31.417 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 16:14:31.470 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 51 msec}
2023-07-06 16:14:31.538 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a1e78819
2023-07-06 16:14:31.695 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	ROUTE_NM 
			,	count(DISTINCT(a.WORK_DATE)) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100' 
			AND 	a.WORK_DATE LIKE '2023' || '%'
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 운전횟수 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 155 msec}
2023-07-06 16:14:31.737 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@972f16b8
2023-07-06 16:14:31.992 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	b.ROUTE_NM 
			,	count(a.BASE_YM) AS cnt
			FROM	TBL_DANGER_DRIVING_INFO a JOIN TBL_DRIVERINFO b ON b.COMPANY_NO = a.COMPANY_NO AND b.EMP_NM = a.EMP_NM
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, b.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 위험운전 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 254 msec}
2023-07-06 16:15:29.687 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 16:15:29.688 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 16:15:29.733 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 44 msec}
2023-07-06 16:15:29.802 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a1e78819
2023-07-06 16:15:29.991 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	ROUTE_NM 
			,	count(DISTINCT(a.WORK_DATE)) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100' 
			AND 	a.WORK_DATE LIKE '2023' || '%'
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 운전횟수 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 188 msec}
2023-07-06 16:15:30.036 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@972f16b8
2023-07-06 16:15:30.308 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	b.ROUTE_NM 
			,	count(a.BASE_YM) AS cnt
			FROM	TBL_DANGER_DRIVING_INFO a JOIN TBL_DRIVERINFO b ON b.COMPANY_NO = a.COMPANY_NO AND b.EMP_NM = a.EMP_NM
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, b.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 위험운전 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 270 msec}
2023-07-06 16:16:33.404 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 16:16:33.406 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 16:16:33.446 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 39 msec}
2023-07-06 16:16:33.503 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a1e78819
2023-07-06 16:16:33.679 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	ROUTE_NM 
			,	count(DISTINCT(a.WORK_DATE)) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100' 
			AND 	a.WORK_DATE LIKE '2023' || '%'
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 운전횟수 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 175 msec}
2023-07-06 16:16:33.720 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@972f16b8
2023-07-06 16:16:34.008 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	b.ROUTE_NM 
			,	count(a.BASE_YM) AS cnt
			FROM	TBL_DANGER_DRIVING_INFO a JOIN TBL_DRIVERINFO b ON b.COMPANY_NO = a.COMPANY_NO AND b.EMP_NM = a.EMP_NM
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, b.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 위험운전 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 285 msec}
2023-07-06 16:16:47.890 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 16:16:47.892 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 16:16:47.936 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 42 msec}
2023-07-06 16:16:47.987 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a1e78819
2023-07-06 16:16:48.147 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	ROUTE_NM 
			,	count(DISTINCT(a.WORK_DATE)) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100' 
			AND 	a.WORK_DATE LIKE '2023' || '%'
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 운전횟수 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 159 msec}
2023-07-06 16:16:48.189 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@972f16b8
2023-07-06 16:16:48.441 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	b.ROUTE_NM 
			,	count(a.BASE_YM) AS cnt
			FROM	TBL_DANGER_DRIVING_INFO a JOIN TBL_DRIVERINFO b ON b.COMPANY_NO = a.COMPANY_NO AND b.EMP_NM = a.EMP_NM
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, b.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 위험운전 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 251 msec}
2023-07-06 16:18:15.941 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 16:18:15.942 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 16:18:15.981 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 38 msec}
2023-07-06 16:18:16.044 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a1e78819
2023-07-06 16:18:16.241 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	ROUTE_NM 
			,	count(DISTINCT(a.WORK_DATE)) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100' 
			AND 	a.WORK_DATE LIKE '2023' || '%'
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 운전횟수 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 195 msec}
2023-07-06 16:18:16.283 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@972f16b8
2023-07-06 16:18:16.533 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	b.ROUTE_NM 
			,	count(a.BASE_YM) AS cnt
			FROM	TBL_DANGER_DRIVING_INFO a JOIN TBL_DRIVERINFO b ON b.COMPANY_NO = a.COMPANY_NO AND b.EMP_NM = a.EMP_NM
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, b.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 위험운전 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 249 msec}
2023-07-06 18:45:33.643 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=2h25m4s329ms42µs500ns).
2023-07-06 18:46:04.136 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-06 18:46:04.136 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-07-06 18:46:04.137 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-06 18:46:04.137 INFO  [Catalina-utility-2] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-07-06 18:46:43.382 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-06 18:46:43.382 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-06 18:46:43.382 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-06 18:46:43.382 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-06 18:46:43.382 INFO  [http-nio-10010-exec-8] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-06 18:46:44.701 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 18:46:44.702 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
11. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-06 18:46:44.704 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-06 18:46:44.798 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$HZF0pHZIAJ.1Yp7mHUT.mOWcbpNLeaBxw/vYhGztPRM7XzWhhvY92
2023-07-06 18:46:44.888 INFO  [http-nio-10010-exec-4] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-06 18:46:49.711 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f6636bcc
2023-07-06 18:46:49.713 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 18:46:49.763 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT SUBSTRING(a.BASE_YMD,1,7) AS base_ym
			,	ROUTE_NM 
			,	count(DISTINCT(a.BASE_YMD)) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YMD LIKE '2023' || '%'
			GROUP BY SUBSTRING(a.BASE_YMD,1,7), a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 배차정시성 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 49 msec}
2023-07-06 18:46:49.824 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a1e78819
2023-07-06 18:46:50.022 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	ROUTE_NM 
			,	count(DISTINCT(a.WORK_DATE)) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100' 
			AND 	a.WORK_DATE LIKE '2023' || '%'
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, a.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 운전횟수 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 196 msec}
2023-07-06 18:46:50.069 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@972f16b8
2023-07-06 18:46:50.336 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH RECURSIVE countera(n) AS (        
	        SELECT '2023-' || trim(to_char(t.n ,'00')),r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
					WHERE t.n <= 12 
	) , datainfo AS (
			SELECT a.BASE_YM
			,	b.ROUTE_NM 
			,	count(a.BASE_YM) AS cnt
			FROM	TBL_DANGER_DRIVING_INFO a JOIN TBL_DRIVERINFO b ON b.COMPANY_NO = a.COMPANY_NO AND b.EMP_NM = a.EMP_NM
			WHERE	a.company_no = '100' 
			AND 	a.BASE_YM LIKE '2023' || '%'
			GROUP BY a.BASE_YM, b.route_nm
	) 
	SELECT /* select_uploadStatus_Punctuality_year : 위험운전 특정년도 월간 upload 현황 */
		a.ROUTE_NM as col_nm,
		listagg(substring(a.n,6,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
		listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
	fROM countera a
	LEFT OUTER JOIN datainfo b ON a.n = b.base_ym AND a.ROUTE_NM = b.route_nm
	GROUP BY a.ROUTE_NM
 {executed in 266 msec}
2023-07-06 18:46:54.143 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 18:46:54.144 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 18:46:54.151 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 6 msec}
2023-07-06 18:47:18.849 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bdd0c855
2023-07-06 18:47:18.850 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 18:47:20.453 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
	) , datainfo AS (
			SELECT a.WORK_DATE
			,	ROUTE_NM 
			,	count(a.WORK_DATE) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YM LIKE '2023' || '%'
			AND 	a.WORK_DATE LIKE '2023-04' || '%'
			GROUP BY a.WORK_DATE, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 운전횟수 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.WORK_DATE AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 1602 msec}
2023-07-06 18:47:25.384 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bdd0c855
2023-07-06 18:47:25.385 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 18:47:26.989 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
	) , datainfo AS (
			SELECT a.WORK_DATE
			,	ROUTE_NM 
			,	count(a.WORK_DATE) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YM LIKE '2023' || '%'
			AND 	a.WORK_DATE LIKE '2023-04' || '%'
			GROUP BY a.WORK_DATE, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 운전횟수 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.WORK_DATE AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 1603 msec}
2023-07-06 18:47:27.214 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bdd0c855
2023-07-06 18:47:28.895 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
	) , datainfo AS (
			SELECT a.WORK_DATE
			,	ROUTE_NM 
			,	count(a.WORK_DATE) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YM LIKE '2023' || '%'
			AND 	a.WORK_DATE LIKE '2023-04' || '%'
			GROUP BY a.WORK_DATE, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 운전횟수 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.WORK_DATE AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 1679 msec}
2023-07-06 18:47:31.520 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bdd0c855
2023-07-06 18:47:31.521 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 18:47:33.136 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
	) , datainfo AS (
			SELECT a.WORK_DATE
			,	ROUTE_NM 
			,	count(a.WORK_DATE) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YM LIKE '2023' || '%'
			AND 	a.WORK_DATE LIKE '2023-04' || '%'
			GROUP BY a.WORK_DATE, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 운전횟수 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.WORK_DATE AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 1613 msec}
2023-07-06 18:47:33.880 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7652b476
2023-07-06 18:47:33.881 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 18:47:35.545 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230301'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230301') <= DATE'20230401'
	) , datainfo AS (
			SELECT a.WORK_DATE
			,	ROUTE_NM 
			,	count(a.WORK_DATE) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YM LIKE '2023' || '%'
			AND 	a.WORK_DATE LIKE '2023-03' || '%'
			GROUP BY a.WORK_DATE, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 운전횟수 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.WORK_DATE AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 1663 msec}
2023-07-06 18:47:36.441 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bdd0c855
2023-07-06 18:47:36.442 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 18:47:38.105 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
	) , datainfo AS (
			SELECT a.WORK_DATE
			,	ROUTE_NM 
			,	count(a.WORK_DATE) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YM LIKE '2023' || '%'
			AND 	a.WORK_DATE LIKE '2023-04' || '%'
			GROUP BY a.WORK_DATE, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 운전횟수 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.WORK_DATE AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 1662 msec}
2023-07-06 18:47:38.895 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bdd0c855
2023-07-06 18:47:38.897 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 18:47:40.571 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
	) , datainfo AS (
			SELECT a.WORK_DATE
			,	ROUTE_NM 
			,	count(a.WORK_DATE) AS cnt
			FROM	TBL_DRIVING_RECORD a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YM LIKE '2023' || '%'
			AND 	a.WORK_DATE LIKE '2023-04' || '%'
			GROUP BY a.WORK_DATE, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 운전횟수 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.WORK_DATE AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 1674 msec}
2023-07-06 18:47:42.461 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f8d15b02
2023-07-06 18:47:42.462 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 18:47:42.467 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-04' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 3 msec}
2023-07-06 18:47:44.823 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@404f6ee1
2023-07-06 18:47:44.824 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 18:47:44.828 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230501'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230501') <= DATE'20230601'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-05' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 2 msec}
2023-07-06 18:47:48.757 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@87cd82c0
2023-07-06 18:47:48.758 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 18:47:48.767 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230601'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230601') <= DATE'20230701'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-06' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 8 msec}
2023-07-06 18:47:52.386 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@16c9aa7e
2023-07-06 18:47:52.388 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 18:47:52.391 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
11. WITH countera AS (        
	               SELECT formatdatetime(dateadd(DAY,t.n-1,DATE'20230801'),'yyyy-MM-dd') AS base_ymd
	               ,r.ROUTE_NM 
	               FROM T, tbl_routeInfo r
	               WHERE dateadd(DAY,t.n,DATE'20230801') <= DATE'20230901'
	) , datainfo AS (
			SELECT a.BASE_YMD
			,	ROUTE_NM 
			,	count(a.BASE_YMD) AS cnt
			FROM	TBL_ARRANGE_PUNCTUALITY_INFO a
			WHERE	a.company_no = '100'
			AND 	a.BASE_YMD LIKE '2023-08' || '%'
			GROUP BY a.BASE_YMD, a.route_nm
	) 
		SELECT /* select_uploadStatus_Punctuality_month : 배차정시성 특정월 일간 upload 현황 */
			a.ROUTE_NM as col_nm,
			listagg(SUBSTRING(a.base_ymd,9,2),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS col_list,
			listagg(nvl(b.cnt,0),',') WITHIN GROUP (ORDER BY a.ROUTE_NM ) AS value_list
		fROM countera a
		LEFT OUTER JOIN datainfo b ON a.base_ymd = b.base_ymd AND a.ROUTE_NM = b.route_nm
		GROUP BY a.ROUTE_NM
 {executed in 2 msec}
2023-07-06 18:56:49.323 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
11. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 18:56:49.326 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 18:56:49.328 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT	/* select_accident_option : 교통사고 칼럼별 option값 */ 	
			listagg( DISTINCT(GAPI_GB ),'/')  	AS gapi_gb
		,	listagg( DISTINCT(acc_gb ),'/') 	AS acc_gb
		,	listagg( DISTINCT(acc_kind ),'/') 	AS acc_kind
		,	listagg( DISTINCT(proc_result ),'/') 	AS proc_result
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100' ) AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100'  ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100'  ORDER BY 1) AS emp_nm
	FROM TBM_ACCIDENT_INFO a
 {executed in 2 msec}
2023-07-06 18:57:02.163 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@45060bf
2023-07-06 18:57:02.163 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-07-06 18:57:02.201 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01' and '2023-07' AND   	a.acc_gb like '대인,대물,자차' || '%' AND   	a.acc_kind like '' || '%' AND   	a.gapi_gb like '' || '%' order by a.acc_date,acc_time
2023-07-06 18:57:02.203 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 18:57:02.205 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01' and '2023-07' AND   	a.acc_gb like '대인,대물,자차' || '%' AND   	a.acc_kind like '' || '%' AND   	a.gapi_gb like '' || '%' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-07-06 18:57:02.208 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01' and '2023-07' AND   	a.acc_gb like '대인,대물,자차' || '%' AND   	a.acc_kind like '' || '%' AND   	a.gapi_gb like '' || '%' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-07-06 18:57:05.898 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de3d044b
2023-07-06 18:57:05.898 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-07-06 18:57:05.898 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01' and '2023-07' AND   	a.acc_gb like '' || '%' AND   	a.acc_kind like '' || '%' AND   	a.gapi_gb like '' || '%' order by a.acc_date,acc_time
2023-07-06 18:57:05.899 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 18:57:05.902 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01' and '2023-07' AND   	a.acc_gb like '' || '%' AND   	a.acc_kind like '' || '%' AND   	a.gapi_gb like '' || '%' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-07-06 18:57:05.904 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01' and '2023-07' AND   	a.acc_gb like '' || '%' AND   	a.acc_kind like '' || '%' AND   	a.gapi_gb like '' || '%' order by a.acc_date,acc_time
 {executed in 2 msec}
2023-07-06 18:57:09.811 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@994ad970
2023-07-06 18:57:09.811 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO} 
2023-07-06 18:57:09.811 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01' and '2023-07' AND   	a.acc_gb like '' || '%' AND   	a.acc_kind like '승차' || '%' AND   	a.gapi_gb like '' || '%' order by a.acc_date,acc_time
2023-07-06 18:57:09.812 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 18:57:09.814 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01' and '2023-07' AND   	a.acc_gb like '' || '%' AND   	a.acc_kind like '승차' || '%' AND   	a.gapi_gb like '' || '%' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-07-06 18:57:09.816 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
12. select   ROWNUM AS no,'N' as bit,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.acc_date between '2023-01' and '2023-07' AND   	a.acc_gb like '' || '%' AND   	a.acc_kind like '승차' || '%' AND   	a.gapi_gb like '' || '%' order by a.acc_date,acc_time
 {executed in 1 msec}
2023-07-06 18:58:41.858 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 18:58:41.860 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 18:58:41.861 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
13. SELECT	/* select_accident_option : 교통사고 칼럼별 option값 */ 	
			listagg( DISTINCT(GAPI_GB ),'/')  	AS gapi_gb
		,	listagg( DISTINCT(acc_gb ),'/') 	AS acc_gb
		,	listagg( DISTINCT(acc_kind ),'/') 	AS acc_kind
		,	listagg( DISTINCT(proc_result ),'/') 	AS proc_result
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100' ) AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100'  ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100'  ORDER BY 1) AS emp_nm
	FROM TBM_ACCIDENT_INFO a
 {executed in 1 msec}
2023-07-06 18:58:45.765 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
13. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 18:58:45.768 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 18:58:45.770 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-06 18:58:49.202 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a68d0b32
2023-07-06 18:58:49.202 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG} 
2023-07-06 18:58:49.202 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   	a.work_date between '2023-01-01' and '2023-07-06' AND   	a.code_type1 like '결원' || '%' AND   	a.code_type2 like '' || '%' AND   	a.code_type3 like '' || '%' order by a.work_date,a.work_time
2023-07-06 18:58:49.203 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 18:58:49.210 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   	a.work_date between '2023-01-01' and '2023-07-06' AND   	a.code_type1 like '결원' || '%' AND   	a.code_type2 like '' || '%' AND   	a.code_type3 like '' || '%' order by a.work_date,a.work_time
 {executed in 6 msec}
2023-07-06 18:58:49.212 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   	a.work_date between '2023-01-01' and '2023-07-06' AND   	a.code_type1 like '결원' || '%' AND   	a.code_type2 like '' || '%' AND   	a.code_type3 like '' || '%' order by a.work_date,a.work_time
 {executed in 2 msec}
2023-07-06 18:58:58.647 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a0ca6920
2023-07-06 18:58:58.647 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG} 
2023-07-06 18:58:58.647 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   	a.work_date between '2022-12-01' and '2023-07-06' AND   	a.code_type1 like '교육' || '%' AND   	a.code_type2 like '' || '%' AND   	a.code_type3 like '' || '%' order by a.work_date,a.work_time
2023-07-06 18:58:58.648 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 18:58:58.652 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   	a.work_date between '2022-12-01' and '2023-07-06' AND   	a.code_type1 like '교육' || '%' AND   	a.code_type2 like '' || '%' AND   	a.code_type3 like '' || '%' order by a.work_date,a.work_time
 {executed in 4 msec}
2023-07-06 18:58:58.656 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   	a.work_date between '2022-12-01' and '2023-07-06' AND   	a.code_type1 like '교육' || '%' AND   	a.code_type2 like '' || '%' AND   	a.code_type3 like '' || '%' order by a.work_date,a.work_time
 {executed in 4 msec}
2023-07-06 19:00:06.400 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-06 19:00:06.401 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:00:06.430 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 29 msec}
2023-07-06 19:00:08.792 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a09822f7
2023-07-06 19:00:08.794 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:00:08.797 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='강근원'
	order by 1
 {executed in 2 msec}
2023-07-06 19:00:08.829 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a057dda2
2023-07-06 19:00:08.829 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-06 19:00:08.829 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '강근원' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-06 19:00:08.831 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '강근원' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-06 19:00:08.833 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '강근원' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-06 19:00:08.887 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
14. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '강근원'
 {executed in 0 msec}
2023-07-06 19:00:31.087 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@66c4b59a
2023-07-06 19:00:31.087 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_DRIVERINFO} 
2023-07-06 19:00:31.087 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBL_DRIVERINFO a where   a.company_no = '100' order by a.emp_no
2023-07-06 19:00:31.088 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:00:31.092 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,a.* from    TBL_DRIVERINFO a where   a.company_no = '100' order by a.emp_no
 {executed in 4 msec}
2023-07-06 19:00:31.099 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,a.* from    TBL_DRIVERINFO a where   a.company_no = '100' order by a.emp_no
 {executed in 7 msec}
2023-07-06 19:01:53.116 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f6f1cd6
2023-07-06 19:01:53.117 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:01:53.120 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
14. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권병묵'
	order by 1
 {executed in 1 msec}
2023-07-06 19:01:53.146 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f2ed781
2023-07-06 19:01:53.146 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-06 19:01:53.147 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-06 19:01:53.148 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-06 19:01:53.150 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-06 19:01:53.201 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
14. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권병묵'
 {executed in 0 msec}
2023-07-06 19:01:56.094 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a378cf3c
2023-07-06 19:01:56.094 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMPLOYEE_VACATION_INFO_emp} 
2023-07-06 19:01:56.094 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
2023-07-06 19:01:56.095 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:01:56.097 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
 {executed in 1 msec}
2023-07-06 19:01:56.098 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,a.* from    TBM_EMPLOYEE_VACATION_INFO a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.start_date between '2023-01' and '2023-07' and		a.delete_yn = 'N' order by a.start_date desc
 {executed in 1 msec}
2023-07-06 19:01:57.146 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@567e9a86
2023-07-06 19:01:57.146 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-06 19:01:57.146 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
2023-07-06 19:01:57.147 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:01:57.149 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
 {executed in 0 msec}
2023-07-06 19:01:57.150 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
 {executed in 0 msec}
2023-07-06 19:01:58.782 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@344316ff
2023-07-06 19:01:58.782 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-07-06 19:01:58.782 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권병묵' ORDER BY b.base_ym desc
2023-07-06 19:01:58.783 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:01:58.787 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권병묵' ORDER BY b.base_ym desc
 {executed in 4 msec}
2023-07-06 19:01:58.789 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권병묵' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 19:02:00.307 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cb61d6a2
2023-07-06 19:02:00.307 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBL_ARRANGE_PUNCTUALITY_ANALIZE_emp} 
2023-07-06 19:02:00.307 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '권병묵' ORDER BY a.base_ymd DESC,a.col003 desc
2023-07-06 19:02:00.308 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:02:00.309 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '권병묵' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 1 msec}
2023-07-06 19:02:00.311 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select  a.* from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a where   a.company_no = '100' AND     a.BASE_YMD > TO_CHAR(DATEADD(MONTH,-1,SYSDATE()),'yyyy-MM') and		a.emp_nm = '권병묵' ORDER BY a.base_ymd DESC,a.col003 desc
 {executed in 0 msec}
2023-07-06 19:02:01.540 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d441ab02
2023-07-06 19:02:01.540 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-07-06 19:02:01.540 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '권병묵'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-07-06 19:02:01.541 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:02:01.721 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '권병묵'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 180 msec}
2023-07-06 19:02:01.873 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '권병묵'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 151 msec}
2023-07-06 19:02:01.906 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e272629b
2023-07-06 19:02:01.906 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-07-06 19:02:01.906 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권병묵' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-07-06 19:02:02.473 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권병묵' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 566 msec}
2023-07-06 19:02:02.474 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:02:02.475 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권병묵' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 1 msec}
2023-07-06 19:02:02.523 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2cf4cfd1
2023-07-06 19:02:02.523 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-07-06 19:02:02.523 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권병묵' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
2023-07-06 19:02:02.549 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권병묵' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 26 msec}
2023-07-06 19:02:02.574 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권병묵' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 25 msec}
2023-07-06 19:03:04.679 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e4221929
2023-07-06 19:03:04.679 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-06 19:03:04.679 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-06 19:03:04.681 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:03:04.682 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-06 19:03:04.683 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-06 19:03:23.457 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ab71dc2e
2023-07-06 19:03:23.457 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_ACCIDENT_INFO_empNm} 
2023-07-06 19:03:23.457 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
2023-07-06 19:03:23.458 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:03:23.459 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-06 19:03:23.460 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. select   ROWNUM AS no,a.* from    TBM_ACCIDENT_INFO a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.acc_date between '2023-01' and '2023-07' order by a.acc_date desc,a.acc_time desc
 {executed in 1 msec}
2023-07-06 19:05:09.373 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@893658a7
2023-07-06 19:05:09.373 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-07-06 19:05:09.373 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권병묵' ORDER BY b.base_ym desc
2023-07-06 19:05:09.375 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
14. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:05:09.380 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권병묵' ORDER BY b.base_ym desc
 {executed in 4 msec}
2023-07-06 19:05:09.382 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
14. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '권병묵' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-07-06 19:09:29.344 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e4221929
2023-07-06 19:09:29.344 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-06 19:09:29.344 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-06 19:09:29.345 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:09:29.346 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-06 19:09:29.348 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
21. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권병묵' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-06 19:09:51.047 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
21. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:09:51.050 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:09:51.052 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-06 19:09:56.099 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cd062a12
2023-07-06 19:09:56.099 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG} 
2023-07-06 19:09:56.100 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   	a.work_date between '2023-01-01' and '2023-07-06' AND   	a.code_type1 like '' || '%' AND   	a.code_type2 like '' || '%' AND   	a.code_type3 like '' || '%' order by a.work_date,a.work_time
2023-07-06 19:09:56.101 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:09:56.107 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   	a.work_date between '2023-01-01' and '2023-07-06' AND   	a.code_type1 like '' || '%' AND   	a.code_type2 like '' || '%' AND   	a.code_type3 like '' || '%' order by a.work_date,a.work_time
 {executed in 6 msec}
2023-07-06 19:09:56.111 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   	a.work_date between '2023-01-01' and '2023-07-06' AND   	a.code_type1 like '' || '%' AND   	a.code_type2 like '' || '%' AND   	a.code_type3 like '' || '%' order by a.work_date,a.work_time
 {executed in 4 msec}
2023-07-06 19:17:22.431 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@fe8bee61
2023-07-06 19:17:22.431 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={selectMonthlyPunctuality} 
2023-07-06 19:17:22.431 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
2023-07-06 19:17:22.432 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:17:22.441 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 8 msec}
2023-07-06 19:17:22.450 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. WITH datainfo AS ( select	k.ROUTE_NM ,	listagg(k.dd ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS dd ,	listagg(k.cnt1 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt1 ,	listagg(k.cnt2 ,',') WITHIN group(ORDER BY k.ROUTE_NM) AS cnt2 FROM ( SELECT DAY(a.base_ymd) dd,	a.route_nm, max(a.cnt1) AS cnt1,max(a.cnt2) AS cnt2 FROM ( select	base_ymd ,	ROUTE_NM ,	count(*) AS cnt1,	0 AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_INFO a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM  UNION select	base_ymd ,	ROUTE_NM ,	0 AS cnt1 ,	count(*) AS cnt2 FROM    TBL_ARRANGE_PUNCTUALITY_ANALIZE a WHERE 	COMPANY_NO  = '100' AND 	BASE_YMD LIKE '2023-04%' GROUP BY BASE_YMD ,ROUTE_NM ) a GROUP BY a.base_ymd,a.route_nm ) k GROUP BY k.ROUTE_NM ) SELECT  listagg(k.day ,',') WITHIN group(ORDER BY k.key) AS column_A ,	listagg(k.week||k.HOLIDAY_YN ,',') WITHIN group(ORDER BY k.key) AS column_B ,	'' AS column_C ,	'' AS column_D FROM ( SELECT '1' KEY,p.DAY,p.date ,		decode(p.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week ,	nvl(c.HOLIDAY_YN,'') AS HOLIDAY_YN FROM ( SELECT t.n AS day ,       day_of_week(dateadd(DAY,t.n-1,DATE'20230401')) AS week ,       formatdatetime(dateadd(DAY,t.n-1,DATE'20230401'),'yyyy-MM-dd') AS date FROM T WHERE dateadd(DAY,t.n,DATE'20230401') <= DATE'20230501' ) p LEFT OUTER JOIN  tbm_holiday_info c ON  c.COMPANY_NO = '100' AND p.date = c.WORK_DATE ) k GROUP BY k.key union SELECT a.ROUTE_NM ,b.dd,b.cnt1,b.cnt2 FROM TBL_ROUTEINFO a	LEFT OUTER JOIN  datainfo b ON b.route_nm = a.ROUTE_NM WHERE a.COMPANY_NO = '100'
 {executed in 9 msec}
2023-07-06 19:17:31.099 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:17:31.101 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 19:17:43.161 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e54c41e0
2023-07-06 19:17:43.161 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 19:17:43.161 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 10 GROUP BY k.route_nm
2023-07-06 19:17:43.162 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
22. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:17:43.180 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 10 GROUP BY k.route_nm
 {executed in 18 msec}
2023-07-06 19:17:43.193 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
22. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 10 GROUP BY k.route_nm
 {executed in 13 msec}
2023-07-06 19:17:43.221 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-06 19:17:43.247 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
22. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 14 msec}
2023-07-06 19:18:54.262 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 19:18:54.262 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 19:18:54.263 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 19:18:54.263 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
23. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:18:54.275 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 11 msec}
2023-07-06 19:18:54.290 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
23. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 14 msec}
2023-07-06 19:19:28.591 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de996542
2023-07-06 19:19:28.593 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:19:28.595 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 19:19:41.841 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@d5e5f1a4
2023-07-06 19:19:41.842 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:19:41.844 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'20번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-07-06 19:19:41.871 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dcaeb7c8
2023-07-06 19:19:41.873 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 19:19:49.683 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@eec30092
2023-07-06 19:19:49.684 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:19:49.686 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 19:19:49.713 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3a79952a
2023-07-06 19:19:49.716 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 2 msec}
2023-07-06 19:19:53.689 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a3761eec
2023-07-06 19:19:53.690 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:19:53.692 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'-전체-' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-07-06 19:19:53.719 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a3775010
2023-07-06 19:19:53.721 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 19:19:55.295 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7eb68d41
2023-07-06 19:19:55.296 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:19:55.298 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_detail : 배차정시성분석 일별 */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD =  '2023-04-03' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	ORDER BY a.ROUTE_NM,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 19:19:55.418 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@660afbd8
2023-07-06 19:19:55.420 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('2023-04-03','',a.base_ymd,  '2023-04-03')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 19:19:58.067 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a3775010
2023-07-06 19:19:58.069 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:19:58.070 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 19:20:07.162 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@37b61e8b
2023-07-06 19:20:07.163 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:20:07.164 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'21번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-07-06 19:20:07.192 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1a6ef83d
2023-07-06 19:20:07.194 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 19:20:09.012 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e3b32113
2023-07-06 19:20:09.013 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:20:09.014 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'5번' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 19:20:09.040 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2f69b5ab
2023-07-06 19:20:09.042 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 19:20:11.723 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@98663f6d
2023-07-06 19:20:11.724 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:20:11.726 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_day : 배차정시성분석 일별 */
			'5번' AS route_nm
		,	a.BASE_YMD
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%' 
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.BASE_YMD
	ORDER BY 1
 {executed in 0 msec}
2023-07-06 19:20:11.762 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@98677091
2023-07-06 19:20:11.764 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 19:20:13.563 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e6b7011e
2023-07-06 19:20:13.564 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:20:13.566 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-01-01' AND '2023-07-06'
	AND 	a.EMP_NM = '장남균'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 19:20:19.741 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e95097ac
2023-07-06 19:20:19.742 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:20:19.743 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 19:20:20.582 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8b85ba4a
2023-07-06 19:20:20.583 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:20:20.584 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('20번','-전체-',a.ROUTE_NM,'20번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 19:20:21.259 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c945fabf
2023-07-06 19:20:21.260 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:20:21.262 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('21번','-전체-',a.ROUTE_NM,'21번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 19:20:21.995 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@de40b82d
2023-07-06 19:20:21.996 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:20:21.998 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('5번','-전체-',a.ROUTE_NM,'5번')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 19:20:22.697 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e95097ac
2023-07-06 19:20:22.698 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:20:22.700 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-01-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 19:20:29.979 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@88c925b7
2023-07-06 19:20:29.980 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:20:29.981 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-01-01' AND '2023-07-06'
	AND 	a.EMP_NM = '장남균'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 19:20:32.538 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e223a281
2023-07-06 19:20:32.539 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:20:32.540 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-01-01' AND '2023-07-06'
	AND 	a.EMP_NM = '심상만'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 19:20:33.766 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bdc1e291
2023-07-06 19:20:33.768 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:20:33.769 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-01-01' AND '2023-07-06'
	AND 	a.EMP_NM = '김형규'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 19:20:36.476 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@683a8cce
2023-07-06 19:20:36.477 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:20:36.478 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-01-01' AND '2023-07-06'
	AND 	a.EMP_NM = '연성석'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 19:20:37.794 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@723451d1
2023-07-06 19:20:37.795 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:20:37.796 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-01-01' AND '2023-07-06'
	AND 	a.EMP_NM = '손영호'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 19:20:39.911 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b8518861
2023-07-06 19:20:39.912 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:20:39.913 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-01-01' AND '2023-07-06'
	AND 	a.EMP_NM = '이덕길'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 19:20:41.608 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@796cc0ad
2023-07-06 19:20:41.609 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:20:41.611 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-01-01' AND '2023-07-06'
	AND 	a.EMP_NM = '이종흔'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 19:20:42.584 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5115d7b9
2023-07-06 19:20:42.585 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:20:42.587 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
24. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-01-01' AND '2023-07-06'
	AND 	a.EMP_NM = '문영식C'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 19:21:57.730 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:21:57.732 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 19:22:01.833 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@11c1c1f9
2023-07-06 19:22:01.833 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-07-06 19:22:01.834 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-07-06 19:22:01.835 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:22:02.301 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 466 msec}
2023-07-06 19:22:02.302 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-07-06 19:22:02.352 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b35571ed
2023-07-06 19:22:02.352 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-07-06 19:22:02.352 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
2023-07-06 19:22:02.496 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 144 msec}
2023-07-06 19:22:02.625 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 128 msec}
2023-07-06 19:22:03.035 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5ce0c6fd
2023-07-06 19:22:03.036 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-06 19:22:03.036 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-07-06 19:22:03.037 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:22:03.038 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 19:22:03.039 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 19:24:49.086 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a76e6bd5
2023-07-06 19:24:49.086 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-06 19:24:49.086 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강병석' ORDER BY b.base_ym desc
2023-07-06 19:24:49.087 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:24:49.089 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강병석' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-07-06 19:24:49.090 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강병석' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 19:24:58.798 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3ae58040
2023-07-06 19:24:58.798 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-07-06 19:24:58.799 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-07-06 19:24:58.800 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
24. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:24:59.268 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 467 msec}
2023-07-06 19:24:59.269 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-07-06 19:24:59.329 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dc793034
2023-07-06 19:24:59.329 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-07-06 19:24:59.329 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
2023-07-06 19:24:59.357 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 28 msec}
2023-07-06 19:24:59.385 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 28 msec}
2023-07-06 19:24:59.490 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4fc4f4bd
2023-07-06 19:24:59.490 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-06 19:24:59.491 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-07-06 19:24:59.492 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 19:24:59.494 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-07-06 19:24:59.579 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9999ec27
2023-07-06 19:24:59.579 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-07-06 19:24:59.580 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-07-06 19:25:00.067 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 486 msec}
2023-07-06 19:25:00.068 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-07-06 19:25:00.113 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3b2d9c1b
2023-07-06 19:25:00.113 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-07-06 19:25:00.114 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
2023-07-06 19:25:00.140 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 26 msec}
2023-07-06 19:25:00.172 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 31 msec}
2023-07-06 19:25:00.254 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4fc4f4bd
2023-07-06 19:25:00.254 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-06 19:25:00.255 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-07-06 19:25:00.257 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 19:25:00.258 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 19:25:00.487 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9999ec27
2023-07-06 19:25:00.487 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-07-06 19:25:00.487 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-07-06 19:25:00.948 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 459 msec}
2023-07-06 19:25:00.950 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-07-06 19:25:01.005 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3b2d9c1b
2023-07-06 19:25:01.005 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-07-06 19:25:01.006 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
2023-07-06 19:25:01.039 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 33 msec}
2023-07-06 19:25:01.080 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 41 msec}
2023-07-06 19:25:01.174 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4fc4f4bd
2023-07-06 19:25:01.174 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-06 19:25:01.174 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-07-06 19:25:01.176 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-07-06 19:25:01.178 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
24. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 19:25:12.128 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4ff7cf26
2023-07-06 19:25:12.129 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-07-06 19:25:12.129 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-07-06 19:25:12.130 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
27. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:25:12.596 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
27. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 466 msec}
2023-07-06 19:25:12.598 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
27. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-07-06 19:25:12.646 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f18b7f1a
2023-07-06 19:25:12.646 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-07-06 19:25:12.646 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
2023-07-06 19:25:12.785 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
27. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 139 msec}
2023-07-06 19:25:12.943 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
27. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 157 msec}
2023-07-06 19:25:13.297 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5ce0c6fd
2023-07-06 19:25:13.297 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-06 19:25:13.297 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-07-06 19:25:13.298 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
27. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:25:13.300 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
27. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 19:25:13.301 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
27. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 19:25:14.648 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a6b5be67
2023-07-06 19:25:14.648 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-07-06 19:25:14.649 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-07-06 19:25:14.650 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
28. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:25:15.122 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
28. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 472 msec}
2023-07-06 19:25:15.124 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
28. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-07-06 19:25:15.170 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@48496e5b
2023-07-06 19:25:15.170 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-07-06 19:25:15.171 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
2023-07-06 19:25:15.295 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
28. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 124 msec}
2023-07-06 19:25:15.430 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
28. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 135 msec}
2023-07-06 19:25:15.761 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5ce0c6fd
2023-07-06 19:25:15.762 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-06 19:25:15.762 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-07-06 19:25:15.763 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
29. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:25:15.765 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
29. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 19:25:15.766 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
29. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 19:25:22.161 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a6b5be67
2023-07-06 19:25:22.161 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-07-06 19:25:22.161 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-07-06 19:25:22.163 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:25:22.627 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 464 msec}
2023-07-06 19:25:22.629 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-07-06 19:25:22.675 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@48496e5b
2023-07-06 19:25:22.676 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-07-06 19:25:22.676 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
2023-07-06 19:25:22.809 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 133 msec}
2023-07-06 19:25:22.957 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 148 msec}
2023-07-06 19:25:23.334 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5ce0c6fd
2023-07-06 19:25:23.334 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-06 19:25:23.334 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-07-06 19:25:23.335 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:25:23.337 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-07-06 19:25:23.338 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 19:27:15.196 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ccb42a8b
2023-07-06 19:27:15.197 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:27:15.200 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='권태종'
	order by 1
 {executed in 2 msec}
2023-07-06 19:27:15.227 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@cc73e536
2023-07-06 19:27:15.227 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-06 19:27:15.227 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-06 19:27:15.230 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 3 msec}
2023-07-06 19:27:15.231 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '권태종' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-06 19:27:15.289 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
31. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '권태종'
 {executed in 0 msec}
2023-07-06 19:27:16.083 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1186b8b7
2023-07-06 19:27:16.083 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_year} 
2023-07-06 19:27:16.083 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '권태종'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
2023-07-06 19:27:16.085 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:27:16.307 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '권태종'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 222 msec}
2023-07-06 19:27:16.486 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. WITH wholeAvgInfo AS ( SELECT 	k.base_ym ,	round(avg(k.bms_km),2) AS wholeAvg_bms_km ,	round(avg(k.tot_min),2) AS wholeAvg_tot_min FROM ( SELECT	a.base_ym,a.WORK_DATE ,a.driver_id,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a where 	a.company_no = '100' and 	a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE,a.driver_id ) k	GROUP BY k.base_ym ) SELECT 	k.base_ym , 	count(k.base_ym) as tot_day ,	round(sum(k.bms_km),2) AS bms_km , 	round(sum(k.tot_min),2) AS tot_min ,	round(avg(k.bms_km),2) AS avg_bms_km ,	round(avg(k.tot_min),2) AS avg_tot_min ,	m.wholeAvg_bms_km ,	m.wholeAvg_tot_min FROM ( SELECT	a.base_ym, a.WORK_DATE ,	sum(a.BMS_KM) bms_km ,	sum(a.TOT_MIN) tot_min FROM	TBL_DRIVING_RECORD a JOIN 	TBL_ISC_DRIVER_INFO b ON	a.company_no = b.COMPANY_NO  AND b.EMP_NM = '권태종'	AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND     a.BASE_YM between  '2023-01' and '2023-07' GROUP BY	a.base_ym,a.WORK_DATE ) k JOIN wholeAvgInfo m ON m.base_ym = k.base_ym GROUP BY k.base_ym
 {executed in 179 msec}
2023-07-06 19:27:16.523 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7532b22a
2023-07-06 19:27:16.523 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_month} 
2023-07-06 19:27:16.523 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
2023-07-06 19:27:17.145 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 621 msec}
2023-07-06 19:27:17.146 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:27:17.147 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. SELECT 	/* filter_getDrivingRecord_month */ WORK_DATE ,	CASE WHEN substring(min(START_TIME),12) > '12:00:00' THEN 'P' ELSE 'A' END AS ampm_gb ,	substring(min(START_TIME),12) AS start_time ,	count(WORK_DATE) AS tot_cnt ,	round(sum(a.BMS_KM),2) bms_km ,	sum(a.TOT_MIN) tot_min FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.BASE_YM = '2023-03' GROUP BY WORK_DATE
 {executed in 0 msec}
2023-07-06 19:27:17.210 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@15469bde
2023-07-06 19:27:17.210 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getDrivingRecord_day} 
2023-07-06 19:27:17.210 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
2023-07-06 19:27:17.246 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 34 msec}
2023-07-06 19:27:17.270 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. SELECT 	ROWNUM as no, a.CAR_REGNO ,substring(a.START_TIME,12) as START_TIME,substring(a.END_TIME,12) as END_TIME ,round(a.BMS_KM,2) as bms_km ,a.TOT_MIN FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON b.EMP_NM  = '권태종' AND b.DRIVER_ID = a.DRIVER_ID where 	a.company_no = '100' AND   	a.WORK_DATE = '2023-03-01' ORDER BY a.START_TIME
 {executed in 23 msec}
2023-07-06 19:27:44.263 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:27:44.264 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-06 19:27:49.905 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e54c41e0
2023-07-06 19:27:49.906 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 19:27:49.906 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 10 GROUP BY k.route_nm
2023-07-06 19:27:49.906 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:27:49.918 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 10 GROUP BY k.route_nm
 {executed in 11 msec}
2023-07-06 19:27:49.930 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 10 GROUP BY k.route_nm
 {executed in 12 msec}
2023-07-06 19:27:49.954 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-06 19:27:49.978 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
31. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 14 msec}
2023-07-06 19:29:55.305 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-06 19:29:55.306 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
31. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:29:55.338 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
31. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 32 msec}
2023-07-06 19:33:35.844 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-06 19:33:35.846 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:33:35.866 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 20 msec}
2023-07-06 19:33:39.008 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b07820b2
2023-07-06 19:33:39.008 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-07-06 19:33:39.008 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '@empNm' ORDER BY b.base_ym desc
2023-07-06 19:33:39.009 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:33:39.010 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '@empNm' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 19:33:39.012 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '@empNm' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 19:33:40.202 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b63e134
2023-07-06 19:33:40.203 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-06 19:33:40.203 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '@empNm' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-06 19:33:40.204 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:33:40.206 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '@empNm' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-06 19:33:40.207 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '@empNm' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-06 19:33:40.254 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7ab0feb1
2023-07-06 19:33:40.256 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
32. SELECT  5 AS seq
		,  '5' AS a0 
		,	'현주소' AS a1, 		nvl(b.address,'') AS a1_value 
		,	'' AS a2, '' AS a2_value 
		,	'' AS a3, '' AS a3_value 
		,	'' AS a4, '' AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  4 AS seq
		,  '4' AS a0 
		,	'이메일' AS a1, 		nvl(b.email,'')  AS a1_value 
		,	'호봉' AS a2, 		nvl(b.hobong,'') AS a2_value 
		,	'구분' AS a3, 		a.JOB_KIND AS a3_value 
		,	'급여계산' AS a4, 		'' AS a4_value 
		,	'국민연금취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  3 AS seq
		,  '3' AS a0 
		,	'휴대폰' AS a1, 		a.PHONE_NO  AS a1_value 
		,	'정규직구분' AS a2, 	nvl(b.enter_gb,'')  AS a2_value 
		,	'부서' AS a3, 		a.TEAM_NM  AS a3_value  
		,	'운전면허번호' AS a4, 	nvl(b.dirver_regno,'')	  AS a4_value  
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  2 AS seq
		,  '2' AS a0 
		,	'생년월일' AS a1, 		nvl(b.BIRTH_YMD,'') AS a1_value  
		,	'근속일자' AS a2, 		nvl(to_char(datediff(DAY,a.enter_date,to_char(SYSDATE,'yyyy-mm-dd'))),'')  AS a2_value  
		,	'직종' AS a3, 		a.JOB_TYPE AS a3_value  
		,	'건강보험번호' AS a4, 	'' AS a4_value 
		,	'건강보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  1 AS seq
		,	'1' AS a0 
		,	'성명' AS a1, 		a.EMP_NM AS a1_value  
		,	'퇴사일자' AS a2, 		'' AS a2_value  
		,	'고정/SP구분' AS a3, 	nvl(b.sp_gb,'') AS a3_value 
		,	'가입조합' AS a4, 		nvl(b.work_group,'') AS a4_value 
		,	'      상실' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연' 
	union 
	SELECT  0 AS seq
		,	a.emp_nm AS a0 
		,	'사원번호' AS a1, 		TO_CHAR( a.EMP_NO) AS a1_value  
		,	'입사일자' AS a2, 		a.enter_date AS a2_value 
		,	'노선' AS a3, 		nvl(b.route_nm,'')  AS a3_value 
		,	'성별' AS a4, 		a.sex AS a4_value 
		,	'고용보험취득' AS a5,	'' AS a5_value 
	FROM PUBLIC.TBL_EMPLOYEEINFO a LEFT OUTER JOIN TBL_DRIVERINFO b ON a.COMPANY_NO = b.COMPANY_NO  AND a.EMP_NM = b.EMP_NM 
	WHERE a.COMPANY_NO ='100' AND a.EMP_NM ='김경연'
	order by 1
 {executed in 1 msec}
2023-07-06 19:33:40.281 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@7a70b95c
2023-07-06 19:33:40.281 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG_empNm} 
2023-07-06 19:33:40.281 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경연' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
2023-07-06 19:33:40.283 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경연' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 2 msec}
2023-07-06 19:33:40.284 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. select   ROWNUM AS no,a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' and     a.emp_nm = '김경연' and     a.work_date between '2023-01' and '2023-07' order by a.work_date desc,a.work_time desc
 {executed in 1 msec}
2023-07-06 19:33:40.335 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
32. select * from TBL_FILE_INFO where company_no = '100' and file_gb = 'empImage' and file_id = '김경연'
 {executed in 0 msec}
2023-07-06 19:33:41.733 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@1f84f8da
2023-07-06 19:33:41.733 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee2} 
2023-07-06 19:33:41.733 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '김경연' ORDER BY b.base_ym desc
2023-07-06 19:33:41.734 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:33:41.736 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '김경연' ORDER BY b.base_ym desc
 {executed in 2 msec}
2023-07-06 19:33:41.738 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym > TO_CHAR(DATEADD(YEAR,-3,SYSDATE()),'yyyy-MM') AND   b.emp_nm = '김경연' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 19:34:06.280 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:34:06.281 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 19:34:13.660 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@11c1c1f9
2023-07-06 19:34:13.660 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-07-06 19:34:13.660 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-07-06 19:34:13.661 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:34:14.164 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 503 msec}
2023-07-06 19:34:14.165 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:34:14.167 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('','',c.ROUTE_NM ,'') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-07-06 19:34:14.226 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b35571ed
2023-07-06 19:34:14.227 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-07-06 19:34:14.227 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
2023-07-06 19:34:14.360 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 133 msec}
2023-07-06 19:34:14.483 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('','',b.route_nm, '') GROUP BY a.emp_nm ORDER BY 1
 {executed in 123 msec}
2023-07-06 19:34:14.874 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5ce0c6fd
2023-07-06 19:34:14.874 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-06 19:34:14.874 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
2023-07-06 19:34:14.875 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:34:14.877 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 19:34:14.878 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '강근원' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-07-06 19:34:16.780 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f057db68
2023-07-06 19:34:16.781 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-07-06 19:34:16.781 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-07-06 19:34:16.782 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:34:17.272 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 490 msec}
2023-07-06 19:34:17.274 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 1 msec}
2023-07-06 19:34:17.322 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@91eb8b5c
2023-07-06 19:34:17.322 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-07-06 19:34:17.323 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
2023-07-06 19:34:17.363 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 40 msec}
2023-07-06 19:34:17.392 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 28 msec}
2023-07-06 19:34:17.497 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4fc4f4bd
2023-07-06 19:34:17.497 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-06 19:34:17.498 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-07-06 19:34:17.499 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 19:34:17.501 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-07-06 19:34:17.636 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@9999ec27
2023-07-06 19:34:17.636 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Step} 
2023-07-06 19:34:17.636 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
2023-07-06 19:34:18.098 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 462 msec}
2023-07-06 19:34:18.100 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT a.danger_level ,	decode(a.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_cnt||'(' || a.rate || '%)',',') WITHIN group(ORDER BY base_ym) AS rate ,	sum(danger_cnt)  AS total FROM ( SELECT a.* ,	ROUND( (danger_cnt / SUM(danger_cnt) OVER (PARTITION BY base_ym)),2) RATe FROM (	SELECT 	b.base_ym ,	b.danger_level ,	sum(CASE WHEN c.ROUTE_NM = NULL THEN 0  WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym,b.danger_level ) a union	 SELECT 	b.base_ym ,	'합계' ,	sum(CASE  WHEN c.ROUTE_NM = NULL THEN 0 WHEN c.ROUTE_NM = decode('38번','',c.ROUTE_NM ,'38번') THEN 1 ELSE 0 END) AS danger_cnt ,	0 FROM TBL_DANGER_DRIVING_INFO b JOIN TBL_DRIVERINFO c ON c.COMPANY_NO = b.company_no AND c.EMP_NM = b.emp_nm  where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' GROUP BY b.base_ym ) a GROUP BY a.danger_level ORDER BY 2 desc
 {executed in 2 msec}
2023-07-06 19:34:18.145 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3b2d9c1b
2023-07-06 19:34:18.145 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Driver} 
2023-07-06 19:34:18.145 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
2023-07-06 19:34:18.182 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 37 msec}
2023-07-06 19:34:18.211 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. WITH ymInfo AS ( SELECT DISTINCT base_ym FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),empinfo AS ( SELECT  DISTINCT emp_nm FROM TBL_DANGER_DRIVING_INFO a WHERE a.company_no = '100' AND   a.base_ym between '2022-01' and '2023-07' ),targetInfo AS ( SELECT a.*,b.* FROM ymInfo a JOIN empinfo b )	 SELECT a.emp_nm, b.sp_gb ,	listagg(a.base_ym,',') WITHIN group(ORDER BY base_ym) AS base_ym ,	listagg(a.danger_level,',') WITHIN group(ORDER BY base_ym) AS rate ,	listagg(a.danger_level_no,',') WITHIN group(ORDER BY base_ym) AS danger_level_no ,	sum(danger_level_no)  AS total FROM (	SELECT 	x.base_ym ,	x.emp_nm ,	nvl(b.danger_level,'-')  AS danger_level ,	decode(b.danger_level,'매우위험',5,'위험',4,'주의',3,'보통',2,'양호',1,0)  AS danger_level_no FROM targetInfo x  LEFT OUTER join TBL_DANGER_DRIVING_INFO b on x.emp_nm = b.emp_nm AND x.base_ym = b.base_ym and b.company_no = '100' ) a,TBL_DRIVERINFO b where a.emp_nm = b.emp_nm and   b.company_no = '100' and	  b.route_nm = decode ('38번','',b.route_nm, '38번') GROUP BY a.emp_nm ORDER BY 1
 {executed in 28 msec}
2023-07-06 19:34:18.309 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4fc4f4bd
2023-07-06 19:34:18.309 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-06 19:34:18.309 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-07-06 19:34:18.310 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 19:34:18.312 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 19:34:19.386 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4fc4f4bd
2023-07-06 19:34:19.386 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-06 19:34:19.386 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-07-06 19:34:19.387 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:34:19.388 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 19:34:19.390 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-07-06 19:34:42.209 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4fc4f4bd
2023-07-06 19:34:42.209 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-06 19:34:42.209 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
2023-07-06 19:34:42.210 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:34:42.211 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-07-06 19:34:42.212 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '고상욱' ORDER BY b.base_ym desc
 {executed in 0 msec}
2023-07-06 19:34:59.734 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5e3d7150
2023-07-06 19:34:59.734 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={danagerAnal_Employee} 
2023-07-06 19:34:59.735 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '이용대' ORDER BY b.base_ym desc
2023-07-06 19:34:59.735 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
32. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:34:59.738 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '이용대' ORDER BY b.base_ym desc
 {executed in 3 msec}
2023-07-06 19:34:59.739 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
32. SELECT 	b.base_ym, b.emp_nm,b.danger_km100,b.DANGER_ACT_CNT, b.DANGER_ACT,b.DANGER_LEVEL,b.DRIVING_CNT,b.DRIVING_DISTANCE,b.DRIVING_TIME FROM TBL_DANGER_DRIVING_INFO b where b.company_no = '100' AND   b.base_ym between '2022-01' and '2023-07' AND   b.emp_nm = '이용대' ORDER BY b.base_ym desc
 {executed in 1 msec}
2023-07-06 19:54:34.127 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
42. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:54:34.129 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:54:34.130 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
43. SELECT	/* select_EmpWorkingLogInputOption : 근태등록 칼럼별 option값 */ 	
			(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원대분류') AS code_type1
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원중분류') AS code_type2
		,	(SELECT listagg(DISTINCT(code_id),'/') FROM TBM_COMMON_CODE_INFO a where 	a.company_no = '100' AND code_gb = '민원소분류') AS code_type3
		,	(SELECT listagg(DISTINCT(car_no),'/') FROM TBL_CARINFO a where 	a.company_no = '100') AS car_no
		,	(SELECT listagg(ROUTE_NM,'/')  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1) AS route_nm
		,	(SELECT listagg(EMP_NM,'/')  FROM TBL_EMPLOYEEINFO a where 	a.company_no = '100' ORDER BY 1) AS emp_nm
	FROM dual
 {executed in 1 msec}
2023-07-06 19:54:45.235 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@2b2d8a75
2023-07-06 19:54:45.235 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={TBM_EMP_WORKING_LOG} 
2023-07-06 19:54:45.235 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   	a.work_date between '2023-01-01' and '2023-07-06' AND   	a.code_type1 like '항의' || '%' AND   	a.code_type2 like '' || '%' AND   	a.code_type3 like '' || '%' order by a.work_date,a.work_time
2023-07-06 19:54:45.236 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 19:54:45.239 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
43. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   	a.work_date between '2023-01-01' and '2023-07-06' AND   	a.code_type1 like '항의' || '%' AND   	a.code_type2 like '' || '%' AND   	a.code_type3 like '' || '%' order by a.work_date,a.work_time
 {executed in 3 msec}
2023-07-06 19:54:45.242 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
43. select   ROWNUM AS no,'N' as bit, a.* from    TBM_EMP_WORKING_LOG a where   a.company_no = '100' AND   	a.work_date between '2023-01-01' and '2023-07-06' AND   	a.code_type1 like '항의' || '%' AND   	a.code_type2 like '' || '%' AND   	a.code_type3 like '' || '%' order by a.work_date,a.work_time
 {executed in 2 msec}
2023-07-06 19:57:40.696 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
2023-07-06 19:57:40.697 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
43. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 19:57:40.725 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
43. select   a.emp_no,a.emp_nm,nvl(b.route_nm,'-') as route_nm from    TBL_employeeInfo a left outer join TBL_DRIVERINFO b on a.company_no = b.company_no and a.emp_nm = b.emp_nm where   a.company_no = '100' and	    b.sp_gb = decode('ALL','ALL',b.sp_gb,'ALL') order by a.emp_nm
 {executed in 28 msec}
2023-07-06 20:38:38.971 WARN  [H2 housekeeper] [com.zaxxer.hikari.pool.HikariPool] - H2 - Thread starvation or clock leap detected (housekeeper delta=37m4s132ms333µs200ns).
2023-07-06 20:47:41.575 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-06 20:47:41.575 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-07-06 20:47:41.575 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - updateUserCloseTime p00139 
2023-07-06 20:47:41.575 INFO  [Catalina-utility-1] [c.pjy.dashboard.listener.SessionListener] - currentSessionUserList ->  false
2023-07-06 20:56:36.987 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-06 20:56:36.988 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-06 20:56:36.988 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-07-06 20:56:36.988 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-06 20:56:36.988 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-07-06 20:56:37.004 ERROR [http-nio-10010-exec-5] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor150.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$a5d9b28e.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 20:56:37.011 ERROR [http-nio-10010-exec-5] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor150.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$a5d9b28e.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 20:56:37.013 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-06 20:56:37.013 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-06 20:56:37.013 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-06 20:56:37.013 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-06 20:56:37.013 INFO  [http-nio-10010-exec-5] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-06 20:56:37.188 ERROR [http-nio-10010-exec-5] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor150.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$a5d9b28e.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 20:56:37.190 ERROR [http-nio-10010-exec-5] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor150.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$a5d9b28e.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 20:56:37.190 ERROR [http-nio-10010-exec-5] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at jdk.internal.reflect.GeneratedMethodAccessor150.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$a5d9b28e.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 97 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 100 common frames omitted
2023-07-06 20:56:37.226 INFO  [http-nio-10010-exec-6] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-06 20:56:37.226 INFO  [http-nio-10010-exec-6] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-06 20:56:37.226 INFO  [http-nio-10010-exec-6] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-06 20:56:37.227 INFO  [http-nio-10010-exec-6] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-06 20:56:37.227 INFO  [http-nio-10010-exec-6] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-06 20:56:38.525 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
54. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 20:56:38.527 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
54. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-06 20:56:38.529 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-06 20:56:38.628 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$vs3PdtW0simR2v6I2rG9puQs1j7MiPY6ag1LNEEOUoiQ.vxTo2n42
2023-07-06 20:56:38.723 INFO  [http-nio-10010-exec-3] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-06 20:59:48.208 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 20:59:48.210 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
64. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-06 20:59:48.213 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-06 20:59:48.308 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$fG7wPG3.ebq4qtSUxCjPMuToW2q4Ro2DWBE.KhAqSIOhGpufQo53y
2023-07-06 20:59:48.400 INFO  [http-nio-10010-exec-6] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-06 20:59:50.492 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 20:59:50.493 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-06 21:02:02.490 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e54c41e0
2023-07-06 21:02:02.490 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 21:02:02.490 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 10 GROUP BY k.route_nm
2023-07-06 21:02:02.491 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:02:02.504 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 10 GROUP BY k.route_nm
 {executed in 13 msec}
2023-07-06 21:02:02.516 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 10 GROUP BY k.route_nm
 {executed in 11 msec}
2023-07-06 21:02:02.545 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
64. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-06 21:02:02.564 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
64. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 13 msec}
2023-07-06 21:13:18.472 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:13:18.473 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 21:13:24.335 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 21:13:24.335 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 21:13:24.335 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 21:13:24.336 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:13:24.354 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 17 msec}
2023-07-06 21:13:24.370 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 16 msec}
2023-07-06 21:13:24.407 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
64. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 21:13:24.425 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
64. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 12 msec}
2023-07-06 21:18:00.989 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
64. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:18:00.990 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
64. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-06 21:18:05.279 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 21:18:05.279 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 21:18:05.279 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 21:18:05.280 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
70. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:18:05.294 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
70. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 14 msec}
2023-07-06 21:18:05.307 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
70. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 12 msec}
2023-07-06 21:18:05.338 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
70. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 21:18:05.359 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
70. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 15 msec}
2023-07-06 21:19:24.428 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:19:24.429 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 21:19:31.671 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 21:19:31.671 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 21:19:31.671 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 21:19:31.672 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:19:31.686 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 13 msec}
2023-07-06 21:19:31.699 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 13 msec}
2023-07-06 21:19:31.728 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 21:19:31.746 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 13 msec}
2023-07-06 21:19:39.327 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:19:39.328 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-06 21:20:08.984 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:20:08.984 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 21:23:22.461 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:23:22.462 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 21:23:30.966 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 21:23:30.966 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 21:23:30.966 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 21:23:30.968 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:23:30.983 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 14 msec}
2023-07-06 21:23:30.997 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 14 msec}
2023-07-06 21:23:31.020 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 21:23:31.044 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 15 msec}
2023-07-06 21:23:45.984 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:23:45.985 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
74. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-06 21:23:45.987 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-06 21:23:46.082 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$bxNtTBrE4fGud1UViSMf5egcnXrF2jAUPhwbV7gxRv1G6a5ZaUZbe
2023-07-06 21:23:46.176 INFO  [http-nio-10010-exec-7] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-06 21:23:47.802 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:23:47.803 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-06 21:23:51.706 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 21:23:51.706 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 21:23:51.706 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 21:23:51.706 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:23:51.721 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 15 msec}
2023-07-06 21:23:51.735 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 13 msec}
2023-07-06 21:23:51.757 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 21:23:51.773 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 11 msec}
2023-07-06 21:24:20.971 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:24:20.973 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
74. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-06 21:24:20.974 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-06 21:24:21.069 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$yh04csb2ZRMqdrz7mS0LDOZGDqpPxgJd4M91BhlK6mXXeH94s8d/q
2023-07-06 21:24:21.165 INFO  [http-nio-10010-exec-3] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-06 21:24:22.517 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:24:22.518 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 21:24:26.882 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 21:24:26.882 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 21:24:26.882 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 21:24:26.883 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:24:26.896 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 13 msec}
2023-07-06 21:24:26.911 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 15 msec}
2023-07-06 21:24:26.934 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 21:24:26.965 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 23 msec}
2023-07-06 21:25:29.803 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:25:29.805 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
74. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-06 21:25:29.806 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-06 21:25:29.899 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$Ka8pA6thZx/qAo99GMvIXe4q3ecueTNtaTyZhlT/kxgl0oZSwkHia
2023-07-06 21:25:29.992 INFO  [http-nio-10010-exec-3] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-06 21:25:33.153 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:25:33.154 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-06 21:25:37.773 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 21:25:37.773 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 21:25:37.774 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 21:25:37.774 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:25:37.790 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 16 msec}
2023-07-06 21:25:37.805 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 15 msec}
2023-07-06 21:25:37.830 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-06 21:25:37.860 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 23 msec}
2023-07-06 21:27:05.902 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:27:05.904 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
74. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-06 21:27:05.905 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-06 21:27:06.003 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$lCN1Jm8nVsbEVZVenqfWOe57u2BMqREyr1Mx7UQGa/UyYWgOzoo6K
2023-07-06 21:27:06.095 INFO  [http-nio-10010-exec-7] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-06 21:27:07.640 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:27:07.640 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 21:27:11.913 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 21:27:11.913 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 21:27:11.914 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 21:27:11.914 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:27:11.933 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 17 msec}
2023-07-06 21:27:11.946 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 12 msec}
2023-07-06 21:27:11.976 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 21:27:11.997 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 15 msec}
2023-07-06 21:30:08.559 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:30:08.560 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-06 21:30:12.648 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 21:30:12.648 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 21:30:12.648 INFO  [http-nio-10010-exec-4] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 21:30:12.649 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:30:12.661 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 12 msec}
2023-07-06 21:30:12.675 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 12 msec}
2023-07-06 21:30:12.705 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 21:30:12.726 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 16 msec}
2023-07-06 21:31:56.309 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:31:56.309 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 21:32:00.299 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 21:32:00.299 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 21:32:00.299 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 21:32:00.300 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:32:00.311 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 11 msec}
2023-07-06 21:32:00.324 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 12 msec}
2023-07-06 21:32:00.346 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 21:32:00.362 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 10 msec}
2023-07-06 21:32:27.494 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:32:27.495 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
74. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-06 21:32:27.496 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-06 21:32:27.592 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$wnMPdxqy5wIh.jGGTYMgsuYPUrjcqNQdDDVm4YHyQLY.eZRcZpU2C
2023-07-06 21:32:27.685 INFO  [http-nio-10010-exec-2] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-06 21:32:28.897 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:32:28.898 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 21:32:33.622 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 21:32:33.623 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 21:32:33.623 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 21:32:33.624 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:32:33.637 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 13 msec}
2023-07-06 21:32:33.648 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 10 msec}
2023-07-06 21:32:33.676 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 21:32:33.695 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 13 msec}
2023-07-06 21:33:54.857 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:33:54.858 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 21:33:59.334 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 21:33:59.335 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 21:33:59.335 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 21:33:59.336 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:33:59.349 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 13 msec}
2023-07-06 21:33:59.363 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 14 msec}
2023-07-06 21:33:59.391 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 21:33:59.415 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 18 msec}
2023-07-06 21:34:40.693 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:34:40.694 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 21:34:45.166 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 21:34:45.166 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 21:34:45.166 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 21:34:45.167 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:34:45.184 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 17 msec}
2023-07-06 21:34:45.199 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 15 msec}
2023-07-06 21:34:45.236 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 21:34:45.258 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 17 msec}
2023-07-06 21:35:02.312 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:35:02.313 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-06 21:35:06.896 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 21:35:06.898 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 21:35:06.898 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 21:35:06.898 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:35:06.916 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 18 msec}
2023-07-06 21:35:06.928 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 12 msec}
2023-07-06 21:35:06.961 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 21:35:06.981 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 15 msec}
2023-07-06 21:36:45.934 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:36:45.935 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-06 21:36:50.104 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 21:36:50.104 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 21:36:50.104 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 21:36:50.105 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:36:50.120 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 15 msec}
2023-07-06 21:36:50.131 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 11 msec}
2023-07-06 21:36:50.158 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 21:36:50.175 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 12 msec}
2023-07-06 21:36:59.618 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:36:59.619 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-06 21:37:03.069 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 21:37:03.069 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 21:37:03.069 INFO  [http-nio-10010-exec-6] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 21:37:03.070 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
74. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:37:03.086 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 16 msec}
2023-07-06 21:37:03.100 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
74. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 14 msec}
2023-07-06 21:37:03.148 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 21:37:03.165 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
74. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 12 msec}
2023-07-06 21:39:00.977 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:39:00.978 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-06 21:39:04.296 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 21:39:04.296 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 21:39:04.296 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 21:39:04.297 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:39:04.310 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 13 msec}
2023-07-06 21:39:04.324 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 13 msec}
2023-07-06 21:39:04.356 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-06 21:39:04.381 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 18 msec}
2023-07-06 21:40:41.713 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:40:41.714 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 21:40:45.513 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 21:40:45.513 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 21:40:45.513 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 21:40:45.514 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:40:45.527 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 13 msec}
2023-07-06 21:40:45.540 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 13 msec}
2023-07-06 21:40:45.574 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 3 msec}
2023-07-06 21:40:45.597 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 16 msec}
2023-07-06 21:40:59.785 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:40:59.786 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 21:41:04.037 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 21:41:04.037 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 21:41:04.038 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 21:41:04.038 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:41:04.054 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 15 msec}
2023-07-06 21:41:04.070 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 16 msec}
2023-07-06 21:41:04.104 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 21:41:04.128 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 17 msec}
2023-07-06 21:41:37.839 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:41:37.840 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-06 21:41:41.688 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 21:41:41.688 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 21:41:41.689 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 21:41:41.689 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:41:41.703 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 12 msec}
2023-07-06 21:41:41.717 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 14 msec}
2023-07-06 21:41:41.749 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-06 21:41:41.770 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 15 msec}
2023-07-06 21:46:13.251 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 21:46:13.252 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-06 21:46:16.918 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 21:46:16.918 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 21:46:16.919 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 21:46:16.919 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
84. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 21:46:16.933 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 14 msec}
2023-07-06 21:46:16.955 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
84. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 20 msec}
2023-07-06 21:46:16.987 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 21:46:17.007 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
84. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 11 msec}
2023-07-06 22:14:15.029 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
94. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 22:14:15.030 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
94. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-06 22:14:19.292 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 22:14:19.292 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 22:14:19.292 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 22:14:19.293 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
94. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 22:14:19.306 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
94. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 13 msec}
2023-07-06 22:14:19.317 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
94. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 11 msec}
2023-07-06 22:14:19.345 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
94. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 22:14:19.364 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
94. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 13 msec}
2023-07-06 22:16:21.577 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
94. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 22:16:21.579 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
94. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 22:16:23.803 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
94. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 22:16:23.803 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
94. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 22:16:28.349 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 22:16:28.350 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 22:16:28.350 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 22:16:28.351 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
94. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 22:16:28.362 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
94. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 11 msec}
2023-07-06 22:16:28.373 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
94. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 11 msec}
2023-07-06 22:16:28.404 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
94. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 22:16:28.427 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
94. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 18 msec}
2023-07-06 22:39:11.579 INFO  [RMI TCP Connection(228)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-06 22:39:11.629 INFO  [RMI TCP Connection(228)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-07-06 22:39:11.632 INFO  [RMI TCP Connection(228)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-07-06 22:39:11.638 INFO  [RMI TCP Connection(228)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-07-06 22:39:11.690 INFO  [RMI TCP Connection(228)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-07-06 22:39:31.493 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 23800 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-06 22:39:31.499 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-06 22:39:31.555 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-06 22:39:31.555 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-06 22:39:32.972 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 22:39:32.972 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-06 22:39:33.136 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 151ms. Found 3 JPA repository interfaces.
2023-07-06 22:39:33.492 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 22:39:33.492 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-06 22:39:33.545 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 22:39:33.545 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 22:39:33.546 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 22:39:33.546 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 54ms. Found 0 JDBC repository interfaces.
2023-07-06 22:39:34.023 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-06 22:39:34.092 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-06 22:39:34.093 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 22:39:34.093 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 22:39:34.093 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 22:39:34.094 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 22:39:34.094 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-06 22:39:34.094 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-06 22:39:34.095 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 22:39:34.095 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 22:39:34.096 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 22:39:34.096 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 22:39:34.096 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 22:39:34.159 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$f4bdc7f9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 22:39:34.212 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-06 22:39:34.301 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$deb42c26] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 22:39:34.390 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 22:39:34.393 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@32918747' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 22:39:34.399 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$388ced8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 22:39:34.409 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$28dde6ee] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 22:39:34.413 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 22:39:34.415 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 22:39:34.437 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$460663ec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 22:39:34.467 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$c586b11e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 22:39:34.615 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-06 22:39:34.619 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-06 22:39:35.045 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-06 22:39:35.062 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-06 22:39:35.072 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-06 22:39:35.073 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-06 22:39:35.474 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-06 22:39:35.486 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-06 22:39:35.487 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3932 ms
2023-07-06 22:39:36.407 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@1df8fd77 with name: jasyptStringEncryptor
2023-07-06 22:39:36.471 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-06 22:39:36.560 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-07-06 22:39:36.565 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-06 22:39:37.414 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-06 22:39:37.813 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-06 22:39:37.890 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-06 22:39:37.892 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-06 22:39:38.048 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-06 22:39:38.282 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 2 msec}
2023-07-06 22:39:38.298 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-06 22:39:39.050 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 22:39:39.053 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-06 22:39:39.104 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-06 22:39:39.347 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-06 22:39:40.536 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-06 22:39:40.548 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-06 22:39:40.736 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-06 22:39:40.736 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-06 22:39:40.736 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-06 22:39:40.736 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-06 22:39:40.736 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-06 22:39:40.736 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-06 22:39:40.736 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-06 22:39:40.737 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-06 22:39:40.737 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-06 22:39:40.901 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@284f0a33, org.springframework.security.web.context.SecurityContextPersistenceFilter@5f745ded, org.springframework.security.web.header.HeaderWriterFilter@eab0cf0, org.springframework.web.filter.CorsFilter@602e91a5, org.springframework.security.web.authentication.logout.LogoutFilter@67ebe1a0, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@7d257a72, org.springframework.security.web.session.ConcurrentSessionFilter@19bce14f, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@65a15895, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@704d5240, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@8916094, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7b6cf110, org.springframework.security.web.session.SessionManagementFilter@36904ed7, org.springframework.security.web.access.ExceptionTranslationFilter@1f8083ec, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@56bb3775]
2023-07-06 22:39:40.923 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-06 22:39:41.280 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-06 22:39:41.359 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-06 22:39:41.788 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 22:39:42.642 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-06 22:39:42.679 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-06 22:39:42.835 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-06 22:39:42.842 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-06 22:39:42.900 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-06 22:39:42.905 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.895 seconds (JVM running for 14.576)
2023-07-06 22:39:42.906 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 22:39:42.907 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-06 22:39:42.907 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 22:39:43.664 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-06 22:39:43.664 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-06 22:39:43.686 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 22 ms
2023-07-06 22:41:00.001 INFO  [pjy-task-pool-1] [c.pjy.dashboard.schedule.DailyScheduler] - DailyScheduler insert_TBB_DRIVING_RECORD_DAY start...
2023-07-06 22:41:00.024 DEBUG [pjy-task-pool-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 22:41:00.126 DEBUG [pjy-task-pool-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT 	DISTINCT SUBSTRING(work_date,1,7) 	as base_ym
			from	TBL_DRIVING_RECORD
			WHERE 	WORK_DATE LIKE  TO_CHAR( SYSDATE,'yyyy') || '%'
 {executed in 95 msec}
2023-07-06 22:41:01.591 DEBUG [pjy-task-pool-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. MERGE INTO TBB_DRIVING_RECORD_DAY KEY (COMPANY_NO,work_date,route_nm,emp_nm)
			SELECT 	a.COMPANY_NO
				, 	a.WORK_DATE 
				,	a.ROUTE_NM 
				,	b.EMP_NM 
				,	sum(tot_min) 
				,	sum(bms_km) 
				,	'batch'
				, 	TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
			FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.driver_id = b.DRIVER_ID 
			WHERE 	a.COMPANY_NO  = '100'
			AND 	a.WORK_DATE like '2023-03' || '%'
			AND 	a.DRIVER_ID > 0
			GROUP BY a.ROUTE_NM ,b.EMP_NM , a.WORK_DATE
 {executed in 1426 msec}
2023-07-06 22:41:01.593 DEBUG [pjy-task-pool-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 22:41:02.896 DEBUG [pjy-task-pool-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. MERGE INTO TBB_DRIVING_RECORD_DAY KEY (COMPANY_NO,work_date,route_nm,emp_nm)
			SELECT 	a.COMPANY_NO
				, 	a.WORK_DATE 
				,	a.ROUTE_NM 
				,	b.EMP_NM 
				,	sum(tot_min) 
				,	sum(bms_km) 
				,	'batch'
				, 	TO_CHAR( SYSDATE,'yyyy-mm-dd hh:mi:ss')
			FROM 	TBL_DRIVING_RECORD a JOIN TBL_ISC_DRIVER_INFO b ON a.COMPANY_NO = b.COMPANY_NO AND a.driver_id = b.DRIVER_ID 
			WHERE 	a.COMPANY_NO  = '100'
			AND 	a.WORK_DATE like '2023-04' || '%'
			AND 	a.DRIVER_ID > 0
			GROUP BY a.ROUTE_NM ,b.EMP_NM , a.WORK_DATE
 {executed in 1303 msec}
2023-07-06 22:41:02.897 INFO  [pjy-task-pool-1] [c.pjy.dashboard.schedule.DailyScheduler] - DailyScheduler insert_TBB_DRIVING_RECORD_DAY end...
2023-07-06 23:02:46.927 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 16556 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-06 23:02:46.932 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-06 23:02:46.995 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-06 23:02:46.995 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-06 23:02:48.351 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 23:02:48.351 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-06 23:02:48.523 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 158ms. Found 3 JPA repository interfaces.
2023-07-06 23:02:48.903 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 23:02:48.903 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-06 23:02:48.949 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 23:02:48.950 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 23:02:48.951 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 23:02:48.951 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 47ms. Found 0 JDBC repository interfaces.
2023-07-06 23:02:49.415 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-06 23:02:49.490 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-06 23:02:49.491 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 23:02:49.491 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 23:02:49.492 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 23:02:49.492 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 23:02:49.492 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-06 23:02:49.492 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-06 23:02:49.493 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 23:02:49.493 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 23:02:49.493 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 23:02:49.493 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 23:02:49.493 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 23:02:49.560 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$eae5e16c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:02:49.617 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-06 23:02:49.713 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$d4dc4599] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:02:49.810 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:02:49.812 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@7468d87a' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:02:49.817 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$f9b0e84b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:02:49.828 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$1f060061] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:02:49.832 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:02:49.834 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:02:49.861 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$3c2e7d5f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:02:49.893 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$bbaeca91] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:02:50.042 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-06 23:02:50.048 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-06 23:02:50.531 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-06 23:02:50.550 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-06 23:02:50.562 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-06 23:02:50.562 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-06 23:02:50.976 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-06 23:02:50.988 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-06 23:02:50.989 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3994 ms
2023-07-06 23:02:52.039 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@49a21669 with name: jasyptStringEncryptor
2023-07-06 23:02:52.097 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-06 23:02:52.208 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 9 msec}
2023-07-06 23:02:52.213 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-06 23:02:53.103 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-06 23:02:53.529 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-06 23:02:53.616 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-06 23:02:53.619 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-06 23:02:53.782 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-06 23:02:54.023 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:02:54.040 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-06 23:02:54.778 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:02:54.781 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-06 23:02:54.831 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-06 23:02:55.096 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-06 23:02:56.335 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-06 23:02:56.349 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-06 23:02:56.569 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-06 23:02:56.569 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-06 23:02:56.569 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-06 23:02:56.570 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-06 23:02:56.570 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-06 23:02:56.570 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-06 23:02:56.570 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-06 23:02:56.570 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-06 23:02:56.570 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-06 23:02:56.742 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4a3d1825, org.springframework.security.web.context.SecurityContextPersistenceFilter@65a15895, org.springframework.security.web.header.HeaderWriterFilter@27c0fb11, org.springframework.web.filter.CorsFilter@64784071, org.springframework.security.web.authentication.logout.LogoutFilter@4f3b81ad, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@752cf572, org.springframework.security.web.session.ConcurrentSessionFilter@33d9b22a, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@53f2204, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@537bba55, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@747dcea6, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@35d47c70, org.springframework.security.web.session.SessionManagementFilter@ed5832b, org.springframework.security.web.access.ExceptionTranslationFilter@12580, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@2ef76d53]
2023-07-06 23:02:56.765 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-06 23:02:57.269 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-06 23:02:57.404 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-06 23:02:58.109 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:02:59.104 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-06 23:02:59.133 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-06 23:02:59.272 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-06 23:02:59.279 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-06 23:02:59.338 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-06 23:02:59.345 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 12.899 seconds (JVM running for 14.556)
2023-07-06 23:02:59.346 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 23:02:59.346 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-06 23:02:59.346 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 23:03:00.567 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-06 23:03:00.567 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-06 23:03:00.591 INFO  [RMI TCP Connection(9)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 24 ms
2023-07-06 23:04:06.436 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-06 23:04:06.436 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-06 23:04:06.436 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-07-06 23:04:06.436 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-06 23:04:06.436 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-07-06 23:04:07.309 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$11a61684.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 23:04:07.321 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$11a61684.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 23:04:07.330 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-06 23:04:07.330 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-06 23:04:07.330 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-06 23:04:07.330 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-06 23:04:07.330 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-06 23:04:07.488 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$11a61684.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 23:04:07.490 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$11a61684.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 23:04:07.491 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$11a61684.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 98 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 101 common frames omitted
2023-07-06 23:04:07.878 WARN  [http-nio-10010-exec-2] [o.a.catalina.util.SessionIdGeneratorBase] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [151] milliseconds.
2023-07-06 23:04:07.952 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-06 23:04:07.953 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-06 23:04:07.953 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-06 23:04:07.953 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-06 23:04:07.953 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-06 23:04:09.614 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:04:09.622 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-06 23:04:09.645 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-06 23:04:09.739 INFO  [http-nio-10010-exec-2] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$Ed72738vhcjg90tpjiLbleO6fj11Wl.j0jwf8vEvv2MHCicMWBVHO
2023-07-06 23:04:09.830 INFO  [http-nio-10010-exec-2] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-06 23:08:05.803 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 14192 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-06 23:08:05.809 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-06 23:08:05.867 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-06 23:08:05.867 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-06 23:08:07.122 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 23:08:07.123 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-06 23:08:07.269 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 135ms. Found 3 JPA repository interfaces.
2023-07-06 23:08:07.629 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 23:08:07.629 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-06 23:08:07.678 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 23:08:07.679 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 23:08:07.680 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 23:08:07.680 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 51ms. Found 0 JDBC repository interfaces.
2023-07-06 23:08:08.137 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-06 23:08:08.243 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-06 23:08:08.243 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 23:08:08.244 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 23:08:08.244 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 23:08:08.244 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 23:08:08.245 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-06 23:08:08.245 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-06 23:08:08.245 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 23:08:08.245 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 23:08:08.245 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 23:08:08.245 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 23:08:08.245 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 23:08:08.330 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$b801a75a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:08:08.386 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-06 23:08:08.480 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$a1f80b87] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:08:08.576 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:08:08.580 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@41decfbd' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:08:08.588 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$c6ccae39] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:08:08.599 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$ec21c64f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:08:08.604 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:08:08.605 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:08:08.628 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$94a434d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:08:08.662 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$88ca907f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:08:08.805 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-06 23:08:08.810 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-06 23:08:09.292 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-06 23:08:09.313 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-06 23:08:09.325 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-06 23:08:09.325 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-06 23:08:09.736 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-06 23:08:09.747 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-06 23:08:09.747 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3880 ms
2023-07-06 23:08:10.672 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@61e75d4b with name: jasyptStringEncryptor
2023-07-06 23:08:10.719 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-06 23:08:10.810 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-07-06 23:08:10.815 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-06 23:08:11.596 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-06 23:08:11.971 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-06 23:08:12.052 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-06 23:08:12.054 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-06 23:08:12.205 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-06 23:08:12.455 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:08:12.471 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-06 23:08:13.193 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:08:13.196 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 1 msec}
2023-07-06 23:08:13.244 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-06 23:08:13.489 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-06 23:08:14.586 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-06 23:08:14.596 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-06 23:08:14.779 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-06 23:08:14.779 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-06 23:08:14.779 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-06 23:08:14.779 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-06 23:08:14.779 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-06 23:08:14.779 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-06 23:08:14.779 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-06 23:08:14.779 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-06 23:08:14.779 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-06 23:08:14.942 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@9728e63, org.springframework.security.web.context.SecurityContextPersistenceFilter@5b83e6fc, org.springframework.security.web.header.HeaderWriterFilter@ac56c13, org.springframework.web.filter.CorsFilter@7a2baf6e, org.springframework.security.web.authentication.logout.LogoutFilter@3011941e, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@3cad8dea, org.springframework.security.web.session.ConcurrentSessionFilter@38064ac5, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@7e2e1541, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2f25301f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1e44efdb, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7b21d67f, org.springframework.security.web.session.SessionManagementFilter@6d8da694, org.springframework.security.web.access.ExceptionTranslationFilter@7dd83beb, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@3f978eb7]
2023-07-06 23:08:14.965 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-06 23:08:15.364 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-06 23:08:15.454 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-06 23:08:15.876 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:08:16.702 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-06 23:08:16.733 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-06 23:08:16.883 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-06 23:08:16.890 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-06 23:08:16.956 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-06 23:08:16.962 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.631 seconds (JVM running for 13.059)
2023-07-06 23:08:16.963 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 23:08:16.963 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-06 23:08:16.963 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 23:08:18.106 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-06 23:08:18.106 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-06 23:08:18.130 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 24 ms
2023-07-06 23:08:29.233 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-06 23:08:29.233 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-06 23:08:29.233 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /
2023-07-06 23:08:29.233 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-06 23:08:29.233 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /
2023-07-06 23:08:29.935 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$f7310897.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 23:08:29.944 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed] with root cause
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.home_jsp._jspService(home_jsp.java:121)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.security.web.header.HeaderWriterFilter$HeaderWriterRequestDispatcher.include(HeaderWriterFilter.java:149)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:158)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:97)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$f7310897.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:94)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:114)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:104)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 23:08:29.951 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-06 23:08:29.951 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-06 23:08:29.951 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-06 23:08:29.951 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-06 23:08:29.951 INFO  [http-nio-10010-exec-1] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-06 23:08:30.104 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost].[/].[jsp]] - Servlet.service() for servlet [jsp] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$f7310897.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 23:08:30.106 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[.[.[/].[dispatcherServlet]] - Servlet.service() for servlet [dispatcherServlet] threw exception
java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$f7310897.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-07-06 23:08:30.107 ERROR [http-nio-10010-exec-1] [o.a.c.c.C.[Tomcat].[localhost]] - Exception Processing ErrorPage[errorCode=0, location=/error]
org.apache.jasper.JasperException: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:639)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:500)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:385)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:329)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.doInclude(ApplicationDispatcher.java:580)
	at org.apache.catalina.core.ApplicationDispatcher.include(ApplicationDispatcher.java:516)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:163)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:317)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1372)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.servlet.resource.ResourceUrlEncodingFilter.doFilter(ResourceUrlEncodingFilter.java:64)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:116)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:84)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.ConcurrentSessionFilter.doFilter(ConcurrentSessionFilter.java:155)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.security.web.FilterChainProxy$$FastClassBySpringCGLIB$$f101c706.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:750)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.pjy.dashboard.aop.LogAspect.handleRequestRejectedException(LogAspect.java:147)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689)
	at org.springframework.security.web.FilterChainProxy$$EnhancerBySpringCGLIB$$f7310897.doFilter(<generated>)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:712)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:461)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:384)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:312)
	at org.apache.catalina.core.StandardHostValve.custom(StandardHostValve.java:394)
	at org.apache.catalina.core.StandardHostValve.status(StandardHostValve.java:253)
	at org.apache.catalina.core.StandardHostValve.throwable(StandardHostValve.java:348)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:173)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:144)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477)
	... 98 common frames omitted
Caused by: java.lang.IllegalStateException: Cannot create a session after the response has been committed
	at org.apache.catalina.connector.Request.doGetSession(Request.java:2993)
	at org.apache.catalina.connector.Request.getSession(Request.java:2432)
	at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:908)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:244)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:582)
	at org.apache.catalina.core.ApplicationHttpRequest.getSession(ApplicationHttpRequest.java:527)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:253)
	at org.apache.jasper.runtime.PageContextImpl.initialize(PageContextImpl.java:133)
	at org.apache.jasper.runtime.JspFactoryImpl.internalGetPageContext(JspFactoryImpl.java:109)
	at org.apache.jasper.runtime.JspFactoryImpl.getPageContext(JspFactoryImpl.java:60)
	at org.apache.jsp.WEB_002dINF.jsp.error_jsp._jspService(error_jsp.java:107)
	... 101 common frames omitted
2023-07-06 23:08:30.458 WARN  [http-nio-10010-exec-2] [o.a.catalina.util.SessionIdGeneratorBase] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [145] milliseconds.
2023-07-06 23:08:30.536 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] - ============================== START ==============================
2023-07-06 23:08:30.536 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Class       	:  class org.springframework.web.method.HandlerMethod
2023-07-06 23:08:30.537 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request URI 	:  /error
2023-07-06 23:08:30.537 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Request addr	:  0:0:0:0:0:0:0:1
2023-07-06 23:08:30.537 INFO  [http-nio-10010-exec-3] [c.p.d.interceptor.LoggerInterceptor] -  Servlet URI 	:  /error
2023-07-06 23:08:32.757 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:08:32.765 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 0 msec}
2023-07-06 23:08:32.789 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-06 23:08:32.878 INFO  [http-nio-10010-exec-7] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$D/WJGyJX49tw1OMzxsIaX./ZGkzXw8FDl0GLqYyGKLmRY3JPFJjd.
2023-07-06 23:08:32.970 INFO  [http-nio-10010-exec-7] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-06 23:08:35.596 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:08:35.597 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-06 23:08:40.764 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5ed7ddb
2023-07-06 23:08:40.764 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingKMRouteAvg} 
2023-07-06 23:08:40.765 INFO  [http-nio-10010-exec-8] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 23:08:40.766 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:08:40.787 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 20 msec}
2023-07-06 23:08:40.804 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 16 msec}
2023-07-06 23:08:40.907 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-06 23:08:40.947 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_km AS tot_km FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_km,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 22 msec}
2023-07-06 23:14:46.217 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:14:46.219 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 23:14:51.192 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5ed7ddb
2023-07-06 23:14:51.192 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingKMRouteAvg} 
2023-07-06 23:14:51.192 INFO  [http-nio-10010-exec-1] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 23:14:51.193 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:14:51.207 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 14 msec}
2023-07-06 23:14:51.220 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 13 msec}
2023-07-06 23:14:51.249 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 3 msec}
2023-07-06 23:14:51.268 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_km AS tot_km FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_km,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 13 msec}
2023-07-06 23:15:56.539 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:15:56.541 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 23:16:02.846 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5ed7ddb
2023-07-06 23:16:02.846 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingKMRouteAvg} 
2023-07-06 23:16:02.846 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 23:16:02.847 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:16:02.863 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 15 msec}
2023-07-06 23:16:02.875 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 11 msec}
2023-07-06 23:16:02.908 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 23:16:02.925 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_km AS tot_km FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_km,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 13 msec}
2023-07-06 23:18:31.971 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:18:31.972 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-06 23:18:36.235 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5ed7ddb
2023-07-06 23:18:36.235 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingKMRouteAvg} 
2023-07-06 23:18:36.235 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 23:18:36.236 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:18:36.248 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 11 msec}
2023-07-06 23:18:36.260 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 11 msec}
2023-07-06 23:18:36.290 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 23:18:36.311 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_km AS tot_km FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_km,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 14 msec}
2023-07-06 23:19:41.086 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:19:41.088 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 23:19:45.809 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5ed7ddb
2023-07-06 23:19:45.809 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingKMRouteAvg} 
2023-07-06 23:19:45.810 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 23:19:45.810 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:19:45.823 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 12 msec}
2023-07-06 23:19:45.835 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 12 msec}
2023-07-06 23:19:45.861 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 23:19:45.883 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_km AS tot_km FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_km,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 13 msec}
2023-07-06 23:21:05.143 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:21:05.144 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 23:21:17.704 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:21:17.705 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 23:21:23.018 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5ed7ddb
2023-07-06 23:21:23.018 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingKMRouteAvg} 
2023-07-06 23:21:23.018 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 23:21:23.019 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:21:23.032 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 12 msec}
2023-07-06 23:21:23.043 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 11 msec}
2023-07-06 23:21:23.072 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 23:21:23.095 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_km AS tot_km FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_km,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 12 msec}
2023-07-06 23:22:37.079 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:22:37.080 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-06 23:22:41.520 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5ed7ddb
2023-07-06 23:22:41.520 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingKMRouteAvg} 
2023-07-06 23:22:41.520 INFO  [http-nio-10010-exec-3] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 23:22:41.521 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:22:41.534 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 12 msec}
2023-07-06 23:22:41.545 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 11 msec}
2023-07-06 23:22:41.572 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 23:22:41.601 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_km AS tot_km FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_km,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 22 msec}
2023-07-06 23:23:21.593 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:23:21.594 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 0 msec}
2023-07-06 23:23:27.454 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@5ed7ddb
2023-07-06 23:23:27.454 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingKMRouteAvg} 
2023-07-06 23:23:27.454 INFO  [http-nio-10010-exec-9] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 23:23:27.456 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:23:27.470 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 13 msec}
2023-07-06 23:23:27.482 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_km , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_km FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_km) 	AS tot_km ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_km) / count(a.work_date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 12 msec}
2023-07-06 23:23:27.511 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 2 msec}
2023-07-06 23:23:27.539 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_km AS tot_km FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_km,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 18 msec}
2023-07-06 23:24:32.074 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:24:32.075 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT ROUTE_NM  FROM TBL_ROUTEINFO a where 	a.company_no = '100' ORDER BY 1
 {executed in 1 msec}
2023-07-06 23:24:36.705 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@f50256a4
2023-07-06 23:24:36.706 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - filterType={getEmpWorkingTimeRouteAvg} 
2023-07-06 23:24:36.706 INFO  [http-nio-10010-exec-5] [c.p.dashboard.service.DynamicSqlService] - properties mtr.query.sql : SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
2023-07-06 23:24:36.707 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:24:36.719 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 12 msec}
2023-07-06 23:24:36.729 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. SELECT 	k.route_nm ,	count(k.emp_nm)	AS emp_cnt ,	sum(k.avg) AS tot_min , 	round(sum(k.avg)/count(k.emp_nm)) AS avg_min FROM ( SELECT 	a.route_nm , 	a.emp_nm ,	SUBSTRING(a.work_date,1,7) AS base_Ym , 	sum(a.day_work_min) 	AS tot_min ,	count(a.work_Date) AS tot_cnt ,	sum(a.day_work_min) / count(a.work_Date) AS avg FROM 	TBB_DRIVING_RECORD_DAY a WHERE 	a.company_no = '100' AND 	a.work_date LIKE '2023-04' || '%' GROUP BY a.route_nm,a.emp_nm,SUBSTRING(a.work_date,1,7) ) k,tbl_routeinfo b WHERE k.route_nm = b.route_nm and   k.tot_cnt > 14 GROUP BY k.route_nm
 {executed in 10 msec}
2023-07-06 23:24:36.755 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		)  SELECT 	listagg(date,',') AS dateList
				,	listagg(week,',') AS weekList
		   FROM monthInfo
 {executed in 1 msec}
2023-07-06 23:24:36.777 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. WITH monthInfo AS (
		        SELECT to_chaR(k.DAY) AS DAY
		               ,       k.date
		               ,       decode(k.week,1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') AS week
		        FROM (
	        	       SELECT t.n AS day
		                       ,       day_of_week(dateadd(DAY,t.n-10,DATE'20230401')) AS week -- 1:일reduct_week
		                       ,       formatdatetime(dateadd(DAY,t.n-10,DATE'20230401'),'yyyy-MM-dd') AS date
		               FROM T
		               WHERE dateadd(DAY,t.n-10,DATE'20230401') < DATE'20230501'
		        		AND	 dateadd(DAY,t.n-10,DATE'20230401') >= dateadd(DAY,1- day_of_week(DATE'20230401'),DATE'20230401')
		        ) k
		) , basicInfo AS (
			SELECT a.date,b.EMP_NM ,b.SP_GB  	FROM monthInfo a JOIN tbl_driverInfo b ON b.COMPANY_NO = '100'  AND b.ROUTE_NM = '38번'
		) , recordInfo AS (
			SELECT a.EMP_NM, a.WORK_DATE ,a.day_work_min AS tot_min FROM TBB_DRIVING_RECORD_DAY a
			WHERE 	a.COMPANY_NO  = '100'
			AND 	(a.work_date > dateadd(DAY,-7,DATE'20230401') AND a.work_date < DATE'20230501')
			AND 	a.ROUTE_NM = '38번'
		)
			SELECT 	a.emp_nm ,a.sp_gb
				,	listagg(nvl(b.tot_min,0),',') WITHIN GROUP (ORDER BY a.emp_nm) minlist
			FROM basicInfo a 	      LEFT OUTER JOIN recordInfo b ON a.date = b.work_date AND a.EMP_NM = b.EMP_NM 
			GROUP BY a.emp_nm	
			ORDER BY a.sp_gb desc,a.emp_nm
 {executed in 15 msec}
2023-07-06 23:30:25.623 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4a7e896d
2023-07-06 23:30:25.625 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:30:25.628 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-05-06' AND '2023-07-06' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-05-06' AND '2023-07-06' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 23:30:27.751 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a65eb955
2023-07-06 23:30:27.753 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:30:27.754 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-05-06' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 23:31:15.244 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@174fb62c
2023-07-06 23:31:15.246 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:31:15.248 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 23:31:21.020 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6c671ff0
2023-07-06 23:31:21.022 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:31:21.023 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 23:31:21.056 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@732fe614
2023-07-06 23:31:21.058 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 23:31:32.712 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@dc2da0fa
2023-07-06 23:31:32.713 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:31:32.714 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-04' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 23:31:35.319 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@23abb4d9
2023-07-06 23:31:35.320 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:31:35.321 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-05' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 0 msec}
2023-07-06 23:31:37.117 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6b29c8b8
2023-07-06 23:31:37.119 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:31:37.120 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '2023-06' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 23:33:45.055 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@732fe614
2023-07-06 23:33:45.056 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:33:45.057 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 23:35:42.296 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@174fb62c
2023-07-06 23:35:42.297 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:35:42.299 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 23:35:46.742 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@6c671ff0
2023-07-06 23:35:46.743 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:35:46.745 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. select  /* select_PunctualityAnalize_month : 배차정시성분석 월별 */
			'-전체-' AS route_nm
		,	SUBSTRING(a.BASE_YMD ,1,7) AS base_ym
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  SUBSTRING(a.BASE_YMD ,1,7)
	ORDER BY 1
 {executed in 0 msec}
2023-07-06 23:35:46.772 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@732fe614
2023-07-06 23:35:46.774 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 23:39:00.194 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@174fb62c
2023-07-06 23:39:00.196 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
12. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:39:00.199 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
12. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-03-01' AND '2023-07-06' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 23:39:32.535 INFO  [RMI TCP Connection(44)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-06 23:39:32.569 INFO  [RMI TCP Connection(44)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-07-06 23:39:32.571 INFO  [RMI TCP Connection(44)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-07-06 23:39:32.579 INFO  [RMI TCP Connection(44)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-07-06 23:39:32.640 INFO  [RMI TCP Connection(44)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
2023-07-06 23:39:51.204 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Starting PjyApplication on DESKTOP-QJPD93S with PID 11868 (D:\BUS\dashboard\dashboard\target\classes started by admin in D:\BUS\dashboard\dashboard)
2023-07-06 23:39:51.209 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - The following profiles are active: oauth
2023-07-06 23:39:51.267 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2023-07-06 23:39:51.268 INFO  [restartedMain] [o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor] - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2023-07-06 23:39:52.473 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 23:39:52.473 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-06 23:39:52.630 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 146ms. Found 3 JPA repository interfaces.
2023-07-06 23:39:52.985 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-07-06 23:39:52.986 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Bootstrapping Spring Data JDBC repositories in DEFAULT mode.
2023-07-06 23:39:53.033 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.FileRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 23:39:53.034 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.MemberRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 23:39:53.035 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationExtensionSupport] - Spring Data JDBC - Could not safely identify store assignment for repository candidate interface com.pjy.dashboard.core.dao.jpa.h2.RememberMeRepository. If you want this repository to be a JDBC repository, consider annotating your entities with one of these annotations: org.springframework.data.relational.core.mapping.Table.
2023-07-06 23:39:53.035 INFO  [restartedMain] [o.s.d.r.c.RepositoryConfigurationDelegate] - Finished Spring Data repository scanning in 49ms. Found 0 JDBC repository interfaces.
2023-07-06 23:39:53.483 INFO  [restartedMain] [c.u.j.c.EnableEncryptablePropertiesBeanFactoryPostProcessor] - Post-processing PropertySource instances
2023-07-06 23:39:53.550 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource configurationProperties [org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource] to AOP Proxy
2023-07-06 23:39:53.551 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource commandLineArgs [org.springframework.core.env.SimpleCommandLinePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 23:39:53.551 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletConfigInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 23:39:53.551 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource servletContextInitParams [org.springframework.core.env.PropertySource$StubPropertySource] to EncryptablePropertySourceWrapper
2023-07-06 23:39:53.551 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 23:39:53.552 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2023-07-06 23:39:53.552 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2023-07-06 23:39:53.552 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application-oauth.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 23:39:53.552 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource applicationConfig: [classpath:/application.properties] [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 23:39:53.552 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource devtools [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 23:39:53.552 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [pjy.properties] [org.springframework.core.env.CompositePropertySource] to EncryptableEnumerablePropertySourceWrapper
2023-07-06 23:39:53.553 INFO  [restartedMain] [c.u.j.EncryptablePropertySourceConverter] - Converting PropertySource class path resource [common.properties] [org.springframework.core.io.support.ResourcePropertySource] to EncryptableMapPropertySourceWrapper
2023-07-06 23:39:53.615 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'asyncConfiguration' of type [com.pjy.dashboard.configuration.AsyncConfiguration$$EnhancerBySpringCGLIB$$66e8c0eb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:39:53.665 INFO  [restartedMain] [c.u.j.filter.DefaultLazyPropertyFilter] - Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2023-07-06 23:39:53.753 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration' of type [org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration$$EnhancerBySpringCGLIB$$50df2518] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:39:53.832 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'objectPostProcessor' of type [org.springframework.security.config.annotation.configuration.AutowireBeanFactoryObjectPostProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:39:53.834 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@4f0c8d59' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:39:53.840 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration' of type [org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration$$EnhancerBySpringCGLIB$$75b3c7ca] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:39:53.850 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration' of type [org.springframework.security.config.annotation.method.configuration.Jsr250MetadataSourceConfiguration$$EnhancerBySpringCGLIB$$9b08dfe0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:39:53.854 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'jsr250MethodSecurityMetadataSource' of type [org.springframework.security.access.annotation.Jsr250MethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:39:53.856 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:39:53.880 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$b8315cde] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:39:53.909 INFO  [restartedMain] [o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker] - Bean 'org.springframework.hateoas.config.HateoasConfiguration' of type [org.springframework.hateoas.config.HateoasConfiguration$$EnhancerBySpringCGLIB$$37b1aa10] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-07-06 23:39:54.050 INFO  [restartedMain] [c.u.j.r.DefaultLazyPropertyResolver] - Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2023-07-06 23:39:54.055 INFO  [restartedMain] [c.u.j.d.DefaultLazyPropertyDetector] - Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2023-07-06 23:39:54.496 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat initialized with port(s): 10010 (http)
2023-07-06 23:39:54.512 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Initializing ProtocolHandler ["http-nio-10010"]
2023-07-06 23:39:54.524 INFO  [restartedMain] [org.apache.catalina.core.StandardService] - Starting service [Tomcat]
2023-07-06 23:39:54.524 INFO  [restartedMain] [org.apache.catalina.core.StandardEngine] - Starting Servlet engine: [Apache Tomcat/9.0.29]
2023-07-06 23:39:54.939 INFO  [restartedMain] [org.apache.jasper.servlet.TldScanner] - At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.
2023-07-06 23:39:54.950 INFO  [restartedMain] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring embedded WebApplicationContext
2023-07-06 23:39:54.951 INFO  [restartedMain] [o.s.web.context.ContextLoader] - Root WebApplicationContext: initialization completed in 3683 ms
2023-07-06 23:39:55.844 INFO  [restartedMain] [c.u.j.encryptor.DefaultLazyEncryptor] - Found Custom Encryptor Bean org.jasypt.encryption.pbe.PooledPBEStringEncryptor@2b666570 with name: jasyptStringEncryptor
2023-07-06 23:39:55.891 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Starting...
2023-07-06 23:39:55.977 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.executeSql(PoolBase.java:567)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 7 msec}
2023-07-06 23:39:55.980 INFO  [restartedMain] [com.zaxxer.hikari.HikariDataSource] - H2 - Start completed.
2023-07-06 23:39:56.788 INFO  [restartedMain] [com.pjy.dashboard.filter.TestFilter] - init Pjy Filter
2023-07-06 23:39:57.161 INFO  [restartedMain] [o.hibernate.jpa.internal.util.LogHelper] - HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2023-07-06 23:39:57.234 INFO  [restartedMain] [org.hibernate.Version] - HHH000412: Hibernate Core {5.3.14.Final}
2023-07-06 23:39:57.238 INFO  [restartedMain] [org.hibernate.cfg.Environment] - HHH000206: hibernate.properties not found
2023-07-06 23:39:57.393 INFO  [restartedMain] [org.hibernate.annotations.common.Version] - HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2023-07-06 23:39:57.630 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:39:57.647 INFO  [restartedMain] [org.hibernate.dialect.Dialect] - HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
2023-07-06 23:39:58.389 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:39:58.392 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)
1. select SEQUENCE_CATALOG, SEQUENCE_SCHEMA, SEQUENCE_NAME, INCREMENT from information_schema.sequences
 {executed in 2 msec}
2023-07-06 23:39:58.441 INFO  [restartedMain] [o.s.o.j.LocalContainerEntityManagerFactoryBean] - Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-06 23:39:58.699 INFO  [restartedMain] [o.h.h.i.QueryTranslatorFactoryInitiator] - HHH000397: Using ASTQueryTranslatorFactory
2023-07-06 23:39:59.778 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService
2023-07-06 23:39:59.789 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Initializing ExecutorService 'asyncThreadPool'
2023-07-06 23:39:59.967 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/h2-console/**'], []
2023-07-06 23:39:59.968 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/css/**'], []
2023-07-06 23:39:59.968 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/js/**'], []
2023-07-06 23:39:59.968 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/monitor/**'], []
2023-07-06 23:39:59.968 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/img/**'], []
2023-07-06 23:39:59.968 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/lib/**'], []
2023-07-06 23:39:59.968 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/main.css'], []
2023-07-06 23:39:59.968 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/common.js'], []
2023-07-06 23:39:59.968 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: Ant [pattern='/resources/**'], []
2023-07-06 23:40:00.133 INFO  [restartedMain] [o.s.s.web.DefaultSecurityFilterChain] - Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@518494ac, org.springframework.security.web.context.SecurityContextPersistenceFilter@5306a707, org.springframework.security.web.header.HeaderWriterFilter@5dc5c377, org.springframework.web.filter.CorsFilter@6a5a7fa4, org.springframework.security.web.authentication.logout.LogoutFilter@483a3b79, org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter@14fad9e6, org.springframework.security.web.session.ConcurrentSessionFilter@2f3e5f60, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@5149332e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5d6e8468, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5d9f79ed, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@215ad682, org.springframework.security.web.session.SessionManagementFilter@8ebcb75, org.springframework.security.web.access.ExceptionTranslationFilter@72b6e62e, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@50e4a7ae]
2023-07-06 23:40:00.155 INFO  [restartedMain] [o.s.aop.framework.CglibAopProxy] - Unable to proxy interface-implementing method [public final void org.springframework.web.filter.GenericFilterBean.init(javax.servlet.FilterConfig) throws javax.servlet.ServletException] because it is marked as final: Consider using interface-based JDK proxies instead!
2023-07-06 23:40:00.515 WARN  [restartedMain] [o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration$JpaWebMvcConfiguration] - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2023-07-06 23:40:00.592 INFO  [restartedMain] [o.s.b.a.w.s.WelcomePageHandlerMapping] - Adding welcome page: ServletContext resource [/index.html]
2023-07-06 23:40:01.026 DEBUG [restartedMain] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:40:01.891 INFO  [restartedMain] [o.s.b.d.a.OptionalLiveReloadServer] - LiveReload server is running on port 35729
2023-07-06 23:40:01.920 INFO  [restartedMain] [o.s.b.a.e.web.EndpointLinksResolver] - Exposing 16 endpoint(s) beneath base path '/actuator'
2023-07-06 23:40:02.069 INFO  [restartedMain] [o.s.s.concurrent.ThreadPoolTaskScheduler] - Initializing ExecutorService
2023-07-06 23:40:02.075 INFO  [restartedMain] [o.apache.coyote.http11.Http11NioProtocol] - Starting ProtocolHandler ["http-nio-10010"]
2023-07-06 23:40:02.145 INFO  [restartedMain] [o.s.b.w.embedded.tomcat.TomcatWebServer] - Tomcat started on port(s): 10010 (http) with context path ''
2023-07-06 23:40:02.153 INFO  [restartedMain] [com.pjy.dashboard.PjyApplication] - Started PjyApplication in 11.41 seconds (JVM running for 12.999)
2023-07-06 23:40:02.154 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 23:40:02.154 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - Application started
2023-07-06 23:40:02.154 INFO  [restartedMain] [com.pjy.dashboard.AppStartedListener] - =====================
2023-07-06 23:40:03.260 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.a.c.c.C.[Tomcat].[localhost].[/]] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-07-06 23:40:03.261 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Initializing Servlet 'dispatcherServlet'
2023-07-06 23:40:03.287 INFO  [RMI TCP Connection(8)-127.0.0.1] [o.s.web.servlet.DispatcherServlet] - Completed initialization in 26 ms
2023-07-06 23:40:08.013 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:40:08.022 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
1. select * from MEMBER where userId = 'p00139'
 {executed in 1 msec}
2023-07-06 23:40:08.043 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.MemberServiceImpl] - ROLE_ADMIN
2023-07-06 23:40:08.137 INFO  [http-nio-10010-exec-10] [c.p.dashboard.service.MemberServiceImpl] - pass:$2a$10$MNrQAPw.4k9j2y08eTmYEeI7oKPuaWbA97HHog.8PYep5HsRwhbae,$2a$10$TfuHHjAfZbrlG0j8f68O0e48FRoBU.BhNsvwOTqRFqgqJsxp8jVxO
2023-07-06 23:40:08.391 WARN  [http-nio-10010-exec-10] [o.a.catalina.util.SessionIdGeneratorBase] - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [150] milliseconds.
2023-07-06 23:40:08.393 INFO  [http-nio-10010-exec-10] [c.p.d.configuration.SecurityConfig] - authentication:: p00139
2023-07-06 23:43:38.519 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@33aadea1
2023-07-06 23:43:38.563 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:43:38.567 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 23:46:08.385 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@33aadea1
2023-07-06 23:46:08.387 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:46:08.389 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. SELECT	/* select_PunctualityAnalize_route : 배차정시성분석 노선별 */
			'-전체-'  AS ROUTE_NM
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	UNION 	
	select  a.ROUTE_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100'
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	GROUP BY a.ROUTE_NM
	ORDER BY 1
 {executed in 1 msec}
2023-07-06 23:46:39.722 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8f8b0e89
2023-07-06 23:46:39.724 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:46:39.726 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 23:46:41.086 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@640b1b29
2023-07-06 23:46:41.088 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:46:41.089 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-04-01' AND '2023-07-06'
	AND 	a.EMP_NM = '최병국'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 23:46:43.723 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c745cb30
2023-07-06 23:46:43.724 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:46:43.726 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-04-01' AND '2023-07-06'
	AND 	a.EMP_NM = '손영호'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 23:46:45.399 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ddda9f16
2023-07-06 23:46:45.401 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:46:45.402 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-04-01' AND '2023-07-06'
	AND 	a.EMP_NM = '장남균'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 23:46:48.919 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3e62110b
2023-07-06 23:46:48.920 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:46:48.922 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_emp : 배차정시성분석 사원별 */
			a.EMP_NM 
		,	sum(a.TERM_PAST_CNT) AS sum_past
		,	sum(a.TERM_LATE_CNT) AS sum_late
		,	sum(a.TERM_WIBAN_CNT) AS sum_wiban
		,	avg(a.TERM_WIBAN_CNT) AS avg_wiban
		,	sum(a.TOTAL_STATION_CNT) AS sum_station
		,	round(sum(a.TERM_WIBAN_CNT*1.0) / sum(a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN  '2023-04-01' AND '2023-07-06' 
	AND 	a.BASE_YMD like  '' || '%'
	AND 	a.BASE_YMD = decode('','',a.base_ymd,  '')
	AND 	a.ROUTE_NM = decode('-전체-','-전체-',a.ROUTE_NM,'-전체-')
	GROUP BY  a.EMP_NM 
	ORDER BY 7 desc
 {executed in 1 msec}
2023-07-06 23:46:50.651 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@ddda9f16
2023-07-06 23:46:50.653 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:46:50.655 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-04-01' AND '2023-07-06'
	AND 	a.EMP_NM = '장남균'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 23:46:56.772 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@37351be0
2023-07-06 23:46:56.773 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:46:56.775 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-04-01' AND '2023-07-06'
	AND 	a.EMP_NM = '심상만'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 23:46:57.815 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@12d35bf0
2023-07-06 23:46:57.816 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:46:57.817 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-04-01' AND '2023-07-06'
	AND 	a.EMP_NM = '김형규'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 23:47:01.129 INFO  [http-nio-10010-exec-9] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@bd4c062d
2023-07-06 23:47:01.130 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:47:01.132 DEBUG [http-nio-10010-exec-9] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-04-01' AND '2023-07-06'
	AND 	a.EMP_NM = '연성석'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 23:47:01.938 INFO  [http-nio-10010-exec-4] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@a576f1ea
2023-07-06 23:47:01.940 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:47:01.942 DEBUG [http-nio-10010-exec-4] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-04-01' AND '2023-07-06'
	AND 	a.EMP_NM = '이춘복'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 23:47:02.624 INFO  [http-nio-10010-exec-6] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@4280eba5
2023-07-06 23:47:02.625 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:47:02.627 DEBUG [http-nio-10010-exec-6] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-04-01' AND '2023-07-06'
	AND 	a.EMP_NM = '이수환'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 23:47:03.603 INFO  [http-nio-10010-exec-8] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b542aa76
2023-07-06 23:47:03.605 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:47:03.606 DEBUG [http-nio-10010-exec-8] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-04-01' AND '2023-07-06'
	AND 	a.EMP_NM = '박노철'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 23:47:04.809 INFO  [http-nio-10010-exec-7] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@3db15f0d
2023-07-06 23:47:04.810 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:47:04.812 DEBUG [http-nio-10010-exec-7] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-04-01' AND '2023-07-06'
	AND 	a.EMP_NM = '양광일'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 23:47:05.855 INFO  [http-nio-10010-exec-2] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@8dd6f36d
2023-07-06 23:47:05.857 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:47:05.860 DEBUG [http-nio-10010-exec-2] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-04-01' AND '2023-07-06'
	AND 	a.EMP_NM = '유종각'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 23:47:07.449 INFO  [http-nio-10010-exec-1] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@e23234c4
2023-07-06 23:47:07.450 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 0 msec}
2023-07-06 23:47:07.451 DEBUG [http-nio-10010-exec-1] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-04-01' AND '2023-07-06'
	AND 	a.EMP_NM = '최정열'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 23:47:11.005 INFO  [http-nio-10010-exec-5] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@c745cb30
2023-07-06 23:47:11.006 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:47:11.008 DEBUG [http-nio-10010-exec-5] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-04-01' AND '2023-07-06'
	AND 	a.EMP_NM = '손영호'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 23:47:36.727 INFO  [http-nio-10010-exec-3] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@b542aa76
2023-07-06 23:47:36.728 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:47:36.730 DEBUG [http-nio-10010-exec-3] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-04-01' AND '2023-07-06'
	AND 	a.EMP_NM = '박노철'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 0 msec}
2023-07-06 23:47:37.805 INFO  [http-nio-10010-exec-10] [c.p.dashboard.controller.TestController] - com.pjy.dashboard.domain.CommonCodeVo@73cb26
2023-07-06 23:47:37.806 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.PoolBase.isConnectionAlive(PoolBase.java:161)
1. SELECT SYSTIMESTAMP FROM DUAL
 {executed in 1 msec}
2023-07-06 23:47:37.808 DEBUG [http-nio-10010-exec-10] [jdbc.sqltiming] -  com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
1. select  /* select_PunctualityAnalize_detail : 배차정시성분석 사원별 from to */
			a.BASE_YMD
		,	a.ROUTE_NM
		,	a.EMP_NM
		,	a.COL001
		,	a.COL002
		,	a.COL003
		,	a.COL004
		,	a.TERM
		,	a.TERM_85
		,	a.TERM_125
		,	a.TERM_PAST_CNT
		,	a.TERM_LATE_CNT
		,	a.TERM_WIBAN_CNT
		,	a.TOTAL_STATION_CNT
		,	round((a.TERM_WIBAN_CNT*1.0) / (a.TOTAL_STATION_CNT) * 100.0,2) AS rate_wiban
	from    TBL_ARRANGE_PUNCTUALITY_ANALIZE a 
	where   a.company_no = '100' 
	AND 	a.BASE_YMD BETWEEN '2023-04-01' AND '2023-07-06'
	AND 	a.EMP_NM = '-'
	ORDER BY a.BASE_YMD,a.col002,a.col003
 {executed in 1 msec}
2023-07-06 23:56:39.011 INFO  [RMI TCP Connection(28)-127.0.0.1] [o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin] - Application shutdown requested.
2023-07-06 23:56:39.041 INFO  [RMI TCP Connection(28)-127.0.0.1] [o.s.s.concurrent.ThreadPoolTaskExecutor] - Shutting down ExecutorService 'asyncThreadPool'
2023-07-06 23:56:39.043 INFO  [RMI TCP Connection(28)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown initiated...
2023-07-06 23:56:39.051 INFO  [RMI TCP Connection(28)-127.0.0.1] [com.zaxxer.hikari.HikariDataSource] - H2 - Shutdown completed.
2023-07-06 23:56:39.109 INFO  [RMI TCP Connection(28)-127.0.0.1] [com.pjy.dashboard.filter.TestFilter] - destroy Pjy Filter
